{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#epip-encounters","title":"Epip Encounters","text":"<p>Epip Encounters is a UI and quality-of-life mod targeting Epic Encounters 2, though it may also be used with the vanilla game or other Divinity: Original Sin 2 overhauls.</p>"},{"location":"#download","title":"Download","text":"<p>Language warning</p> <p>Only English is fully supported, however crowdsourced translations are underway. Localization is only possible thanks to the members of our community. If you want to help with it - feel free to contribute at our translation spreadsheet.  </p> <p>Standalone usage warning</p> <p>If you have the Improved Hotbar mod, you must disable it to use Epip. All of its functions are already in Epip (+ like 9 months worth of updates that the workshop mod never got). See the front page and the changelog if you're new to Epip.</p> <p>Gameplay mod info</p> <p>If you're using Derpy's EE2 Tweaks, you will likely want to grab the gameplay mod as well. Derpy's mod is intended to be used with it.</p> <p>Requires Norbyte's Script Extender. Load after both EE Core and EE Origins, if you have them.</p> <p>The stable version is months behind the beta one. Consider using the beta instead to avoid running into issues that were fixed long ago. As of 5/8/23 extender v60 is in a stable state; there are no known issues with it.</p> <p>Latest stable version, v1065. (07/05/23)</p> <p>See the patchnotes page for patchnotes.</p> <p>Special thanks to:</p> <ul> <li>Ameranth for programming help as well as the amazing moddability of EE</li> <li>Derpy Moa for motivation and initial ideas</li> <li>Norbyte for the Script Extender and it's fantastic UI features</li> <li>Elric for his help with designing and drawing new UIs</li> <li>Cathe for contributing to the feature showcases on this website, and some code and proof-reading too</li> </ul> <p>Translators:</p> <ul> <li>Cathe &amp; JoienReid: Russian</li> <li>Ferocidade: Brazilian Portuguese</li> <li>Ainsky: Simplified Chinese</li> </ul>"},{"location":"#features","title":"Features","text":"<p>Below is a non-exhaustive list of features; I suggested browsing the latest patchnotes to get up to speed with latest additions. </p>"},{"location":"#ui","title":"UI","text":""},{"location":"#target-status-bar","title":"Target Status Bar","text":"<p>Health bar shown at the top of the screen has been reworked to look better and include more information. More details here.</p> <p></p>"},{"location":"#player-portraits","title":"Player Portraits","text":"<p>Player portraits display has also received some love, most notably - the list of statuses will now wrap onto a second row to prevent it from obscuring most of your screen. More details here.</p> <p></p> <p>Epip makes dozens of other UI changes to improve your experience. You can read about the rest of them here.</p>"},{"location":"#hotbar","title":"Hotbar","text":"<p>Epip offers a heavily improved Hotbar UI, featuring multiple bars, custom \"action\" buttons in the bottom left, and numerous functions to make hotbar management easier.</p> <p></p> <p>To add/remove rows, click the small +/- icons to the right of the buttons area. You can cycle each row independently through all 5 rows of slots that the game allows. You can have up to 5 rows visible.</p> <p>You can use the regular hotkeys (F/R by default) to cycle the bottom bar. Holding shift while using them will cycle the second row from the bottom instead. Holding Ctrl will cycle the 3rd row, while holding alt will cycle the 4th one.</p> <p>The buttons next to the portrait are now customizable; when your hotbar is unlocked, you can drag and drop to rearrange them. Additionally, mods can add their own \"actions\" there, and there are a few new built-in ones. You can press the middle mouse button to unbind them.</p> <p>Right click one of those buttons or click the <code>^</code> button to bring up a \"drawer\" with all the actions that you can drag and drop onto your actions bar. You can also click them to use them directly from there.</p> <p></p> <p>These buttons can be used with keyboard hotkeys; to do so, you must assign keys to them from Epip's input options menu. They are labelled \"Hotbar Action #N\" there.</p> <p>By default, if you have 2+ rows of hotbar slots, you will also have a second row of these customizable buttons. You can disable this from the settings menu.</p> <p>Epip Encounters implements multiple handy new actions, in addition to some vanilla functions:</p> <ul> <li>Source Infuse &amp; Meditate</li> <li>Toggle Minimap</li> <li>Resting (using a bedroll from anywhere in your party inventory - no need to find one for everyone!)</li> <li>Toggle Party Link (instantaneous, no animation!)</li> <li>Respec (if Portable Respec Mirror mod is installed)</li> </ul> <p>The purpose of the action bar is to provide a centralized place for modders to add shortcuts/hotkeys to their interfaces or features, eliminating the need for interactable books that clutter your inventory and freeing up space on the hotbar.</p> <p>Right-click a row on the hotbar to bring up a context menu where you can \"push\" groups of slots around (great for inserting spells inbetween!), clear unmemorized spells, or save \"loadouts\" to restore your hotbars in later playthroughs.</p> <p></p> <p>Additionally, all \"engine actions\" (except for flee) are available from the vanilla actions drawer.</p> <p>The hotbar improvements are also available as a standalone mod with no EE dependency.</p>"},{"location":"#settings-menu","title":"Settings Menu","text":"<p>The settings menu has been expanded to allow mods to add their own settings. Epip includes its own tab full of options to customize its features.</p> <p></p> <p>The input menu has received similar treatment, with custom keybindings becoming possible. You must first click the \"Controls\" tab before you can access custom keybinds added by Epip.</p> <p>Custom hotkeys include Meditate, Source Infuse, as well as binding the 12 \"action buttons\" from the Hotbar UI.</p> <p></p> <p>Additionally, the difficulty can now be changed to/from tactician freely at any time. The side effects of this have not been studied well, but everything appears to work fine with the exception of already-initialized enemies having missing HP and consumables(?).</p>"},{"location":"#tooltip-adjustments","title":"Tooltip Adjustments","text":"<p>Tooltips have received numerous fixes and improvements, displaying a lot of information in a clearer manner. You can read about them at their dedicated page.</p> <p></p>"},{"location":"#inventory","title":"Inventory","text":"<p>A setting has been added to enable infinite carry weight for all party members. You can also enable automatic identifying of items, optionally not requiring any Loremaster.</p> <p>Consumable items, like mushrooms and food, no longer require you to use them once for them to show their effects in the tooltip.</p>"},{"location":"#combat-log","title":"Combat Log","text":"<p>You may now filter out individual types of messages in the combat log by right-clicking it. Certain messages have been reworded for clarity and can now \"merge\" if they happen in quick succession, improving readability. You can also clear the log from the context menu.</p> <p></p>"},{"location":"#world-tooltips","title":"World Tooltips","text":"<p>A keybind has been added to make world item tooltips toggleable, so you don't need to hold alt all the time. A setting also exists to disable these tooltips for empty containers and bodies, as well as to make clicking the tooltips open containers rather than pick them up.</p> <p>Additional settings exist to enable these tooltips for more item types, as well as to highlight certain types of items with a customizable color.</p> <p></p>"},{"location":"#overhead-text-and-notifications","title":"Overhead Text and Notifications","text":"<p>Settings have been added to shorten the duration of overhead text, and to change their size (as well as the size of damage numbers).</p> <p>Notifications from characters casting skills in combat are repositioned to show above the hotbar, so as not to obscure the enemy health bars. They can also be disabled in the settings.</p> <p>Additionally, you can change the duration of the area transition labels, or disable them entirely.</p>"},{"location":"#skillbook","title":"Skillbook","text":"<p>You can now unlearn skills by right-clicking them in the skillbook while out of combat. Innate skills cannot be unlearnt.</p>"},{"location":"#crafting","title":"Crafting","text":"<p>The crafting UI now remembers your previous tab, instead of always defaulting to showing all items - this is helpful for using the Greatforge. Additionally, you can set the default tab of the UI in the settings menu.</p>"},{"location":"#gift-bags-and-mod-incompatibilities","title":"Gift Bags and mod incompatibilities","text":"<p>Gift bag mods incompatible with EE are no longer selectable, to prevent regrets. Gift bags that work but for one reason or another are undesirable show a warning upon attempting to enable them.</p> <p></p> <p>Common mods incompatible with EE or its add-ons now show a warning when you load into the game with them enabled.</p>"},{"location":"#quick-examine","title":"Quick Examine","text":"<p>A \"Quick Examine\" panel can be opened with a custom hotkey (defaults to <code>V</code>). This panel is mainly used to show the effects enemies have from the \"Epic Enemies\" feature, but it also displays the character's artifacts, useful to check your ally's effects in multiplayer. More information will be added to this panel in the future.</p> <p></p>"},{"location":"#examine","title":"Examine","text":"<p>The Examine UI now shows Critical Chance, and can be configured to open on the sides of the screen instead of the center.</p> <p>Additionally, there is now a keybind to open the examine menu, and capitalization of the word \"Status efects\" has been made consistent with the rest of the UI.</p>"},{"location":"#ingame-patchnotes","title":"Ingame Patchnotes","text":"<p>A new journal UI can be accessed from the Hotbar actions, or after updating the mod. It lists the patchnotes of Epip, and other mods can add information/patchnotes there freely as well. Updating the mod will also show a prompt to open the UI.</p> <p></p>"},{"location":"#chat","title":"Chat","text":"<p>Chat commands are added, beginning with a slash (/). The following commands exist:</p> <ul> <li><code>/rp</code>: shows a message over your current character's head. Great for role-playing.</li> <li><code>/emote</code>: plays an animation for your current character. Use <code>/help emote</code> to see all emotes.</li> <li><code>/help</code>: shows all commands, or help for a particular command.</li> </ul>"},{"location":"#saveload-ui","title":"Save/Load UI","text":"<p>An alphabetical sorting option as well as a search bar can be enabled in the options for the save/load UI.</p> <p></p>"},{"location":"#ascensionmeditate","title":"Ascension/Meditate","text":""},{"location":"#ascension","title":"Ascension","text":"<p>You can now use the <code>Esc</code> key to go back to the previous page in the Ascension UI, or exit it if you're on the default page. An option exists to make this key always exit the UI.</p> <p>An \"Immersive Meditation\" setting can be enabled to hide the minimap and hotbar while within the EE UIs.</p>"},{"location":"#greatforge-context-menus","title":"Greatforge Context Menus","text":"<p>Item context menus now have options to quickly dismantle items, as well as to remove their runes. Doing so still costs the usual amount of gold/splinters respectively.</p> <p></p> <p>Containers with equipment in them get a \"Mass Dismantle\" option, letting you rapidly dismantle unwanted gear.</p> <p></p>"},{"location":"#greatforge","title":"Greatforge","text":"<p>An option to add sockets to items (\"Drill Sockets\") has been added. This does not allow you to break the 2 socket limit for one-handed weaponry.</p> <p>The Empower option now properly scales armor values, however this will only take effect after a save+reload.</p> <p>Additionally, an option to rename items (\"Engrave\") has been added. This is purely cosmetic.</p>"},{"location":"#epic-enemies","title":"Epic Enemies","text":"<p>Epic Enemies is a randomizer feature enabled from the ingame settings menu. It bestows enemies with EE perks such as keyword activators/mutators, artifacts, and more. You can configure the relative chance of each effect being rolled on enemies.</p> <p></p> <p>These effects will be applied to enemies when they enter combat. You may use the \"Quick Examine\" feature to view the perks that each enemy rolled; see its respective section in this site for more info.</p>"},{"location":"#vanity","title":"Vanity","text":"<p>Easy to use cosmetic customization system, including armor transmogrification, custom RGB dyes, quick outfit swapping and auras. Wanna drip as hard as this? Learn more at the dedicated feature page. </p>"},{"location":"#miscellaneous-bug-fixes-and-adjustments","title":"Miscellaneous Bug Fixes and Adjustments","text":"<p>Certain client-side vanilla issues have been fixed. You may read about them at their dedicated page.</p>"},{"location":"#for-developers","title":"For developers","text":"<p>Epip is built using numerous libraries, making client-side scripting and UI modding easier. This site's documentation of them is heavily WIP. Every UI touched by Epip has a lua table with wrapper APIs to manipulate it. Additionally, multiple utility libraries are available:</p> <ul> <li><code>Client</code>: contains queries relating to the client.</li> <li><code>Client.UI</code>: holds all UI tables; too many to list individually, below are the most noteworthy ones.<ul> <li><code>Client.UI.MessageBox</code>: allows you to open your own message boxes, which may also prompt for user string input.</li> <li><code>Client.UI.ContextMenu</code>: allows creating custom context menus, with numerous new types of elements and support for nested menus. Warning: it's a very old API and does not hold up to current standards. A rewrite is pending.</li> </ul> </li> <li><code>Client.Flash</code>: contains utility methods for handling Flash elements from lua.</li> <li><code>Client/Server.lua</code>: allows registering osiris symbol listeners from the client.</li> <li><code>Osiris</code>: provides a cleaner way of working with Osiris symbols: allows passing of extender entity objects in place of GUIDs, returning from user queries, and unpacking DB query results.</li> <li><code>Character</code>, <code>Item</code>: libraries with numerous utility functions for the related entity types.</li> <li><code>Text</code>: utility methods for working with text, featuring a super-versatile <code>Format</code> function for dealing with those pesky html font tags.</li> <li><code>Timer</code>: self-explanatory. Also supports tick-based timers.</li> <li><code>Coroutine</code>: improved coroutine table, with the ability to sleep coroutines, either for a certain amount of time or until a condition is met.</li> <li><code>Color</code>, <code>Vector</code>: utilities for dealing with colors and vectors.</li> <li><code>Client.UI.Generic</code>: allows for the creation of UIs using only lua. Work-in-progress (well, everything here is, in a way).</li> <li><code>Epip</code>: main mod table, containing registered Features.</li> </ul>"},{"location":"#developer-features","title":"Developer Features","text":""},{"location":"#debug-cheats","title":"Debug Cheats","text":"<p>If the extender developer mode is available, a cheats context menu is added to characters, with numerous handy functions like:</p> <ul> <li>Copying GUID to clipboard</li> <li>Teleporting</li> <li>Kill/resurrect</li> <li>Next-gen godmode (\"Pipmode\"), with infinite AP and 0 skill cooldowns</li> <li>Adding Flexstats, ExtendedStats, attributes/abilities, skills, statuses and more</li> <li>Spawning all artifacts, or specific treasure tables or templates</li> </ul> <p></p>"},{"location":"#debug-display","title":"Debug Display","text":"<p>In developer mode, a UI widget with FPS, TPS and mod version info can be enabled from the settings. This widget can be dragged around.</p> <p></p>"},{"location":"#debug-menu","title":"Debug Menu","text":"<p>In developer mode, a menu with debugging options for Features can be opened using a keybind (defaults to LCtrl + F). You can use it to change logging levels, disable features, and run tests. Your logging/debug settings are persistent.</p> <p></p>"},{"location":"#ai-logging","title":"AI Logging","text":"<p>An option exists to log AI scoring to the console.</p> <p></p>"},{"location":"#console-commands","title":"Console Commands","text":"<p>A few miscellaneous console commands are added:</p> <ul> <li><code>!bruteforceuitypes</code>: client-side; attempts to find the TypeIDs of all UIs currently instanced, including custom ones</li> <li><code>!soundtest</code>: client-side; plays all the sounds defined in the UI sounds lsx and shows their name. Useful for inspiration.</li> <li><code>!animtest</code>: server-side; plays all human female animations on the currently controlled character. Cannot be interrupted once started!</li> <li><code>!worryaboutsuchsmallthings</code>: tests the performance between <code>EsvCharacter:HasTag()</code> and <code>Osi.IsTagged()</code></li> <li><code>!testactionhandles</code>: tests string handles for \"actions\" from the Stats library.</li> </ul>"},{"location":"beta/","title":"Beta Versions","text":"<p>Extender devel version required</p> <p>Requires extender v60. Intended version: <code>4732ddc239fac2feeb1a5388a81e81a1920f7b7553dff0d3ac67b7c03916a9ff</code> To get it, use the following <code>ScriptExtenderUpdaterConfig.json</code> in the same folder where you installed the Extender (<code>DefEd/bin</code>):</p> <pre><code>{\n\"UpdateChannel\": \"Devel\",\n\"TargetResourceDigest\": \"4732ddc239fac2feeb1a5388a81e81a1920f7b7553dff0d3ac67b7c03916a9ff\",\n\"TargetVersion\": \"60.0.0.0\"\n}\n</code></pre>"},{"location":"beta/#v1066-020923-upload","title":"v1066 (02/09/23 upload)","text":"<p>Download here.</p>"},{"location":"beta/#inventory-multi-select","title":"Inventory Multi-Select","text":"<p>An option to enable multi-select controls for the party inventory UI has been added, enabled from the \"Inventory\" settings tab.</p> <p></p> <p>Use Ctrl+Left Mouse Button to select/deselect items. If at least one item is selected, Shift+Left Mouse Button will select a range of items between the mouse and the first selected item.</p> <p>Right-click selected items to access a context menu with operations, or drag and drop them to inventory slots, player inventory tabs, or container items to move them.</p> <p></p>"},{"location":"beta/#other-additions-and-changes","title":"Other additions and changes","text":"<ul> <li>Added a setting to play a notification when another player joins dialogue, to make it harder to miss. You may enable it in the \"Notifications\" tab.</li> <li>The hotbar action for using pyramids now has the following priority for picking the pyramid to use:<ol> <li>Pyramid within the inventory of the character that pressed the button</li> <li>Pyramids within other characters controlled by the same user</li> <li>Other pyramids in party inventory</li> </ol> </li> </ul>"},{"location":"beta/#fixes","title":"Fixes","text":"<ul> <li>Fixed hotbar bedroll and pyramids actions not working if EE was not enabled</li> <li>Fixed camera settings not being saved after clicking \"Reset to defaults\"</li> <li>Fixed status tooltips appearing far away from the cursor in the Alternative Status Display</li> <li>Fixed some labels being cut off in the settings menu</li> </ul> Technical stuff <ul> <li>TextLib no longer removes outdated translations from localization templates</li> <li>Added <code>PlayerInfo.GetPlayerElements()</code>, and hooks for <code>updateInfos</code></li> <li>Fixed a regression causing the prompt for opening the Fishing log to not work</li> <li>QuickInventory: fixed built-in Generic events being hidden</li> <li>Added align options to <code>Tooltip.ShowStatusTooltip()</code>, moved it to separate script (other tooltip types will follow)</li> <li><code>Library:Error()</code> now blames user code in the stack; the new <code>Library:InternalError()</code> blames the function itself</li> <li>Fixed comments for aliases in generated IDE annotations</li> <li>OsirisIDEAnnotationGenerator now supports all symbol types from the header, uses lowercase for parameter names, avoids parameter name duplication and has an option to generate annotations intended for the <code>Osiris</code> library</li> <li>Fixed <code>Item</code> not actually being a library</li> <li>Clarified the usage of <code>Item.GetOwner()</code></li> </ul>"},{"location":"beta/#generic","title":"Generic","text":"<ul> <li>Instances now come with an empty <code>Hooks</code> table</li> <li>Fixed <code>Text:SetType()</code> not applying until the text was changed (didn't affect Text prefab)</li> <li>Spinner: cleaned up script, implemented Elementable, changed default colors to white</li> </ul>"},{"location":"beta/#v1066-260823-upload","title":"v1066 (26/08/23 upload)","text":""},{"location":"beta/#new-features-changes","title":"New Features &amp; Changes","text":"<ul> <li>Added a setting to allow dragging unlearnt skills onto the hotbar, ex. from the codex. This is useful for creating placeholders. You can find it in the \"Hotbar\" tab.</li> <li>Made various strings from older features translatable, mostly tooltip-related ones</li> <li>Holding shift to see precise AP costs for movement should now work in other languages</li> <li>The setting to disable loremaster shared notifications should now work in other languages</li> <li>Added a setting to disable the \"Masterworked\" tooltip</li> </ul> <p>Due to some reorganization, you will have to rebind the B/H Overheads hotkey.</p>"},{"location":"beta/#quick-find","title":"Quick Find","text":"<ul> <li>The position of the UI no longer resets to the screen center every time it's opened</li> <li>Added a wares filter</li> <li>Added a scrollbar to the settings panel, for when there are too many of them</li> <li>Improved performance when changing settings</li> <li>Stat filter now has a tooltip</li> <li>Fixed searching for \"two-handed\" and \"single-handed\" stat boosts not working</li> </ul>"},{"location":"beta/#fixes_1","title":"Fixes","text":"<ul> <li>Fixed the \"Gear modifiers are added after choosing your reward\" and surface damage scaling tooltips appearing when not using EE</li> <li>Fixed performance degradation in the Codex Info section</li> <li>Fixed physical armor reduction using the wrong color when holding shift to see damage multipliers in skill tooltips</li> </ul> Technical stuff <ul> <li>Removed some old UI files</li> <li>Added HTML-related methods to <code>Text.HTML</code></li> <li><code>Text.Format()</code> now mentions relative font sizes being supported, and the `FormatData`` class now has all fields marked as optional for clarity</li> <li>Fixed align option in <code>Text.Format()</code></li> <li>Added a new IDE annotations generator for Extender classes and libraries; see <code>Features.IDEAnnotations</code> and <code>!ideannotations</code><ul> <li>Fixes various issues with the built-in generator, ex. aliases for enums</li> </ul> </li> <li>Minor annotation fixes and cleansing of unholy trailing space</li> <li>Hotbar: added new methods and <code>SlotHovered</code> event</li> <li>InputLib: action names and descriptions now support TSKs</li> <li>DebugMenu configuration is now saved upon exiting</li> <li><code>Feature:Disable()</code> has been reworked into <code>Feature:SetEnabled()</code> and now properly supports re-enabling</li> <li><code>Event:Unsubscribe()</code> now removes all nodes with the passed ID</li> <li>TooltipLib now has some methods copied over from Game.Tooltip to workaround certain mods yeeting them</li> </ul>"},{"location":"beta/#generic_1","title":"Generic","text":"<ul> <li>AnchoredText: added <code>inactivecolor</code> and <code>activecolor</code> attributes to <code>&lt;a&gt;</code>, for auto-coloring anchors based on state</li> <li>Texture: implemented <code>SetAlpha()</code></li> <li>GenericUITextures now has a UI that previews registered textures and styles, opened using <code>!genericstyles</code> or a new developer keybind (defaults to Left Ctrl+L)</li> <li>Added support for pooling Text elements, improving performance in cases where they are destroyed and recreated (ex. Codex Info section)</li> <li>Fixed <code>SetChildIndex()</code> for lists and out-of-range indexes (ex. passing 999 now properly sets the element as last)</li> <li>Added <code>SortByChildIndex()</code> to lists (except Grid)</li> <li>FormElement now implements Elementable</li> </ul>"},{"location":"beta/#v1066-120823-upload","title":"v1066 (12/08/23 upload)","text":""},{"location":"beta/#new-features-changes_1","title":"New Features &amp; Changes","text":"<ul> <li>When holding shift during combat, your remaining free movement distance is displayed, and decimal AP costs are now also displayed with the Pawn talent</li> <li>Added a new setting that speeds up picking items through clicking their world tooltips; you may find it underneath the Animation Cancelling setting</li> <li>In the mods menu, \"Targets story mode\" tooltip is now \"Targets campaign mode\" to prevent confusion</li> </ul>"},{"location":"beta/#quick-inventory","title":"Quick Inventory","text":"<ul> <li>Added a \"Miscellaneous\" filter, which currently shows books and keys<ul> <li>You may filter out read books and used keys</li> </ul> </li> </ul>"},{"location":"beta/#codex","title":"Codex","text":"<p>The Codex has received a new \"Info\" section, where textual information will be placed. Currently, it contains Epip changelogs; the previous UI for these has been removed. The \"Epip has been updated\" message box will now take you to this UI instead.</p> <p></p>"},{"location":"beta/#world-tooltips","title":"World Tooltips","text":"<ul> <li>Added a filter for lights (torches, braziers, etc.)</li> <li>Added a filter for beds, within the same setting that filters chairs and doors</li> </ul>"},{"location":"beta/#fixes_2","title":"Fixes","text":"<ul> <li>Fixed non-English languages still having gameplay mod string overrides</li> <li>Fixed an issue that was causing custom tooltips that were positioned near the mouse to \"stick\" to their initial place</li> </ul>"},{"location":"beta/#technical-stuff","title":"Technical stuff","text":"<ul> <li>Fixed <code>Library:Error()</code> erroring (lol)</li> <li>Codex's sidebar can now be extended by Sections</li> <li>Minor cleanups and annotation fixes</li> <li>ExtraData in Stats library is now parsed from mod files</li> <li>A few minor new calls were added to some libraries</li> <li>Choice settings no longer throw when an invalid value is set; this helps with migrating choice IDs of existing settings</li> <li>QuickInventory UI now has a RenderSettings event, solving the open-closed violation of the settings panel</li> </ul>"},{"location":"beta/#generic_2","title":"Generic","text":"<ul> <li>Added the AnchoredText prefab, which enables events when hovering or click text with <code>&lt;a&gt;</code> HTML tags</li> <li><code>SettingWidgets</code> feature now supports setting descriptions as tooltips</li> <li>Passing <code>nil</code> to <code>SetTooltip()</code> is now supported, removing the tooltip properly</li> <li>Added a MouseMove event; this is spammy, so it is opt-in</li> <li>Added <code>Text:IsMouseWithinRange()</code> and <code>Text:IsMouseWithinKeyword()</code></li> <li>Text prefab now inherits events from the element, and supports the <code>setSize</code> parameter</li> <li>Size overrides are now considered for GetRawWidth/GetRawHeight<ul> <li>The size overrides are getting a bit weird to handle, so this might change in the future</li> </ul> </li> <li>Button prefab's Pressed event is now thrown after state changes</li> <li>Cleaned up the Text element, possibly improving preformance a tiny bit</li> </ul>"},{"location":"beta/#v1066-50823-upload","title":"v1066 (5/08/23 upload)","text":""},{"location":"beta/#changes-additions","title":"Changes &amp; additions","text":"<ul> <li>Added a setting to show surface tooltips above the hotbar UI, enabled by default</li> <li>When creating Hotbar Groups, the labels in the UI now use a black text color</li> </ul>"},{"location":"beta/#fixes_3","title":"Fixes","text":"<ul> <li>Vanity: fixed transmogged armors showing up after the character's corpse was destroyed, which also lead to materials persisting on them</li> <li>Codex: fixed skills with a name that's not a string key being filtered out (ex. skills that had their name directly set in Lua)</li> <li>Fixed some artifacts having the wrong keywords declared in Epip (which affected Codex filtering), and added keywords to many artifacts which previously didn't have them</li> <li>Marked more scripts as EE-only<ul> <li>You should no longer see giftbag warnings if EE is not enabled</li> </ul> </li> </ul>"},{"location":"beta/#technical-stuff_1","title":"Technical stuff","text":"<ul> <li>Minor annotation fixes for CombatLog</li> <li>Fixed some TooltipAdjustments TSKs being registered on the wrong library</li> <li>Added more DB methods to <code>Osiris</code></li> <li>Updated the Osiris calls used by the StatsTab feature, hopefully removing all deprecation warnings</li> </ul>"},{"location":"beta/#generic_3","title":"Generic","text":"<ul> <li>Added more textures and button styles</li> <li>Texture: width and height overrides can be specified separately (ex. can pass <code>-1, 100</code> as params to <code>SetTexture()</code>)</li> <li>Fixed field visibility of <code>Stylable._Style</code> (now protected), added <code>GetStyles()</code></li> <li>Added the <code>SlicedTexture</code> prefab, which will replace <code>TiledBackground</code> and <code>Divider</code>. Only a few textures are built-in for it right now</li> </ul>"},{"location":"beta/#v1066-290723-upload","title":"v1066 (29/07/23 upload)","text":""},{"location":"beta/#punisher","title":"Punisher","text":"<ul> <li>Added voice acting, available for a limited time only as it hurts my throat to do such an edgy voice all the time</li> </ul>"},{"location":"beta/#custom-hotkeys","title":"Custom Hotkeys","text":"<p>The custom hotkeys system has been reworked. They are now accessed via a tab within the Epip settings menu, rather than the game's controls menu. This will offer them more flexibility in the future.</p> <p>You will have to reconfigure your previous bindings.</p>"},{"location":"beta/#quick-find_1","title":"Quick Find","text":"<ul> <li>Added a rarity filter</li> <li>Added a setting to close the UI when you click something in the world</li> <li>The close button now plays a sound when clicked</li> <li>Considerably improved performance once again</li> </ul>"},{"location":"beta/#other-changes-and-additions","title":"Other changes and additions","text":"<ul> <li>The settings menu now has some margin on the leftmost labels of settings</li> <li>Slight performance improvements to the Codex</li> <li>Small (~5%) performance improvement to all Generic UIs (most custom Epip UIs)</li> </ul>"},{"location":"beta/#fixes_4","title":"Fixes","text":"<ul> <li>Fixed Portable Respec Mirror hotbar action not working</li> <li>Fixed the Alternative Statuses Display showing up in the respec screen</li> <li>Fixed tooltips not being hidden if you exit the settings menu with escape key</li> <li>Fixed sliders in the settings menu not being vertically centered</li> <li>Fixed being able to scroll too far in Quick Find and the Codex if you go from having a lot of slots to only having a few</li> <li>Fixed massive FPS drops in the Epip settings menu</li> </ul>"},{"location":"beta/#technical-stuff_2","title":"Technical stuff","text":"<ul> <li>Added hooks to the Overhead UI</li> <li>Fixed cases of trying to fetch vanilla TSKs during module load</li> <li>Added vararg to all logging methods in Library/Feature</li> <li>Added <code>Feature:__Initialize()</code> as well as a hook for before/after it; this will be the intended moment to initialize feature fields from now on (for easier patching)</li> <li>Added <code>RegisterAction()</code> to HotbarActions to make it easier to use</li> <li>Extracted TSKs for HotbarActions</li> <li>Codex: added an interface for grid-like sections, reducing code duplication</li> <li>Moved some Generic classes to separate files, cleaned up annotations</li> <li>Fix a missing nil check in PersonalScripts</li> <li>Deprecated the <code>REQUIRED_MODS</code> field in Feature</li> <li>Added a Hook alias for Event; the previous Hook class is now LegacyHook</li> <li>Consolidated previous ViewportChanged events into a single one within Client</li> </ul> <p>Generic:</p> <ul> <li>Changed layout to <code>fitVertical</code></li> <li>Added support for capturing input events (\"Iggy Events\")<ul> <li>A more sophisticated system for creating navigation will be added in the future</li> </ul> </li> <li>Added FormTextHolder prefab (for input settings menu)</li> <li>Added more width/height-related calls</li> <li><code>SetPositionRelativeToParent()</code> now considers size overrides</li> <li>Fixed destroying children within containers for all remaining container types<ul> <li>Previously only Grid had this consideration, where in practice it was the only place it mattered, as it set the visibility of elements it positioned - which it no longer does either</li> </ul> </li> <li>Improved <code>Text:GetTextSize()</code> accuracy yet again - all cases of short text being cropped horizontally should now be solved</li> <li>Fixed annotations for exposed Element methods</li> <li>Marked listeners as private methods</li> <li>Removed obsolete events</li> <li>Containers now use <code>GetWidth()</code>/<code>GetHeight()</code> to fetch element sizes, meaning they not only respect size overrides (which they already did) but also overrides of the function itself<ul> <li>Containers now override this to return the width/height of the visible content itself, rather than using the calculated flash values. This fixes the case of scrollbars being oversized</li> </ul> </li> </ul>"},{"location":"beta/#v1066-160723-upload","title":"v1066 (16/07/23 upload)","text":"<p>This patch adds an Artifacts tab to the Codex.</p> <p></p> <p>Artifacts that you own (either equipped or in the party inventory, as item or rune) are highlighted. You may filter artifacts by their slot, associated keywords, as well as tier, if you're using Derpy's Artifact Tiers.</p>"},{"location":"beta/#other-changes-and-additions_1","title":"Other changes and additions","text":"<ul> <li>Added Simplified Chinese localization by Ainsky<ul> <li>There are certain issues with this translation, however we have not been able to contact the author yet. Please join the <code>#epipeline</code> channel on the EE discord if you authored this translation.</li> </ul> </li> <li>Enabled mouse controls when using controller<ul> <li>This enables you to use UIs that support mouse, such as custom Epip UIs, as well as some reused Larian KB+M UIs such as the player portraits</li> <li>This prevents the mouse from being hidden while idle when using controller (might become a setting later)</li> </ul> </li> <li>Custom tooltips from Epip UIs now work while using controller</li> <li>BH Overheads now show for characters near the camera point, rather than near your selected character</li> <li>Significantly reduced stutter from BH Overheads</li> <li>Significantly reduced stutter for Epip UIs that use inventory-like slots<ul> <li>The time to open Quick Find for the first time should be reduced by 30-35%</li> <li>The Skills Codex should see similar improvement</li> </ul> </li> <li>Source Infuse and Meditate keybinds are now only shown if EE is enabled</li> </ul>"},{"location":"beta/#fixes_5","title":"Fixes","text":"<ul> <li>Fixed the tooltips for various world tooltip options misnaming the \"Enable tooltips for all items\" option</li> <li>Hotbar: fixed chain/unchain actions not working (beta issue)</li> <li>Fixed source infuse / meditate keybinds not working (beta issue)</li> <li>Examine Menu: fixed critical chance appearing in the wrong place for characters with many resistances</li> <li>Quick Examine: fixed resistances text getting cropped out if a character had too many of them</li> <li>Fixed the click sound for close buttons not playing in some custom UIs</li> <li>Fixed BH Overheads appearing over invisible enemies</li> <li>Fixed some sliders in the settings menu having their values cropped out until interacted with</li> <li>Fixed positioning of the \"Alternative Status Display\" when using controller</li> </ul>"},{"location":"beta/#technical-stuff_3","title":"Technical stuff","text":"<ul> <li>ArtifactLib: added <code>IsOwnedByParty()</code>, <code>HasKeyword()</code>, and missing VolatileArmor keyword tags to artifacts</li> <li>Added <code>Profiling</code> library as well as Feature integration. No GUI exists for this yet, results can only be viewed through the console command</li> <li>Added <code>EnabledFunctor</code> property to event options, letting listeners only fire conditionally<ul> <li>Feature has a method that returns such a functor which checks for <code>:IsEnabled()</code></li> </ul> </li> <li>Added <code>ObjectPool</code> data structure</li> <li>Fixed <code>Text.Round()</code> for negative values</li> <li>Added <code>Meditate</code> library (currently barebones, will aid in controller support later)</li> <li>Added <code>SourceInfusion.RequestInfuse()</code></li> <li>Various annotation fixes, and purging of trailing whitespace</li> <li>Improved <code>Character.GetStatusesFromItems()</code>, now works with many more status sources (hopefully all)</li> <li>Fixed <code>Combat.GetCombatID()</code> on server</li> <li>Removed the extender IDE files from the project to fix issues with doc generation. In the future, Epip will get its own annotation generator to fix the many issues with the current one</li> <li>Improvements to the localization sheet (will be deployed the next time the sheet is updated):<ul> <li>Outdated translations will have their cell marked in red background color</li> <li>Rows will be sorted by script and original text (alphabetically)</li> </ul> </li> </ul>"},{"location":"beta/#generic_4","title":"Generic","text":"<ul> <li>Added custom tooltip support to elements, and fixed not being to replace an existing tooltip</li> <li>Added <code>Element:GetParent()</code> and <code>Element:GetChildren()</code></li> <li>Added an experimental <code>VerticalList</code> prefab that reimplements the basic VerticalList element functionality.<ul> <li>Unfortunately the performance of this is at best tied with the element, but it can serve as an example of how to implement custom containers, should you need for example unusual element positioning.</li> </ul> </li> <li>Manual <code>Destroy()</code> now makes table references unusable</li> <li>Fixed <code>Destroy()</code> not working properly for elements within <code>VerticalList</code>. The other containers will be fixed later.</li> <li>Fixed <code>Text:GetTextSize()</code>; the flash <code>textHeight</code> property was highly inaccurate; it seemingly considered the height as if the text had one more line than it actually did</li> <li>Added <code>Text:GetLineHeight()</code></li> <li>Added more textures and icons - make sure to redownload the assets folder if you're using the unpacked mod</li> <li>The <code>Slot</code> element now has certain features such as cooldown animations disabled until they are needed. This signficantly improves performance when creating many slots<ul> <li><code>HotbarSlot</code> prefab has been adjusted to support this</li> </ul> </li> </ul>"},{"location":"beta/#v1066-10723-upload","title":"v1066 (1/07/23 upload)","text":"<p>This update adds the Codex UI, which will be an in-game knowledgebase for various topics. Currently it only features a Skills page that displays all player skills in the game, and allows for filtering and searching them. The default keybind for opening the Codex is Left Ctrl+G.</p> <p></p> <p>This page also serves as an alternative to the skillbook; you can drag skills out of it to memorize them and assign them to your hotbar.</p> <p>In the future, you'll also be able to unmemorize and learn skills directly from it, if you have the skillbook.</p>"},{"location":"beta/#quick-inventory_1","title":"Quick Inventory","text":"<ul> <li>Added wand, bow and crossbow filters, which were missing by oversight</li> <li>Added sorting for consumables; order is:<ol> <li>Scrolls</li> <li>Grenades</li> <li>Arrows</li> <li>Potions</li> <li>Food</li> <li>Drinks</li> </ol> </li> <li>Fixed searching for resistances not working properly</li> </ul>"},{"location":"beta/#other-changes","title":"Other Changes","text":"<ul> <li>You can now change the layer of a hotbar group through their context menu</li> <li>Added a close button to the hotbar group creation/resize UIs</li> <li>Runes no longer show the confusing \"Set :\" prefix<ul> <li>This was previously only done for equipment</li> <li>A setting to disable this tweak has also been added</li> </ul> </li> </ul>"},{"location":"beta/#fixes_6","title":"Fixes","text":"<ul> <li>Fixed TSKs from the gameplay mod still being in Epip; you will need to redownload the gameplay mod if you use it</li> <li>Slots within Epip UIs now only play a dragging sound if the slot is not empty</li> <li>Fixed some tooltip adjustments not working on tooltips created within Epip UIs</li> <li>Fixed Ambidextrous checks (again) which might've lead to incorrect hotbar behaviour with potions and scrolls</li> <li>Fixed the Debug Cheats menu showing the wrong talents for characters that weren't the active client character</li> <li>Fixed performance issues from the stats tab when picking up items</li> </ul>"},{"location":"beta/#technical-stuff_4","title":"Technical Stuff","text":"<ul> <li>Added a way to load lua scripts from a file defined in <code>Osiris Data/Epip/PersonalScripts.json</code>; this can be used to load test/debug scripts without needing to include them within the mod. See the <code>PersonalScripts</code> feature.<ul> <li>Removed various console commands as they are of no use other than personal</li> </ul> </li> <li>Added <code>Texture</code> library, and support for its data structures for Generic</li> <li>Various annotation fixes and clean ups</li> <li>Added more methods to CombatLib and fixed <code>GetTurnOrder()</code></li> <li>Moved Epip's Hotbar actions to a new feature</li> <li>Added <code>GetClassDefinition()</code> to OOP classes</li> <li>Choice settings's <code>SetValue()</code> now has validation</li> <li>Fixed registering TSKs with a StringKey</li> <li><code>Library:RegisterTranslatedString()</code> now returns the TSK</li> <li>Fixed <code>OOP.IsClass()</code> throwing if the object was not a class</li> <li>Added the <code>Elementable</code> interface, which lets prefabs behave as if they were elements (\"inheriting\" Element's methods)</li> <li><code>Stats.Get()</code> now allows type-capture</li> <li>Added <code>UI:ToggleVisibility()</code></li> <li>Added some basic InputLib integration to Feature</li> <li>Added the <code>SettingsWidgets</code> feature, for rendering settings into Generic UIs as form elements</li> <li>Added the <code>SkillbookTemplates</code> feature, which lets you query item templates that have a SkillBook use action</li> <li>Fixed an error when hovering over a Status prefab whose status had expired</li> </ul>"},{"location":"beta/#generic_5","title":"Generic","text":"<ul> <li>Added the <code>Stylable</code> interface, for defining styles for customizing prefab appearances</li> <li>Added the <code>Button</code> prefab, which will replace the Button and StateButton elements. Its major advantage is support for styling, as well as the extendability and maintainability that comes from it being implemented in lua rather than flash.</li> <li>Various fixes to the Texture element</li> <li>Added <code>GetRawSize()</code> to some elements</li> <li>Fixed return values when calling exposed flash functions from lua</li> <li>Reworked CloseButton prefab to use the Button prefab</li> <li>Added focus-related events to Text element</li> <li>Added lots of UI textures and icons for use with Generic; see the <code>GenericUITextures</code> feature</li> <li>Added the <code>SearchBar</code> prefab</li> </ul>"},{"location":"beta/#v1066-180623-upload","title":"v1066 (18/06/23 upload)","text":"<p>This version adds an option to replace the status bar by your character's portraits with a new custom UI - see \"Alternative status display\" in Player Portrait settings.</p> <p></p> <p>This by default behaves mostly the same as the regular status bar, with the major exception being no animations for statuses being removed - they might be added if there is demand.</p> <p>The major advantage of this new UI is status sorting, which was thought to be too difficulty to implement in Larian's UI. Right-click a status to set its sorting priority.</p> <p></p> <p>Statuses with a high priority show up in the leftmost position, while statuses with a low priority show up in the rightmost position. Statuses that are tied in priority show in order of application. You may use this to position important or informational statuses (ex. Source Generation duration or tiered statuses) in a consistent position.</p> <p>You may also filter out statuses in this context menu to hide them. Holding shift will temporarily disable this filter, letting you quickly check your hidden statuses and unhide them if necessary. You may also manage this filter within the settings menu.</p>"},{"location":"beta/#other-changes-and-additions_2","title":"Other changes and additions","text":"<p>Added a new hotkey that will show BH over the heads of nearby characters while held (\"Show B/H\" binding; unbound by default): </p> <p>Added an option to display common flags in the enemy health bar (\"Display common flags\" setting). It will display the following information (if applicable) while holding shift:</p> <ul> <li>Whether Comeback Kid is available</li> <li>Whether Attack of Opportunity is available</li> <li>Whether the character is flagged as incapable of joining combat</li> <li>The character's AI archetype (ranger, rogue, etc.)</li> <li>These flags are not shown if the character doesn't have them</li> </ul> <p></p> <p>Holding shift while looking at equipment tooltips will now display information about their EE gear modifiers, such as their tier. This display will be improved in the future to be more user-friendly.</p> <p></p> <p>Quick Find has received various improvements:</p> <ul> <li>Added a filter for Culled items</li> <li>Added a filter to hide equipped items</li> <li>The UI is now draggable (from the top area)</li> <li>The UI is now closed automatically when you drag an item into the Greatforge socket (which you can now do thanks to an extender fix)</li> </ul> <p>You can now manually set an icon for an item with Vanity Transmog using the new \"Set Icon\" button. The \"Keep Icon\" toggle remains and works alongside it. This uses a new \"Icon Picker\" UI.</p> <p></p>"},{"location":"beta/#other-small-changes","title":"Other small changes","text":"<ul> <li>Server-side animation cancelling now has special logic to handle some previously problematic skills<ul> <li>Projectile, Jump, MultiStrike, ProjectileStrike and Target skills now have special logic to handle cases like multi-projectile/hit skills</li> </ul> </li> <li>\"+X% Weapon Elemental Damage\" tooltip now works for any deltamod that adds damage, not just ones from EE</li> <li>Hotbar groups can now be resized through their context menu - you can thank Cathe for that</li> <li>Changed hotbar slot requirement evaluation to use a new extender call, which should also make it compatible with mods using custom requirements</li> <li>Added a Gloves filter to Quick Find, which was previously missing (thanks Cathe)</li> <li>Reordered slot filters in Quick Find; armor goes first, then weapons/shield, then jewelry (thanks Cathe)</li> <li>Fixed a vanilla bug where undead characters would not see any armor restoration numbers over their head</li> <li>Added the <code>!rainbowoverlays</code> console command</li> <li>Cleaned up some scripting for the default crafting filter; as a side-effect you will have to reconfigure the setting</li> </ul> <p>Fixes:</p> <ul> <li>Fixed a regression that caused EE to add permanent stats when using their dyes<ul> <li>You can use the <code>!fixdyestats</code> console command to remove these extra stats from your current active character; you'll need to run it once for each dye you applied</li> <li>Reminder that Epip has a far more customizable dyes feature in the Vanity UI</li> </ul> </li> <li>Fixed EE dyes being usable from Vanity even if the party didn't have them</li> <li>Fixed hotbar group slots having wrong element layering and all blinking while using any skill</li> <li>Fixed some hotbar inaccuracies when using Ambidextrous</li> <li>Fixed node stats in the stats tab not disappearing after being removed. This fix is retroactive.</li> <li>Fixed Inconspicuous being hidden while not using Derpy's Tweaks</li> <li>Fixed \"Show loot drops in healthbar\" feature possibly not working correctly with Derpy's changes</li> <li>Fixed a hotbar error if you unbound the vanilla hotkeys for vanilla actions (inventory, journal, map, etc.)</li> <li>Fixed an error when dealing damage through moving items</li> </ul> <p>On the technical side:</p> <ul> <li>Added OverlayColorsBruteForcer feature, which as the name suggests helps with figuring out the usages of the 50 overlay colors in GlobalSwitches</li> <li>ColorLib now contains an enum of most overlay colors used by the game</li> <li>Fixed <code>Character.GetSkillState()</code> on server</li> <li>Added <code>Damage</code> library, currently only containing TSKs for damage types - will be used for hit/heal-related business later on</li> <li>Craft UI table now has the TSKs for item filters</li> <li>Ambidextrous check in <code>Item.CanUse()</code> should be more accurate now</li> <li>Added <code>Tick</code> event to GameStateLib</li> <li>Added <code>BatteredHarried.IsDisplayStatus()</code>, <code>Stats.GetStatusName()</code>, <code>Color.Lerp()</code>, <code>DeltaMods.GetItemDeltaMods()</code> and an item-only overload to <code>Item.IsEquipped()</code></li> <li>Added SPIRIT_VISION icon to StatsLib</li> <li>SourceInfusionLib now holds Source Generation status IDs</li> <li>Fixed <code>Stats.GetStatusIcon()</code> for CONSUME statuses</li> <li>It's possible to now register TSKs post-init in features/libraries via <code>:RegisterTranslatedString()</code></li> <li>Various annotation fixes, mostly to Stat entries</li> <li>Simplified <code>Client.IsInDialogue()</code> implementation</li> <li>UserVarsLib now supports default values for user and mod variables</li> <li><code>Item.GetPartyTemplateCount()</code> now strips GUID prefixes</li> <li>Generic:<ul> <li>Added CloseButton and DraggingArea prefabs</li> <li><code>IggyIcon:SetIcon()</code> call is NOOP'd if there is no change in the icon setup (texture, width and height), which possibly increases performance in icon-heavy UIs</li> <li>Fixed <code>Instance:Destroy()</code></li> <li>Status prefab now looks a lot closer to the statuses in Larian UIs</li> <li><code>IggyIcon:SetAlpha()</code> now supports <code>affectChildren</code> parameter</li> </ul> </li> </ul>"},{"location":"docs/","title":"Introduction","text":""},{"location":"docs/#documentation","title":"Documentation","text":"<p>The features of Epip Encounters are built on top of a lot of trial-and-error research and work on client-side scripting and UI modding.</p> <p>Since late 2021, the focus of development has shifted to making the internals of the mod available as libraries, aiming to provide utility, better maintainability, extendability and easy manipulation of UIs from lua.</p> <p>The ultimate goal is to make the mod easy for someone else to continue working on after/if I depart - EE is an overhaul built to last and be tinkered with, and I would like to honor that in my own project.</p> <p>This change will be a long process. There are still many features of the mod that remain to be rewritten to the new standards and methodology, or extended to provide functionality beyond what the current mod needs.</p> <p>Anything that is documented here is considered stable and unlikely to change drastically - any changes to these calls/systems will be mentioned in future patch notes.</p> <p>The definitions here are auto-generated from EmmyLua annotations within the scripts (using <code>update_docs.py</code> found in the mod). Functions are tagged through <code>@meta</code> to denote tags like \"Client-only\", \"EE-only\". Declaring these at the top of the file tags all functions in the file.</p>"},{"location":"docs/#introduction","title":"Introduction","text":"<p>The mod's root table contains the following tables:</p> <ul> <li><code>Epip</code>: stores references to \"Features\" and metadata related to the mod.</li> <li><code>Game</code>: contains libraries for querying information of characters, items and other contexts relating to the game.</li> <li><code>Client</code>: contains client-specific calls as well as tables offering UI-specific calls, events and hooks.</li> <li><code>Utilities</code>: contains utility methods useful across many contexts.  </li> </ul> <p>The scripting in Epip Encounters focuses on event-driven programming. Aside from functions, systems and features tend to implement events and hooks which allow other scripts to react to them being raised.</p> <p>Event listeners allow you to react to events sent from scripts. They can receive parameters and are executed in the order that they were registered.</p> <pre><code>-- Listen for the shift key being pressed/unpressed.\nClient.Input:RegisterListener(\"SneakConesToggled\", function(pressed)\nprint(\"Sneak cones toggled: \" .. pressed)\nend)\n</code></pre> <p>Hooks are similar to event listeners, but are used to modify values calculated within functions. Their purpose is to allow scripts to alter the logic or output of functions. A hook is always passed a \"default value\" as its first parameter, which will be used if no listeners choose to act upon the event.</p> <p>Any script can implement events/hooks, and it's easy to add \"parameters\" to registering listeners as well, to filter their execution conditonally.</p> <pre><code>-- Set opacity for Battered/Harried stack backgrounds in the health bar based on if the amount if enough to inflict a T3.\nClient.UI.EnemyHealthBar:RegisterHook(\"GetStackOpacity\", function(opacity, stack, amount)\nlocal threshold = Game.Character.GetStacksNeededToInflictTier3(Client.GetCharacter())\nif amount &gt;= threshold then\nopacity = 1\nelseif amount == 0 then\nopacity = 0.5\nelse\nopacity = 0.75\nend\nreturn opacity\nend)\n</code></pre> <p>Hooks are not limited to changing primitives, they are often also used in UI scripts to allow for manipulation of the data that the engine is passing it, parsed into handy tables. The following example adds Critical Chance to the Examine UI.</p> <pre><code>-- Add Critical Chance to the examine menu when its data is being updated.\nClient.UI.Examine:RegisterHook(\"Update\", function(examineData)\nlocal char = Client.UI.Examine.GetCharacter()\n-- Only do this for characters being examined\nif char then\nlocal critEntry = {\nid = 9,\nlabel = \"Critical Chance\",\niconID = Client.UI.Examine.ICONS.CRITICAL_CHANCE,\nvalue = string.format(\"%d%%\", char.Stats.CriticalChance),\ntype = Client.UI.Examine.ENTRY_TYPES.STAT,\n}\n-- Insert crit chance after damage\nlocal damageElement,damageIndex,damageCategory = examineData:GetElement(4, 6)\nexamineData:InsertElement(damageCategory.id, critEntry, damageIndex + 1)\nend\nreturn examineData\nend)\n</code></pre>"},{"location":"docs/#aliases","title":"Aliases","text":"<p>The following EmmyLua aliases are defined (in <code>EpipIdeHelpers.lua</code>):</p> <pre><code>---@alias Entity EclCharacter | EsvCharacter | EclItem | EsvItem\n---@alias Character EsvCharacter | EclCharacter\n---@alias Item EclItem | EsvItem\n---@alias EquipSlot \"Helmet\" | \"Breast\" | \"Leggings\" | \"Weapon\" | \"Shield\" | \"Ring\" | \"Belt\" | \"Boots\" | \"Gloves\" | \"Amulet\" | \"Ring\" | \"Ring2\" | \"Horns\" | \"Overhead\"\n---@alias EquipmentSubType \"Platemail\" | \"Robes\" | \"Leather\" | \"Belt\" | \"Ring\" | \"Amulet\" | \"Shield\" | \"Dagger\" | \"Sword\" | \"Axe\" | \"Mace\" | \"Sword\" | \"Spear\" | \"Staff\" | \"Bow\" | \"Crossbow\" | \"Wand\"\n---@alias StackType \"Battered\" | \"B\" | \"Harried\" | \"H\"\n---@alias Gender \"Male\" | \"Female\"\n---@alias Race \"Human\" | \"Elf\" | \"Dwarf\" | \"Lizard\"\n---@alias Keyword \"ViolentStrike\" | \"VitalityVoid\" | \"Predator\" | \"Elementalist\" | \"Prosperity\" | \"Paucity\" | \"IncarnateChampion\" | \"Defiance\" | \"Occultist\" | \"Disintegrate\" | \"Wither\" | \"Centurion\" | \"Abeyance\" | \"Benevolence\" | \"Presence\" | \"Ward\" | \"Celestial\" | \"Purity\" | \"VolatileArmor\" | \"Voracity\"\n---@alias KeywordBoonType \"Activator\" | \"Mutator\"\n-- For doc generation; does not actually work in IDE\n---@class Event\n---@class Hook\n---------------------------------------------\n-- UI\n---------------------------------------------\n---@alias MessageBoxType \"Message\" | \"Input\"\n---------------------------------------------\n-- GAME.TOOLTIP\n---------------------------------------------\n---@class TooltipData\n---@field Data table[]\n---@param data table[]\n---@return TooltipData\nfunction TooltipData:Create(data) end\n---@param type string\n---@return table\nfunction TooltipData:GetElement(type) end\n---@param type string\n---@return table[]\nfunction TooltipData:GetElements(type) end\n---@param type string\nfunction TooltipData:RemoveElements(type) end\n---@param type string\nfunction TooltipData:RemoveElement(type) end\n---@param ele table\nfunction TooltipData:AppendElement(ele) end\n---@param ele table\n---@param appendAfter table\nfunction TooltipData:AppendElementAfter(ele, appendAfter) end\n</code></pre>"},{"location":"patchnotes/","title":"Patch Notes","text":""},{"location":"patchnotes/#changelog","title":"Changelog","text":"<p>Older versions of the mod can be found here.</p>"},{"location":"patchnotes/#v1065-070523","title":"v1065 - 07/05/23","text":"<p>Requires extender v59+.</p> <p>Standalone usage warning</p> <p>If you have the Improved Hotbar mod, you must disable it to use Epip. All of its functions are already in Epip (+ like 9 months worth of updates that the workshop mod never got). See the front page and the changelog if you're new to Epip.</p> <p>Download here.</p> <p>With this version, EE has been removed as a dependency. It's now possible to use Epip in a non-EE playthrough and the main features will work. There may be quirks that need ironing out, ex. references to features or settings that only make sense in EE - please report these.</p> <p>This also means that the remaining gameplay changes have been removed. If you wish to keep them, use this mod.</p> <p>The following patchnotes are the merged patchnotes of all beta versions of the patch, excluding the April Fools one.</p> <p>By the way, due to logistics changes, you will have to re-enable immersive meditation in the settings, if you had it on.</p> <ul> <li>Animation cancelling now has 2 modes: client-side (v1065 behaviour) and server-side (old behaviour). The server-side option uses the lower delay that was used previously.</li> <li>Changed how hotbar row count and visibility is saved<ul> <li>This might not work in multiplayer due to extender shenanigans</li> </ul> </li> <li>Custom status UI elements are now bigger (ex. in Quick Examine)</li> <li>Added a new rune crafting system; simply right-click a rune material and select the new option in the dropdown menu to get started.</li> <li>Reworked the stats tab; should be less prone to bugging out in multiplayer now<ul> <li>Also fixed the gold &amp; splinter stat</li> </ul> </li> <li>The incompatible mods warnings now show on every load, rather than once per playthrough</li> <li>Updated localizations and added Brazilian Portuguese, translated by Ferocidade</li> <li>Character sheet skew during anniversaries is now less extreme</li> <li>Removed the \"cinematic combat\" option</li> </ul> <p>Fixes:</p> <ul> <li>Fixed some log spam related to status icons</li> <li>Fixed hotbar loadouts not working</li> <li>Non-english languages should no longer have broken artifact descriptions<ul> <li>The cause was fetching the TSKs during module load, which causes a bug that overwrites the string.</li> </ul> </li> <li>Fixed Quick Examine not being openable for the same character twice in a row</li> <li>Fixed vanity dyes not applying to slots that vanilla armor (without transmog) would hide/mask</li> <li>Fixed error if an item was transmogged into a template that no longer existed</li> <li>Fixed a typo in the settings to fix Astrologer's Gaze tooltip</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added <code>ActionReleased</code> event to Input library</li> <li>Added <code>GetIcon()</code> to BatteredHarried library</li> <li>Added <code>GetLevelID()</code> to Entity library</li> <li>Largely decoupled the logic for custom keybinds away from the UI itself (onto InputLib)</li> <li>Added <code>EpicEncounters.DeltaMods</code> library with dynamically-generated data about EE deltamods</li> <li>Added DragDropStateChanged event to Pointer lib</li> <li>Equipped artifacts are now tracked using UserVars instead of tags</li> <li>Generic:<ul> <li>Added <code>RepositionElements()</code> to Grid</li> <li>Added <code>Destroy()</code> to UI instances</li> </ul> </li> <li>Fixes and additions to PlayerInfo methods</li> <li>Moved various functionality from Feature up to its parent class Library (UserVars, ModVars)</li> <li>Fixed some warning spam related to status icons</li> <li>Various new checks to disable EE features when playing vanilla</li> <li>Fixed setting ID conflict issues in the settings menu</li> <li>Various fixes to debug cheats</li> <li>Reworked the doc generation script again; the doc appearance has changed considerably, and now supports hotlinking to functions</li> <li>Added support for multiple inheritance to classes made with the OOP library</li> <li>Generic UIs can be fetched by string ID now (oops)</li> <li>Added <code>Character.Events.ItemEquipped</code></li> <li>Updated the Generic example script and documentation</li> <li>Net payloads now have methods to fetch the associated character and/or item</li> <li>Added <code>Osiris.GetFirstFact()</code></li> <li>Added new calls to CharacterLib: <code>IsOrigin()</code>, <code>IsPlayer()</code></li> <li>Small changes to annotations and rewrites of code that was using deprecated stuff</li> <li>Began work on a new cheats system and UI</li> <li>Added <code>Client.IsCursorOverUI()</code> and <code>Client.GetActiveUI()</code></li> <li>Added <code>Input.IsTextFieldFocused()</code></li> <li>Added skillstate-related methods to CharacterLib</li> <li>Reworked hotbar prepared/casting skill checks to not require server information</li> <li>Added <code>Client.Events.SkillStateChanged</code></li> </ul>"},{"location":"patchnotes/#v1064-050323","title":"v1064 - 05/03/23","text":"<p>Download here.</p> <p>Requires extender v58+.</p> <p>Quick Examine improvements:</p> <ul> <li>Added display for AP, SP, and initiative</li> <li>Added resistances display</li> <li>Added numerous settings: opacity, width/height, hiding certain widgets. You can find them in a new tab in the settings menu</li> <li>Minor graphical touch-ups</li> <li>Added a setting to set the default position of the UI; this position will be used after reloading</li> <li>Added a statuses bar (toggleable)</li> <li>Added a light stroke to the resistances text</li> <li>Added a B/H display, with buffered damage towards the next stack</li> <li>Now shows your ally's skills and their cooldowns<ul> <li>Tooltips will show the damage as if they were used by them, but Epip features (like viewing which source infusions are available) likely do not work properly currently</li> </ul> </li> </ul> <p></p> <ul> <li>Reworked the settings menu and underlying system<ul> <li>Your previous setting values will be lost</li> <li>The settings menu is now separate from the vanilla UI, prevent conflicts with mods that may overwrite the vanilla one</li> <li>Settings have been reorganized into separate tabs</li> <li>Settings are now saved per-profile, in <code>Osiris Data/Epip/{profile GUID}/</code></li> <li>In the settings menu, the current tab's button is now highlighted (replicating vanilla behaviour)</li> <li>Reworked the settings menu to be more easily expandable and changed the appearance of settings<ul> <li>Tabs with a large amount of options (ex. Epic Enemies) might suffer stutters while opening them, similar to Quick Find. This is an issue with the UI framework that will be investigated later.</li> </ul> </li> </ul> </li> </ul> <p></p> <ul> <li>Added a new UI that shows a filtered view of the party inventory<ul> <li>Opened with Ctrl+F by default (configurable in input menu)</li> <li>Can filter equipment by slot, consumables by scrolls/grenades/potions, and skillbooks by school</li> <li>Weapons and armor can be filtered by type (ex. sword, leather armor...)</li> <li>Equipment can be searched by their stat boosts (supports only vanilla modifiers for now)</li> <li>Right-click an equipped item to open the UI with filters set to that item's slot, to quickly replace gear</li> </ul> </li> </ul> <p></p> <ul> <li> <p>Vanity internals have been reworked, with multiple changes as a result:</p> <ul> <li>Dyes no longer require deltamods and thus should no longer be lost to shenanigans or bloat the savefile</li> <li>Transmogrifying no longer requires the item to be transformed and therefore should no longer have any gameplay side effects<ul> <li>As a result, you are no longer prevented from transmogrifying GB5 sets</li> </ul> </li> <li>Transmogrifying weapons into another type (ex. dagger -&gt; bow) will have them show in the proper location while sheathed</li> <li>Added an option to keep the icon while transmogrifying</li> <li>Fixed an issue with dyes not being loaded properly from oufits</li> <li>Added an option to hide any armor slot's visuals<ul> <li>Due to an engine quirk, changing visibility is not properly reflected in the character sheet until you switch characters</li> </ul> </li> <li>Removed support for vanity dyes from before v1063; items still using them will appear purple</li> <li>Added an \"Auras\" tab to Vanity, where you can apply visual effects to your character, onto various bones</li> </ul> </li> <li> <p>Added an option for animation-cancelling for player characters</p> <ul> <li>A new setting exists to blacklist skills from being affected. A more user-friendly way of adding entries will be added in a future version</li> </ul> </li> <li>Added a setting that controls how character level is displayed in the health bar; defaults to current behaviour (below bar, when holding shift). Includes the option to hide the level entirely.</li> <li>Reworked the \"show minimap\" setting; should be more reliable now</li> <li>You can now drag + drop items onto the Greatforge socket</li> <li>\"Status effects\" in the vanilla examine UI is now capitalized, for consistency with the rest of the headers</li> <li>Began removing gameplay changes from original versions of Epip. Since the focus of the mod has changed over to UI and QoL, gameplay changes no longer make sense within the project, and impede it from being used without EE.<ul> <li>Removed changes to Battle Stomp, Bless, Circle of Protection, Escapist, Siphon Poison, Summon Soul Wolf, Wolf Howl, Break the Shackles</li> <li>Removed changes to Elementalist damage</li> <li>Removed changes to Leper</li> <li>Reverted stat changes to Boneshaped Crusher and Soul Wolf</li> <li>Removed Sight and Hearing FlexStat entries</li> </ul> </li> <li>Clicking a status on a player portrait or Quick Examine will now center the camera on the status's source (if any)</li> <li>\"Copy identifier\" keybind no longer copies template GUID</li> <li>Added Russian translation by Cathe &amp; JoienReid<ul> <li>Currently only spans the settings menu and some vanity features</li> <li>Since playing in non-English currently has certain issues with add-ons, a new setting has been added to display text from Epip in a language different than the game's.</li> </ul> </li> <li>Level-up progress in character sheet is now shown with a percentage</li> <li>Added settings for disabling most of the tooltip adjustments Epip offers</li> <li>Surface tooltips should be more reliable</li> <li>Combat log improvements are now enabled by default</li> <li>Enemy health bar now uses a vanilla-ish appearance if EE is disabled (no fancy gargoyle boss frame)</li> <li>B/H indicators in player portraits are now only shown in combat (instead of when unsheathed) and are disabled if EE is disabled</li> <li>Removed the meme loading screen option</li> <li>Skill tooltips for zone-type skills no longer erroneously say their range is increased by Astrologer's Gaze</li> </ul> <p>Fixes:</p> <ul> <li>Fixed icons on the minimap flickering</li> <li>Fixed layouts being saved for summons and party followers</li> <li>Layouts should now be synchronized better in multiplayer, and survive a lua reset</li> <li>Layouts now save when the pause menu is opened, rather than when the game is paused (which basically never happens in multiplayer)<ul> <li>There's probably a dozen other features that made this mistake; they will be fixed in the future</li> </ul> </li> <li>Fixed the \"points available\" blip in the character sheet not being hidden when within vanity, if you had a lot of tabs registered</li> <li>Fixed the draggable area of Quick Examine being smaller than intended</li> <li>Fixed QuickExamine not being draggable all the way to the right of the screen</li> <li>Fixed the \"Epip Settings\" button not appearing on all tabs of the vanilla settings menu</li> <li>Fixed Trickster's Repertoire unsneaking characters that do not have the talent</li> <li>Fixed developer-only settings being visible outside of developer mode</li> <li>Hotbar: fixed hotkeys settings being deleted in some cases</li> <li>Disabled the save/load improvements during game over to fix a softlock (no known workaround)</li> <li>Fixed tooltips of player portraits and XP bar not working properly<ul> <li>Due to engine jank, these will not be affected by the delay settings</li> </ul> </li> <li>Fixed engine actions (attack, flee, etc.) being draggable to hotbar hotkeys</li> <li>Fixed some small visual bugs with the enemy health bar</li> <li>Fixed some small visual issues with custom item slots in UIs</li> <li>Fixed some console log spam</li> <li>Fixed hit chance not displaying when hovering over characters in combat</li> <li>Fixed some items being grayed out in hotbar groups</li> <li>Fixed \"immersive meditation\" and other EE UI features not working for characters that have been transformed</li> <li>Fixed unique items being dismantle-able with \"mass dismantle\"</li> <li>Fixed item context menus being misreported as character menus if you hovered over a character recently<ul> <li>Possibly fixes the issue of options like \"mass dismantle\" not appearing</li> </ul> </li> <li>The \"infinite carry weight setting\" should now work properly for clients that join mid-session<ul> <li>Other features that face problems in multiplayer are possibly suffering from the same bug and will be fixed in the future</li> </ul> </li> <li>Fixed transmogged helmets not being toggleable from the character sheet UI</li> <li>Fixed \"revert appearance\" in vanity not working properly</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added an <code>Image</code> library with PNG decoding</li> <li>Added ImageViewer feature, intended for displaying results of images decoded with <code>Image</code></li> <li>Improved reliability of <code>Client.GetMousePosition()</code> (replaced with Ext implementation)</li> <li>Added a Set data structure</li> <li>Added <code>Vector.ScalarProduct()</code></li> <li>Added a <code>Color</code> element to Generic</li> <li>Added <code>ClearElements()</code> to Generic's Grid</li> <li>Added <code>SetVisible()</code> to Generic elements</li> <li>Added <code>Set</code> and <code>Map</code> settings types</li> <li>Added a debug hotkey for copying the pointer's world position</li> <li>Added a <code>Interfaces</code> library for common interfaces</li> <li>Generic: fixed ScrollList not supporting centering of elements</li> <li>Generic: added LabelledIcon prefab</li> <li>QuickExamine: added Widget interface</li> <li>StatsLib: added data of immunites</li> <li>TooltipLib: added support for status tooltips</li> <li>QuickExamine: split up some parts of BasicInfo into separate widgets</li> <li>Generic: fix downsizing IggyIcon</li> <li>Generic: added a Status prefab, for displaying status effects</li> <li>TooltipLib: added <code>ShowStatusTooltip()</code></li> <li>Moved various functionality from EnemyHealthBar to a feature (EnemyHealthBarExtraInfo)</li> <li>Fixed TextLib's Format() not accepting decimal text sizes</li> <li>Added a setting to simulate EE being disabled (applies to Epip scripts only)</li> <li>Removed checks for Improved Hotbar mod</li> <li>Added an event for statuses being applied to CharacterLib</li> <li>Added a feature to generate Osiris event annotations for lua<ul> <li>The IDE annotations folder in Epip has been updated to include them</li> <li>This might be expanded to support PROCs and QRYs later</li> </ul> </li> <li>Added an OOP library for working with classes<ul> <li>Feature now supports registering and fetching class tables in an elegant manner</li> </ul> </li> <li>Started splitting up Feature into 2 classes to fix interface segregation violation</li> <li>Fixed OsirisLib calls not working with 0 parameters</li> <li>Various script cleanups (mostly for Hotbar and EnemyHealthBar)</li> <li>Added TSKs for older settings</li> <li>Changed TSK integration in Feature: the keys are no longer required to be a handle; they can be any string, letting you index the TranslatedStrings table with auto-completion<ul> <li>TSK objects now have a GetString() method to resolve them</li> <li><code>TSK</code> table within Feature will be deprecated soon</li> </ul> </li> <li>Added a feature to play client-side effects upon hovering over entities</li> <li>Added libraries for EE-related mechanics (BatteredHarried, SourceInfusion), and moved relevant methods to them</li> <li>Fixed <code>Character.GetEquippedItems()</code> not returning the advertised type</li> <li>Added a DatabaseSync feature for synchronizing database contents to the client<ul> <li>Might be merged into the osiris library in the future</li> </ul> </li> <li>Added a UserVars library, with Feature integration</li> <li>Added support for function signatures without bodies to the doc generator, fixed subclasses not being detected properly</li> <li>Added methods related to drag-drop to PointerLib</li> <li>Generic:<ul> <li>Moved annotations to separate file, solving various IDE warnings</li> <li>Added support for tweening</li> </ul> </li> <li>Fixed Stats.MeetsRequirements() not working with attribute requirements</li> <li>Added <code>ShowItemTooltip()</code> to Tooltip lib</li> <li>Generic:<ul> <li>The HotbarSlot prefab is a now more general-purpose inventory-like slot, showing rarity, rune slots, and with options to block drag-and-drop</li> <li>Fixed culling issues with IggyIcon</li> <li>Added support for scrollRects</li> <li>ComboBox events now throw their option ID instead of just index</li> <li>Added SetChildIndex()</li> </ul> </li> <li>Removed swf overrides for <code>textDisplay</code> and <code>notification</code> UIs, as well as cleaned up their respective lua scripts</li> <li>Fixed error messages from using keys the game doesn't support (ex. media keys)</li> <li>Added annotations for basic stats objects</li> <li>Added <code>AMER_Loot_CallistoAnomaly</code> icon - special thanks to Elric</li> <li>Fixed UserVars not synchronizing</li> <li>Fixed <code>GameState.IsLoading()</code> not working</li> <li>Various changes to annotations</li> <li>Features can now declare which game states they should be enabled with, which will cause <code>:IsEnabled()</code> to return <code>false</code> under unsupported states</li> <li>Rewrote <code>Osiris</code> table. Tuples returned from DB queries are now an object and it's possible to distinguish DBs/QRYs with the same name but different arity</li> <li>Rewrote <code>Item.GetEquipmentSubtype()</code> to be a lot more reliable, and fixed it failing to identify clubs</li> <li>Generic: added the Texture element</li> <li>Generic: added more prefabs for \"form elements\", and added inheritance to them</li> <li>Unsubscribing event listeners with an ID that is not subscribed no longer triggers a warning</li> <li>Added IDE annotations for the global Ext functions (like <code>_C()</code>)</li> <li>Added a \"DefaultTable\" data structure (inspired by python's defaultdict; a table with a default value when indexing)</li> <li>Removed UI override for the settings menu (LeaderLib menu might work now? no promises)</li> <li>Debug menu now supports fiddling with the UI scripts to an extent</li> <li>Osiris table now parses parameters for DB set/delete operations</li> <li>InputLib: added methods to fetch game input event definitions and bindings<ul> <li>The ancient script previously used to do this has been removed, along with some other redundant ones</li> </ul> </li> <li>Improvements to the doc generation script (which shall debut here soon); it can now export \"subclasses\" of a class (the auxiliary data structs)</li> <li>Added a generic developer input binding for hooking quick tests onto it</li> <li>TooltipLib: added a way to render custom formatted tooltips</li> <li>TooltipLib: added a method to render skill tooltips, as if the engine were doing it</li> <li>Minor cleanups of some scripts</li> <li>Fixed iggy icons in Slot elements being culled out for Generic UIs</li> <li>Added methods to check if a component is an item/char to EntityLib</li> <li>You can now specify a player index when using methods in PointerLib (though I do not know in which scenario multiple pointers can exist; splitscreen co-op perhaps?)</li> <li>The localization system now supports contextual metadata for ease of translation, and integration for it has been added to the Feature table<ul> <li>You can define TSKs in <code>TranslatedStrings</code> and query them by indexing <code>TSK</code> within the feature</li> <li>TSKs defined this way support aliases that are valid only within the context of the feature, preventing collisions</li> </ul> </li> <li>Added a python script to import/export Epip translation files in <code>Mods\\EpipEncounters_7d32cb52-1cfd-4526-9b84-db4867bf9356\\Story\\RawFiles\\Python\\localization.py</code></li> <li>Added <code>GetTurnOrder()</code> to Combat library</li> <li>Added <code>Client.WorldPositionToScreen()</code></li> </ul> <p>Improvements to doc generator script:</p> <ul> <li>Added support for net messages</li> <li>Better support for hooks/events</li> <li>Private methods are now hidden</li> <li>Symbols are now sorted by context (first Shared, then Client, then Server)</li> <li>Can now be used externally (importable)</li> <li>Added support for overloads</li> </ul>"},{"location":"patchnotes/#v1063-190922","title":"v1063 - 19/09/22","text":"<ul> <li>If \"Unfocus after sending messages\" is enabled, holding shift while sending a chat message will keep the chat focused</li> <li>Fixed settings not saving if you didn't visit the camera settings tab</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added operator overload annotations for <code>RGBColor</code>, <code>Vector</code></li> <li><code>Vector.Create()</code> accepts an existing array as a parameter (only one)</li> <li>Added TSK-related methods to <code>Text</code><ul> <li>This includes a localization system for strings in scripts; you can generate templates for localizing with <code>Text.GenerateLocalizationTemplate()</code> and they will be loaded from <code>Mods/MyMod_MyGuid/Localization/Epip/MyTargetLanguage/ModTable.json</code>, where <code>ModTable</code> is the mod table whose strings you've localized using the template<ul> <li>Support for this within Epip will be added throughout future updates; currently only some camera settings support this</li> </ul> </li> <li>You can generate fresh GUIDs or TSK handles with <code>!guid</code> and <code>!tskhandle</code> commands (on client context); they'll be copied to the clipboard</li> </ul> </li> </ul>"},{"location":"patchnotes/#v1062-160922","title":"v1062 - 16/09/22","text":"<ul> <li>Surface tooltips with an owner now show a hint regarding how the damage scales</li> <li>\"Active Defense\" statuses (ex. Empyrean Tears) now show remaining charges</li> <li>EE rune materials now show how to use them to craft runes</li> <li>Added a setting to configure the delay of simple tooltips appearing<ul> <li>This affects tooltips of items in the world, as well as label tooltips in UIs (these 2 types are individually configurable)</li> </ul> </li> <li>Added a settings tab for camera settings<ul> <li>You can change the maximum zoom out distance, as well as the view angles</li> </ul> </li> <li>Items in the quest reward screen now show a hint regarding modifier generation</li> <li>Added new Greatforge graphics for Engrave - special thanks to Cathe and Elric!</li> <li>Fixed a vanilla bug with the character sheet that caused the second ring slot to not play equip animations<ul> <li>Additionally, the graphics involved should now be better centered</li> </ul> </li> <li>Re-added the option to auto-unlock inventories<ul> <li>Changing the lock status should also be synched better now - the vanilla game seems to struggle with this leading to the changes often not being properly reflected in other player's UIs</li> </ul> </li> <li>Fixed weapon range deltamods only considering the first deltamod of that kind found<ul> <li>This same fix is applied for weapon elemental damage mods as well</li> </ul> </li> </ul> <p>On the technical side of things:</p> <ul> <li>Replaced <code>Client.GetCharacter()</code> implementation with a new one from v57 that doesn't rely on any UIs. Let me know if something character-involved breaks as a result (though I haven't experienced any difference).</li> <li>Added a Camera library</li> <li>Added an Entity library, with shorthands for GetGameObject() and functions to get all characters/items on a level</li> <li>Added limited alpha support to RGBColor (I don't think alpha is used anywhere in scripting though)</li> <li><code>Item.GetIcon()</code> is now fully reimplemented following engine code</li> <li>Stats library now also holds dynamically generated data of runes, except framed ones</li> <li>Tooltip library now supports item tooltips and simple tooltips (the usual <code>showTooltip</code> call), and offers additional contextual data (ex. skill ID for skill tooltips)</li> <li>Started work on a new UI-independent settings library with per-profile settings support; not yet used</li> </ul>"},{"location":"patchnotes/#v1061-40922","title":"v1061 - 4/09/22","text":"<ul> <li> <p>Added new settings for world item tooltips:</p> <ul> <li>Emphasizing containers, consumables and/or equipment by changing their color<ul> <li>This setting will not work for items that would result in a crime upon interaction; they will remain red.</li> </ul> </li> <li>Enabling world tooltips for all items (similar to the \"Let there be tooltips\" mod)</li> <li>Filtering out clutter (particularly the one added by the setting above): chairs, doors, non-interactable items</li> <li>Option to open containers upon clicking their tooltip, rather than picking them up</li> </ul> </li> <li> <p>Added an option to exit the chat UI after sending a message (so you don't need to press escape manually)</p> </li> <li>Added an option to disable notifications for sharing civils (\"X shares Loremaster/LC with Z\")</li> <li>Searching saves is now case-insensitive</li> <li> <p>Added a ping counter to the debug display</p> <ul> <li>Since the server only responds to net messages once per game tick, the counter will basically always show around 33ms in singleplayer</li> </ul> </li> <li> <p>Fixed \"Show empty containers/bodies\" not actually working on items</p> </li> <li>Fixed another case of an infinite loop of switching characters</li> <li>Fixed the \"toggle world tooltips\" keybind not working (+ crashing the game)</li> <li>Fixed some character sheet tooltips appearing in the vanity UI</li> </ul> <p>On the technical side of things:</p> <ul> <li>Osiris library now converts boolean values to integer in calls</li> <li>Added <code>HasFlag()</code>, <code>IsContainer()</code> to Item library</li> <li>Added initial groundwork for an inventory expansion</li> </ul>"},{"location":"patchnotes/#v1060-30922","title":"v1060 - 3/09/22","text":"<ul> <li>Added a better frame for the hotbar health bar, and shadows for the AP bar (thanks Elric)</li> <li>Added a keybind to bring up the examine UI (the real one)</li> <li>Added all engine actions (the ones you see in the controller UI) to the hotbar actions drawer (the vanilla one, bound to <code>X</code>), except for flee</li> <li>Reordered some keybindings</li> <li>Added \"Let there be tooltips\" to the list of EE-incompatible mods</li> <li>Fixed character-specific context menus appearing on items</li> <li>Fixed the save/load overlay not disappearing in multiplayer when the UI is closed</li> <li>Fixed a possible edge case with walking over corpses in combat that would result in the corpse not being lootable after combat</li> <li>Fixed the dragging area for the debug display being too large</li> <li>Fixed an issue with character control switching rapidly</li> <li>Fixed hotbar tooltips not showing keybinds</li> <li>Removed the \"Special Binding 1 &amp; 2\" keys since they are no longer used</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added data for all InputEvents to <code>Input</code> as well as possibly the world's biggest alias</li> <li>Added an <code>IO</code> table</li> <li>Began modernizing the context menu APIs</li> <li>Added a Pointer library, currently deals only with <code>Ext.UI.GetPickingState()</code>-related matters</li> <li>Added <code>table.lua</code> and <code>math.lua</code> containing the extensions to the respective built-in tables</li> <li>RGBColor creation now clamps the color values</li> <li>Implemented __eq, __add and __sub for RGBColor</li> <li>Various fixes for outdated/clashing IDE class names</li> <li>Fixed an infinite loop when using the default buttons for <code>MessageBox</code></li> <li>Added a table for <code>combatTurn</code> UI<ul> <li>Unfortunately this UI does not appear to hold any character handles, making it not very useful.</li> </ul> </li> </ul>"},{"location":"patchnotes/#v1059-290822","title":"v1059 - 29/08/22","text":"<ul> <li>Fixed an issue with using items in hotbar groups after reloading</li> <li>Fixed item amounts displaying incorrectly in hotbar groups</li> <li>Fixed an issue with the unlearn skills prompt appearing while the UI is closed</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added \"Actions\" (ground attack, sheathe/unsheathe, etc.) to the Stats library</li> </ul>"},{"location":"patchnotes/#v1058-290822","title":"v1058 - 29/08/22","text":"<p>Versions from this one onwards require extender v57.</p> <p>New features:</p> <ul> <li>Consumables like food and mushrooms now show their effects by default; there's no need to eat them once for them to appear in the tooltip</li> <li>Added a setting to enable infinite carry weight</li> <li>You can now right-click skills in the skillbook while out of combat to unlearn them</li> <li>Added a keybind to toggle world item tooltips (so you don't need to hold the alt key)</li> <li>Surface tooltips now show their owner (who the surface damage scales from and who owns its applied statuses)</li> <li>Added a setting to disable the \"Item Received\" notifications</li> <li>Added a setting to allow viewing the character sheet while in the quest rewards UI; this lets you compare your equipped items with the rewards.</li> <li>Vanity: transmog and dyes no longer require items to be re-equipped, making it overall faster to try on different looks</li> <li>Added an option to hide empty corpses/containers from the world item tooltips (the ones that appear from the alt key)</li> <li>Added a setting to allow you to walk onto corpses while in combat without looting them. You may still loot them while holding shift. This setting is enabled by default.</li> <li>The fix to character control being lost upon creating new summons now also applies to having your summons be killed</li> <li>Added an option to play a sound effect when a chat message is received, so they're easier to notice</li> <li>Empowering items now properly scales their armor values, but this will only take effect after a reload</li> <li>Fixed the vanilla bug that prevented you from using items in certain conditions if you had +AP Cost effects </li> <li>Added a keybind to scroll the fancy item/skill tooltips</li> <li>ACTIVE_DEFENSE statuses (ex. Empyrean Tears) now show max charges in the tooltip</li> <li>Holding shift while moving in combat now shows approximate decimal AP costs</li> <li>Status tooltips now show if they were applied by an equipped item</li> <li>Fixed the tooltip color for effects that alter AP costs. They now display in green if they reduce AP costs, and red if they increase them.</li> <li>The custom input menu has been reworked to use new extender tech; all keys supported by the game are now bindable, including modifier keys like alt/ctrl. Your previous bindings will be wiped upon updating.</li> <li>Added new modifier keys to cycle bars on the hotbar: ctrl cycles 3rd bar (from bottom), alt cycles 4th one, gui (Windows key) cycles 5th one</li> <li>Added an \"Engrave\" option to the Greatforge which lets you rename items. This is purely visual.<ul> <li>It does not currently have a custom graphic. It will appear as another \"Drill Sockets\" in the Greatforge wheel.</li> </ul> </li> <li>Minor visual adjustments to QuickExamine</li> <li>The Epip settings menu is slightly more organized now</li> <li>Added more mods to the incompatible mods warning: DU, Greed, Multihotbars</li> </ul> <p>Hotbar:</p> <ul> <li>Slots can no longer be used while holding modifier keys. This means you can use shift/ctrl/alt + number keys as a custom keybind without it interfering with the hotbar.</li> <li>Fixed loadouts not saving empty gaps inbetween slots</li> <li>You can't cycle hidden bars anymore</li> <li>Added custom slot groups. Right-click a row on the hotbar to create one. These are shared across all your characters. Right-click them to delete them. Known issues:<ul> <li>Items there do not display tooltips yet</li> </ul> </li> </ul> <p>Fixes:</p> <ul> <li>Fixed tooltips for Vanity tabs</li> <li>Fixed negative status effects displaying wrong ever since GB5</li> <li>Epip's artifact tooltips (in Quick Examine, stats tab, etc.) now have a period at the end of them</li> <li>Hotkey to exit Meditate is now escape, instead of escape / right-click.</li> <li>Fixed action names on the hotbar buttons</li> <li>Fixed some character sheet tooltips appearing while in the Vanity menu</li> </ul> <p>Stuff for developer mode:</p> <ul> <li>Added a keybind to copy identifiers (GUID for chars/items, stat ID for skills) of the object over your mouse</li> <li>Added a settings menu to change Data.txt values ingame. Most of them apply instantly / upon character stat recalculation, but some may require a session reload.</li> <li>Talents show their IDs in tooltips</li> <li>The cheats context menu now lets you add talents</li> <li>Added an option to enable a widget that shows FPS, TPS, and relevant mod versions</li> <li>Added a keybind to open a debug menu from which you can toggle debug mode on features, disable them (or their logging), and run tests (a new feature of the Feature table)</li> </ul> <p>On the technical side of things:</p> <ul> <li>Osiris library now supports built-in symbols (calls and queries) and extender objects are converted to their GUID when being passed</li> <li>Added a Vector library (with some cool arithmetic operator overloads)</li> <li>Added a new tooltip library (WIP), advantage include preventing tooltips and manipulating surface tooltips, viewing source UI of a tooltip</li> <li>SubscribableEvent nodes can now be removed based on a predicate function, and preventable events are supported</li> <li>Fixed some log spam related to the hotbar</li> <li>Added groundwork for the Epip Housing(TM) feature</li> <li>Slight modernization to Net library: the payload is now passed as the first parameter, and IDE hints are available by defining the net msg as a class with the payload's table fields</li> <li>Timer lib is now available on the server, and a tick-based timer option has been added, as well as option to repeat / pause them</li> <li>Added a better coroutine table with sleeping (either for X seconds, or until a condition is met)</li> <li>Added a new Epip.RegisterFeature() call which can keep track of the source mod of a feature</li> <li>Added a new Input library using v57 RawInput</li> <li>Added more hooks to CharacterSheet UI in preparations for custom talents 2.0 (and other stats)</li> <li>Added ExtraData tables to Stats library</li> <li>Added PartyInventory hooks</li> <li>Removed numerous archaic/unused scripts, like the custom talents ones</li> <li>GenericUI:<ul> <li>Added more bg options for TiledBackground</li> <li>Added new elements: Slider, Grid</li> <li>Events now have proper IDE support, and no more issues with inheritance</li> <li>Element creation now has proper IDE support, if you instantiate elements using their class name</li> <li>Added more position-related calls</li> <li>Element visuals now use string IDs, and unused visuals are set off-stage (less possibility for jank)</li> <li>Fixed button size issues</li> <li>Removed minimum size for black background</li> <li>Fixed stack overflow issue with lists</li> <li>Added support for skill tooltips</li> <li>Fixed issues with MouseUp on the slot element</li> <li>Changed mouse events to use the roll ones</li> <li>Added proper support for prefabs, with the following implemented:<ul> <li>Spinner</li> <li>Text (offers simpler initialization of Text elements)</li> <li>HotbarSlot (with many improvements to bring it closer to hotbar behavior)</li> <li>FormHorizontalList</li> <li>LabelledCheckbox</li> <li>LabelledDropdown</li> <li>LabelledTextField</li> </ul> </li> </ul> </li> </ul>"},{"location":"patchnotes/#v1057-260722","title":"v1057 - 26/07/22","text":"<ul> <li>Fixed the annoying issue of control being switched to new summons in combat while it's still your turn</li> <li>Crafting UI now remembers your last tab (equipment/consumables etc.)</li> <li>Added a setting to set the default tab for the crafting UI</li> <li>The hotbar now shows a warning for unmemorized skills, as well as skills from items that have been unequipped</li> <li>Fixed some changelogs ingame not showing up</li> <li>Added an option to enable some improvements to the save/load menu: alphabetical sorting and search. The search bar supports lua patterns and is case-sensitive</li> </ul> <p>On the technical side of things:</p> <ul> <li>The hotbar updates periodically again to fix some issues, and should no longer break completely when a single slot/action fails to render</li> </ul>"},{"location":"patchnotes/#v1056-220722","title":"v1056 - 22/07/22","text":"<ul> <li>Stats Tab:<ul> <li>Added Voracity stats</li> <li>Added Artifacts</li> </ul> </li> <li>Quick Examine now shows Artifacts for your allies as well (useful in multiplayer)</li> <li>Vanity: added support for \"Visitors from Cyseal\" mod, though the mod currently appears to have some issue with replacing some item icons</li> <li>Fixed a freeze with Immersive Meditation</li> <li>Fixed another grey out issue with the hotbar (skills with weapon damage but no weapon requirement)</li> <li>Fixed the category weight sliders in Epic Enemies not being saved</li> <li>Fixed the \"Show Minimap\" option appearing twice in the options menu</li> <li>Fixed some issues with controllers</li> <li>Skills show their IDs in tooltips in developer mode</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added <code>StopPropagation()</code> to the new event table</li> <li>Added a wrapper for checking developer mode, with an option to use an additional check; WIP and testing features will be locked behind it, meaning the rest of the features (like the cheats menu) can be used without problems</li> <li>Added a few new utility methods</li> <li>Started work on further giga brain hotbar improvements</li> </ul>"},{"location":"patchnotes/#v1055-200722","title":"v1055 - 20/07/22","text":"<ul> <li>Added an option to reduce the opacity of the player status bars while in combat</li> <li>Vanity UI now closes when you go into combat</li> <li>Status tooltips now show source (if it's a character)</li> <li>Re-added the hotbar actions drawer (the one with force-attack / sheathe / sneak)</li> <li>Added a Vanity action to the hotbar</li> <li>Added new Combat Log filters: critical hits and dodge</li> <li>Status tooltips now show ID and Type while in developer mode</li> <li>Added embodiments to the stats tab</li> <li>Read books and used keys now show a label in their tooltip (not retroactive)</li> <li>Fixed Max SP check being inaccurate on the enemy health bar</li> <li>Added new divider sprites for the player health bar</li> <li>Player health bar now shows maximum SP, and the SP counters are centered</li> <li>Fix item use cost not being considered while greying out slots on the hotbar</li> <li>Fixed consumable items not greying out properly in the hotbar</li> <li>Fixed hotbar issues with Luminary, Musketeer mods</li> <li>Temorarily removed the option to auto-unlock party inventories due to crashes in v56 from sync rewrites</li> </ul> <p>On the technical side of things:</p> <ul> <li>Removed more log spam from Hotbar/Input</li> <li>Moved a bunch of tables around, removed archaic scripts/global functions</li> <li>Added some Larian colors to the <code>Color</code> table</li> <li>Added an icons enum to <code>Hotbar</code></li> <li>More work on the new UI system: event listeners, Slot element</li> <li>Added <code>GetExtType()</code> for checking the type of an extender object</li> <li>Added <code>GameState</code> table</li> <li>Started transitioning to using a better event system, using a modification of the v56 SubscribableEvent table</li> <li>Updated IDE helper files</li> </ul>"},{"location":"patchnotes/#v1054-130722","title":"v1054 - 13/07/22","text":"<ul> <li> <p>Added a \"Quick Examine\" UI. Currently it only shows the Epic Enemies perks characters that have them. It is invoked by a keybind while hovering over a character; default is <code>v</code>.</p> <ul> <li>You may use the lock button to prevent its selected character from changing whenever you hover over a new one; if you do that, you will need to press the keybinding manually to change targets.</li> <li>You can drag the UI around by holding down left click on the upper part (the one with the character name) </li> </ul> </li> <li> <p>Artifact powers in Epic Enemies now have descriptions</p> </li> <li>Hotbar now greys out unusable item skills (ex. arrows)</li> <li>Switching characters or clicking slots on the hotbar now attempts to fix desync issues (the one where your clicks go to the wrong rows)</li> <li>Fixed a freeze when using a controller</li> <li>Temporarily removed the Awesome Soccer minigame</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added a new lua-based UI system; currently supports backgrounds, text, buttons, state buttons, the common list types (vertical, horizontal, scrolling), dividers, and icons</li> </ul>"},{"location":"patchnotes/#v1053-070722","title":"v1053 - 07/07/22","text":"<ul> <li>Added an option to show aggro effects on the top health bar: taunt source/target as well as AI preference tags</li> <li>Centered the AP orbs on the bottom health bar, and added special dividers every 4 AP</li> <li>Pipmode no longer gives infinite AP to non-player characters</li> <li>Added a cheat to apply statuses</li> <li>Reworded +elemental damage tooltips on weapons</li> <li>Fixed offhand items not auto-transmogging properly</li> <li>Fixed some summons still getting Epic Enemies perks, as well as party followers</li> <li>Fixed skills that require shield not being greyed out while muted</li> </ul> <p>Hotbar:</p> <ul> <li>Loadouts are now sorted alphabetically</li> <li>Added a setting for disabling slots while casting</li> <li>Fixed occasional flashing for slots on cooldown</li> <li>Fixed hotkeys being blocked if any controlled char is in dialogue</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added better annotations for UI/Feature tables (works with inheritance now)</li> <li>Added wrapper calls to get/set stats regardless of whether they're actual stat objects or the special types (DeltaMod, TreasureTable, etc.)</li> <li>Moved <code>RemoveTrailingZeros()</code> to <code>Text</code></li> <li>Reduced some extender log spam from stats</li> <li>Fixed warning spam when enemies were preparing skills</li> </ul>"},{"location":"patchnotes/#v1052-050722","title":"v1052 - 05/07/22","text":"<p>Epic Enemies:</p> <ul> <li>Reworked the Epic Enemies feature. It is now configured through the regular settings menu, not the EE one. If you're continuing an old save, the options in your EE menu will remain, but they will no longer do anything.<ul> <li>The amount of effects enemies gain is now customizable</li> <li>The weighted chance of each perk appearing can be customized individually - it's also possible to adjust the chances for whole groups of effects at once (ex. all Centurion effects)</li> <li>All artifacts can now be made available to enemies</li> <li>Effects with conditional activations are supported, and can grant a variety of other perks (statuses, stats, summons, etc.) though there are no new effects that use this yet - new content will be added soon</li> </ul> </li> </ul> <p>Hotbar:</p> <ul> <li>The \"active skill\" animation on the hotbar should be more reliable now (and no longer appears if you click spells in the spellbook)</li> <li>Fixed shield skills not greying out when disarmed</li> </ul> <p>On the technical side of things:</p> <ul> <li>Removed the infamous empty net script</li> <li>Cleaned up script loading on the server</li> <li>Generated new IDE helpers for built-in v56 types</li> <li>OptionsSettings UI now has less thicc text labels so you can actually write stuff there without taking up the whole screen</li> </ul> <p>Known issues:</p> <ul> <li>Artifact effects in Epic Enemies have no descriptions (text keys are really unreliable apparently)</li> <li>Switching tabs in the Epic Enemies settings menu scrolls you to the top</li> <li>Epic Enemies no longer gives extra Predator range</li> </ul>"},{"location":"patchnotes/#v1051-280622","title":"v1051 - 28/06/22","text":"<p>Small bug fixes, and a moderate QoL addition for vanity dyes.</p> <ul> <li>Added Ctrl+C/V support to the dye tab text fields</li> <li>Fixed Epic Enemies tooltip (thanks Pancarte)</li> <li>Fixed outfits ignoring transmog restrictions</li> <li>Fixed vanity dye slider text values sometimes not moving around</li> <li>Fixed items transmogged into artifacts gaining the special tooltip color (this will require an EE Core update to fully work)</li> </ul> <p>On the technical side of things:</p> <ul> <li>Cleaned up <code>MessageBox</code></li> </ul>"},{"location":"patchnotes/#v1050-260622","title":"v1050 - 26/06/22","text":"<p>A small assortment of huge vanity improvements!</p> <p>Vanity:</p> <ul> <li>Added a button to delete custom dyes</li> <li>Switching characters no longer closes the UI</li> <li>The current tab is remembered when switching items through the context menu</li> <li>Added a toggle to prevent the sliders from being set to the item's current color (makes it easier to reuse a dye on multiple items)</li> <li>Added fields to enter colors in hexadecimal</li> <li>Added buttons to copy/paste colors</li> <li>Added buttons to import/export dyes to/from the clipboard</li> <li>Sliders can now detect the default color of an item that hasn't been dyed before</li> <li>Added a checkbox to auto-transmog equipped items to your old item's appearance while the UI is not open (so you can switch out items in the UI without needing to toggle it off)</li> <li>Fixed the Vanity option appearing on non-equipped items</li> </ul> <p>Other:</p> <ul> <li>Added keybinds for the debug teleport (no longer uses the ping key)</li> <li>Custom keybinds no longer fire while in dialogue</li> </ul> <p>On the technical side of things:</p> <ul> <li>Added support for dev-only keybinds</li> <li>Moved <code>Flash</code> table to <code>Client</code></li> <li>Added a <code>Color</code> table</li> <li>Created a github repository: https://github.com/PinewoodPip/EpipEncounters/commits/main</li> </ul>"},{"location":"patchnotes/#v1049-230622","title":"v1049 - 23/06/22","text":"<ul> <li>Added an option to enable improvements to the combat log. Messages can be filtered by type, and certain messages will be merged into one line if they occur one after another, such as surface damage and healing. This option will only work when playing in english, unless someone is willing to help me make string patterns for other languages.<ul> <li>Right-click the combat log to set your filters. You can also clear the log from that menu.</li> <li>When damage messages are merged into one line, they will display the amount of hits that were merged at the end. The exception to this is damage that occurs within 25ms of eachother, such as weapon attacks with coatings. These are counted as a single hit.</li> <li>Messages parsed by the new combat log system will now have a consistent base color, gray, instead of randomly using white.</li> <li>Some messages have been slightly reworded for consistency</li> </ul> </li> <li>Added options in the cheat menu to add/remove tags. You can use this to clear a character's main character status by removing the <code>AVATAR</code> tag.</li> <li>Added a button in the debug sections of the options menu to warp to AMER_Test</li> <li>AMER_Test got Pinewood'd a bit</li> <li>Weapon tooltips now show +elemental damage modifiers</li> <li>Updated Derpy's treasure table displays</li> <li>Removed the option to disable custom context menus</li> <li>Fixed keyword source tooltips being off-by-one</li> <li>Hotbar action button tooltips now show their keybind (without shortening)</li> <li>Removed the automatic unbinding for GM keybinds, since they are no longer used for the hotbar</li> <li>Added chat commands:<ul> <li>/rp displays a message over your character's head</li> <li>/emote performs an animation</li> <li>/help lists help for all commands</li> </ul> </li> <li>Added a new tab in the controls menu where you can bind hotbar action hotkeys as well as standalone hotkeys for Meditate and Source Infuse. You must rebind your hotbar hotkeys</li> <li>Two keybinds previously used by the hotbar are now reserved as special keys that can be bound in the new custom keybinds UI. The purpose of them is to allow extra mouse buttons and other special bindings to be used with the new system until it is improved.</li> <li>Fixed numerous problems while playing with controllers</li> <li>Added a setting to make the Escape key close the Amer UIs entirely rather than popping page</li> <li>Fixed a hotbar refresh issue when pushing slots around</li> <li>Fixed hotbar action buttons no longer properly showing active/inactive state</li> <li>Removed the option to disable wrapping statuses (it has not actually worked for a long time) as well as the vanity menu</li> </ul> <p>Vanity:</p> <ul> <li>Added custom RGB dyes to the dyes tab</li> <li>Added all built-in ItemColor entries as selectable dyes</li> <li>Saving now also happens when you add/delete an outfit or a dye</li> <li>You can no longer transmog GB5 items</li> <li>Fixed spears not being available in the transmog menu</li> <li>Fixed the vanity option not appearing for non-shield offhands</li> <li>Added a button to delete outfits</li> <li>Fixed positioning of the vanity UI while playing on resolutions other than 1080p, or when dragging the character sheet</li> <li>Fixed saving outfits with weapons not working</li> <li>Removed the dye context menu for real</li> <li>The UI now shows a message if you select an empty slot, instead of opening a message box</li> <li>Slight changes to positioning of elements</li> <li>Improved performance</li> <li>The character sheet unallocated points notifications are now hidden while in the UI</li> </ul> <p>Other:</p> <ul> <li>Fixed a bug with hotbar action buttons resetting</li> <li>Added a \"Healing done\" stat to the stats tab</li> <li>The \"Damage dealt\" stat now also considers your owned summons</li> </ul> <p>On the technical side of things:</p> <ul> <li>Reworked how the selected item is tracked in the Vanity UI</li> <li>Reworked all tabs of Vanity to be separate, independent features</li> <li>Added initial groundwork for supporting controllers in Amer's UIs</li> <li>Added APIs for <code>chatLog</code>, <code>optionsInput</code></li> <li><code>_Feature:DebugLog()</code> is now polymorphic like the regular print function</li> <li>Added the <code>Input</code> UI, with possibilities for tracking text keys from the keyboard, and intercepting interface events</li> <li>Added FlexStats for sight and hearing, ranging from -128 to +128 (except for sight which goes to +2048)</li> <li>Added support for saving settings on the server</li> <li>Removed unused ItemColor stats</li> <li>Removed unused PersistentVars table</li> <li>Hooks can now be set to only return the first non-nil value (and stop propagation after that)</li> <li>Cleaned up the client bootstrap script</li> <li>Added an !animtest command on server, auto-playing all female human animations on the host character. There's no stopping it once started, so be careful!</li> <li>Added a !soundtest command on the client, which tests all UI sounds. Might've been added before this version, I don't recall exactly when it was implemented.</li> <li>Added some sick ASCII signatures to the bootstrap scripts, as well as a readme</li> </ul>"},{"location":"patchnotes/#v1048-140522","title":"v1048 - 14/05/22","text":"<ul> <li>Added a warning upon loading a save with mods known to be problematic</li> <li>Graying out hotbar slots while casting skills should now work similarly to before</li> <li>Added Derpy's scripted encounters to the Treasure Table Display</li> <li>Added an option to disable area transition labels or change their duration. It now also hides immediately if you hover over a character/item to bring up its healthbar</li> <li>Possibly fixed a significant stuttering issue with the hotbar</li> <li>Added a button to revert a transmog'd item's appearance (not retroactive; will only work on newly transmogged items)</li> <li>Changing tabs in the Vanity UI now plays a sound</li> <li>Rounded the numbers in the Treasure Table Display</li> <li>Added a dyes tab to the vanity menu<ul> <li>RGB sliders are not finished yet (you can use them in developer mode, but they will not be saved)</li> </ul> </li> </ul> <p>On the technical side:</p> <ul> <li>Fixed a net error message upon loading into the main menu</li> <li>Fixed a startup error related to the Osiris table</li> <li>Added UIObject flag helper methods to the UI table (though Norbyte confirmed these will be usable like other enums in the future)</li> <li>Added ways to set and delete tuples to the Osiris table with :Set() and :Delete(); :Get() queries the DB (previous usage still works).</li> <li>Osiris table's DB queries now return the list of tuples as the last return value, always</li> <li>Added a separate UI for querying time from flash</li> <li>Fixed time functions not accounting for daylight savings (iggy oversight)</li> <li>Added annotations for the _Feature table/class</li> <li>Added a <code>Text</code> library with a handy format function</li> <li>Improvements to events and hooks: libraries can now hold their events and hooks as tables in <code>Event</code> and <code>Hooks</code> fields respectively, from which you can easily see all listener types available and register listeners. Doing it this way enables auto-completion and intellisense/EmmyLua annotations for listener parameters, which was not possible before. Old libraries will slowly be updated to use this, and the old method of registering listeners will stay.</li> </ul> <p>The standalone hotbar mod will be updated tomorrow (15th May).</p>"},{"location":"patchnotes/#v1047-200422","title":"v1047 - 20/04/22","text":"<ul> <li>Added an option to show artifact/protean chances on enemy health bars when the \"Show Sneak Cones\" (shift by default) key is held. Also works on containers, without needing the key to be held. </li> <li>Fixed an issue with some setup event being unreliable (likely the source of many hotbar problems)</li> <li>Fixed some events being fired once per user</li> <li>Fixed equip animations in the character sheet</li> <li>Client timers are now truly client-side<ul> <li>As a result hotkey'd skills on the hotbar should now have a lot less delay</li> </ul> </li> <li>Fixed hotbar not being greyed out for dead characters</li> <li>Fixed \"None\"-type weapons not being considered melee, causing incarnate bull rush to appear grayed out in the hotbar</li> <li>Fixed another large performance issue with the stats tab</li> </ul>"},{"location":"patchnotes/#v1046-140422","title":"v1046 - 14/04/22","text":"<ul> <li>Added a new journal UI, replaces the quest log for changelogs. Access it from the hotbar</li> <li>Fixed Inconspicuous not being hidden in character creation</li> <li>Hotbar config (hotkeys) now also saves when you save the game, not just when the game is paused</li> <li>Incompatible giftbags can no longer be enabled (you should still be able to disable them, if you had them)</li> <li>Added a way to mark templates as favorites in the vanity UI, moving them to a special category</li> <li>Vanity UI now shows categories in a consistent order</li> <li>Small change to stats tab to make stats editable post-SessionLoaded</li> <li>Character sheet now goes below the hotbar again</li> <li>Increased the hotbar's \"refresh rate\", fixing an issue with slots being clickable when they shouldn't</li> <li>Fixed the hotbar drawer locking up your scroll wheel</li> <li>Renamed the transmog context menu option to \"Vanity\", made it only usable on equipped items</li> <li>Added support for Rendal's NPC Armors to the vanity UI</li> <li>Reduced logging when developer mode is off</li> <li>You can no longer open the vanity menu while in combat</li> <li>Your currently equipped template in the vanity menu is now indicated by an icon instead of a suffix</li> <li>Fixed Immersive Meditation ignoring the setting</li> <li>Fixed a performance issue with the stats tab</li> </ul>"},{"location":"patchnotes/#v1045-1422-anniversary-patch-flashed","title":"v1045 - 1/4/22 Anniversary patch :flashed:","text":"<p>As of today, Epip is now one year old! My attention span for projects tends to be very low (as evidenced by my other EE stuff), but Epip looks to be an exception to that and it's incredible what it has become - all its UI changes were nearly unimaginable just a year ago. Thank you all for the support throughout the months, even at times when the patches were a buggy mess.</p> <p>Just like the initial release of the mod on April 1st, this anniversary patch is very real, and best experienced on this day of the month.</p> <p>Changelog:</p> <ul> <li>Pressing escape while in the EE UIs now backs out of them rather than bring up the pause menu</li> <li>The stats tab now shows damage dealt and received in the current fight (or previous fight, when out of combat)</li> <li>Added a new bug to the character sheet</li> <li>Performance improvements to the hotbar</li> <li>Gold/Splinter counter in the stats tab should now be more reliable</li> <li>Minor technical changes to make the mod compatible with Descent</li> <li>Added a scrollbar to the hotbar buttons drawer</li> <li>The hotbar now goes below the inventory and character sheet</li> <li>Hotbar cooldown animations should now be smoother</li> <li>Fixed bugs with unbinding actions in the hotbar, as well as clearing unmemorized slots</li> <li>Fixed muted characters not having their slots greyed out in hotbar</li> <li>You can now activate your Epip Encounters license ingame from the options menu</li> <li>Tooltips can now be scrolled on one axis with the mouse wheel</li> <li>The punisher now drops MicroBoss\u2122 loot to make him feel more optional</li> <li>Added a cinematic camera option, on by default</li> <li>Reworked the vanity feature: it now opens a custom tab in your character sheet. Browsing templates is a lot more convenient this way. Saved outfits are now categorized by race &amp; gender (doesn't stop you from applying them to anyone though)<ul> <li>It wouldn't be an Epip patch if something didn't ship unfinished, which is why I must announce that the promised feature to mark templates as favorite did not make it in.</li> </ul> </li> </ul> <p></p> <p>On the technical side of things:</p> <ul> <li>Added an alias for the <code>Ext</code> table to make it easier to type: <pre><code>SEX = Ext -- Short for \"Script EXtender\"\nSEX.Print(\"Welcome to Norbyte's SEX v56 !\")\n</code></pre></li> <li>Fixed more inconsistencies with copy/paste in the message boxes</li> <li>Added an option to log AI scoring to the console: the top 3 actions will be shown anytime decisions are made. Work-in-progress as some of the AI features in the extender are currently bugged.</li> </ul> <p></p> <ul> <li>Tooltips for Ascension stats in the stats tab are now created dynamically, so there's no need to edit them if you've edited the description/name</li> <li>Added a <code>Server</code> table on the client, from which listeners for any Osiris symbol can be created, eliminating the need for boilerplate code on the server side if you need to listen for Osiris stuff.</li> <li>Added an <code>Osiris</code> table on server to make user queries and DB queries a bit less aids to use in lua: <pre><code>-- DBs with only one tuple return their contents directly, rather than as a list\nlocal _, value = Osiris.DB_PIP_EpicStats_DamageDealt(char.MyGuid, nil)\n-- User queries can also return variables directly from their output DBs, even for queries with multiple outputs\nlocal value = Osiris.QRY_AMER_KeywordStat_VitalityVoid_GetRadius(char.MyGuid, 1)\n</code></pre></li> </ul> <p>On the future side of things:</p> <p>Development has slowed down throughout March due to work and studies, but I'm not planning on stopping work on Epip anytime soon, and there are lots of exciting features in the planning stages. There is no time estimate for any of them, they're just things I know I will try out eventually. I know creating expectations never ends up well, but for the anniversary I felt it would be nice to write down the ideas I'm planning for the near future:</p> <ul> <li>Character sheet overhaul: the attribute/ability/talent tabs will become easily moddable, for modifying or adding new entries to them. This will pave the way for custom attributes and abilities. The UI currently used for the custom vanity tab will be made generic, so anyone can add their own tabs.</li> <li>Proper controller support for EE UIs: a large undertaking, but something that looks to be very possible and would be a massive quality of life improvement.</li> <li>Custom journal UI: will replace the current changelog functionality. The plan is to use the GM mode's journal UI as a base, since it's a slick, full-screen UI with support for nested categories. The functionality will be made generic, you'd be able to use it for more than just changelogs.</li> <li>A way to create UIs just from lua: work on this already started back in early January; it's used for the [REDACTED] in Fort Joy, but it's quite incomplete. The plan is to allow for creation of UIs with backgrounds, text, and all the Larian form elements (buttons, dropdowns, sliders etc.), all without touching any swf.</li> <li>More documentation for the source code, namely the remaining UI scripts and the base metatables</li> </ul> <p>Thanks for reading and I hope you have an epic 1st of April.</p>"},{"location":"patchnotes/#19222-huge-hotbar-rewrite","title":"19/2/22 Huge Hotbar rewrite","text":"<p>Rewrote the hotbar UI. This involves mostly technical changes, in preparations for a standalone release.</p> <p>Your hotkey keybindings will be reset with this update! Please bind them again.</p> <p>Visible changes:</p> <ul> <li>Fixed the top of the buttons area blocking clicks onto the world and other UIs</li> <li>Any skill or item can now be dragged from the hotbar to the customizable buttons to bind it there (useful for old mods that use skills/items to bring up menus)<ul> <li>The \"use last slot\" action has been removed due to this.</li> </ul> </li> <li>Removed the \"view changelog\" action</li> <li>The slot rendering is now entirely scripted (no help from the engine) which works around a crash and removes the need for an initialization procedure (that annoying \"switch to the first row\" message)</li> <li>Saving your current amount of bars and order should be a lot more reliable (now happens upon pausing the game, instead of a timer)</li> <li>Action buttons can now be highlighted or disabled; ex. the pyramids one is disabled if the party has no pyramids</li> <li>Added an action to open the pyramids UI</li> <li>Fixed the source skill border clipping into other rows</li> <li>Added compatibility for Weapon Expansion: adds an action for toggling the menu, and repositions the original button when you have 2 rows of action buttons</li> <li>Actions in the drawer are now ordered in a consistent manner</li> <li>Added a context menu when you right click a row; from there, you can:<ul> <li>\"Push\" groups of slots to the left/right (useful for inserting skills inbetween slots)</li> <li>Clear rows, or unmemorized skills</li> <li>Save and load \"loadouts\" of rows. Loadouts can be applied even if your character doesn't currently know all the skills from it.</li> </ul> </li> </ul> <p>Other changes:</p> <ul> <li>Simple tooltips (the ones that go in that very small black box) now appear much faster, rather than being delayed</li> <li>Added numerous calls to <code>Game.Character</code> and <code>Game.Item</code>, mostly related to functionality needed for the hotbar.</li> </ul>"},{"location":"patchnotes/#5222-docs-inauguration-patch-flashed","title":"5/2/22 Docs inauguration patch :flashed:","text":"<ul> <li>Added new stats to the stats tab (more coming later):<ul> <li>Party gold, splinters</li> <li>Celestial restoration</li> <li>Vitality Void damage, radius</li> <li>Prosperity threshold</li> </ul> </li> <li>Rewrote the ingame options menu; the mod's settings now gets its own tab instead of being stuffed into Gameplay</li> <li>You can now switch to and from Tactician difficulty at any time from settings</li> <li>Improved context menu scrolling</li> <li>Touchups to MessageBox, Examine</li> <li>Cleaned up Utilities.lua, removed old unused methods</li> <li>Removed support for the archaic config file structure (from before the ingame settings menu; very old)</li> <li>Created documentation for <code>Game</code>, OptionsSettings, MessageBox, StatsTab, Examine, and CharacterSheet</li> </ul>"},{"location":"patchnotes/#26122-birthday-patch-flashed","title":"26/1/22: birthday patch :flashed:","text":"<ul> <li>Fixed \u201cTeleport to\u201d not working on anything other than characters; it now works with items and triggers as well</li> <li>Fixed shields not showing all transmog options</li> <li>Fixed more inconsistency issues with context menus on world characters</li> <li>Transmog menu now works properly for characters that have had their race/gender changed</li> <li>Added an option to show B/H next to player portraits while unsheathed</li> <li>Fixed tooltips of damaging statuses for real</li> <li>Added an option to force story patching on every load</li> <li>Physical/pierce resistances in character sheet now get colored blue/red like how the normal resistances would</li> <li>Holding shift now fades out statuses on the enemy health bar</li> <li>Temporary solution for scrolling context menus that would leave the screen, with the mouse wheel</li> <li>Added something awesome to Fort Joy</li> </ul>"},{"location":"patchnotes/#technical-stuff-so-it-doesnt-look-like-im-doing-nothing","title":"Technical stuff so it doesn't look like I'm doing nothing:","text":"<ul> <li>Added utility methods for initializing \u201cFeatures\u201d</li> <li>You can now specify required filesystem overrides and mods for features, with them automatically disabling themselves if these are missing</li> <li>Removed GetCharacterDodge function</li> <li>Rewrote character sheet resistances script</li> <li>Rewrote script for enemy health bar</li> <li>Moved Majora's compatibility to its own script</li> <li>Added Game.Character library for character-related stuff</li> <li>Moved a lot of old calls to Client</li> <li>Started work on a library that allows the creation of UIs purely in lua (no swf/actionscript editing)</li> </ul>"},{"location":"patchnotes/#14122","title":"14/1/22:","text":"<ul> <li>Re-enabled custom icons on the UIs that previously used them, as the extender issues with them have been fixed.</li> <li>Added a transmog context menu, can be enabled in settings.<ul> <li>Appears on equipment with visuals, including weapons.</li> <li>Submenus display categorized root templates, filtered down to only the ones compatible with your current race/gender/alive/undead.</li> <li>Supports Majora's Fashion Sins.</li> <li>Can save/load outfits, along with their dyes. Saved outfits are in EPIP_VanityOutfits.json</li> <li>Warning: artifacts and armor set items will not currently work properly when transmogrified. Also, Majora's tabs tend to overflow the screen.</li> </ul> </li> <li>Fixed status tooltips in v56</li> <li>Fixed extract runes context menu option consuming gold instead of splinters</li> <li>Numerous miscellaneous internal changes</li> </ul>"},{"location":"patchnotes/#271221","title":"27/12/21:","text":"<ul> <li>Updated to v56 of the extender. Current issues (with the extender):<ul> <li>Anything related to status tooltip editing does not work as Game.Tooltip is borked</li> <li>UIs with custom icons (hotbar, toolip) stop displaying vanilla icons after the first session. Custom icons are disabled for now so as to keep both the hotbar and console usable</li> </ul> </li> <li>Removed the old console cheats</li> <li>Full rewrite of the stats tab; it should be a lot more reliable now (especially in multiplayer) and survives lua resets</li> <li>Stats and categories are now defined in Epip.Features.StatsTab.</li> <li>Fixed context menu not working on chained characters, and added it to summon portraits</li> <li>(maybe) fixed summon portrait display issues</li> <li>Custom talents now display in the examine menu</li> <li>Organizational changes to tooltip adjustments script</li> <li>torturerSkillOverrides was moved to Data.Game.TORTURER_SKILL_OVERRIDES</li> <li>statusToSkill was moved to Data.Game.DAMAGING_STATUS_SKILLS</li> </ul>"},{"location":"patchnotes/#v1043-191221","title":"v1043 (19/12/21)","text":"<ul> <li>Added critical chance to the examine menu, below damage</li> <li>Added an option to set the default position of the Examine menu (middle, left, or right of the screen)</li> <li>Fixed health bar appearing in character creation</li> <li>Added a new context menu option to dismantle all equipment within a container. Only shows up when there's equipment within a container.</li> <li>Dismantling through the context menu now requires shift-clicking for any equipped item</li> <li>Fixed right-clicking containers bringing up debugging cheats for the character you previously had selected</li> <li>Organizational changes to various UI scripts and older features, as preparations for the grand debut of the Epip modding docs</li> </ul> <p>Reuploaded on 22/12/21 with the following fixes:</p> <ul> <li>More organizational changes (moving Data.UI to Client.UI.Data)</li> <li>Fixed immunities in examine showing up in the wrong place</li> <li>Undid some recent changes that lead to playerInfo summon display breaking</li> </ul> <p>Reuploaded on 23/12/21 to remove some testing text in character creation, as well as to (maybe?) fix an issue with combat HUD disappearing in new games.</p>"},{"location":"patchnotes/#v1042-141221","title":"v1042 (14/12/21)","text":"<ul> <li>Added an option to hide hotbar hotkeys text</li> <li>Added an \"Immersive Meditation\" setting which disables hotbar and minimap UIs while in Amer UIs</li> <li>Added shortened names for the remaining numpad keys (multiply, add, minus, etc.)</li> <li>Added an auto-identify setting, with 2 modes: always, and only with enough Loremaster. This will instantly identify items when they are generated</li> <li>Item tooltips no longer overflow through the top of the screen, making it easier to see the damage stats on items with 3 filled sockets</li> <li>Dismantling from the context menu now requires shift-clicking for items with runes inside (as a way to mark them as 'important' and avoid misclicks related to a certain new feature)</li> <li>Added a context menu option to items to dye them (requires the dyes to be in the party's inventory)</li> <li>Added a context menu to player portraits to hide statuses and summons (not saved between reloads for now)</li> <li>Added a context menu option to extract runes from items</li> <li>Added a debug menu with cheats for characters, available in the extender's developer mode<ul> <li>Accessed by right-clicking a character in the world, or a player portrait in the left portraits UI</li> <li>Allows you to add all sorts of stats, spells, SpecialLogic, spawn items, treasure tables, toggle godmode, and more</li> </ul> </li> <li>The new context menu tech is quite extensive, and can be toggled off in the settings in case any serious issues arise</li> <li>Finesse recovery now works for pay X skills, and sucker punch<ul> <li>You can add more exceptions to <code>DB_PIP_WeaponBasedFinesse_Whitelist((STRING)_Skill)</code></li> </ul> </li> <li>Fixed overhead dialogue durations being wrong when they were changed away from the default value</li> <li>Overhead sizes are now always default in Amer UIs</li> <li>Fixed origins gaining epic enemies perks for real this time</li> <li>Fixed description of Clouded Memory</li> <li>Fixed map visibility setting not working after exiting respec</li> <li>Fixed being able to toggle minimap within character creation</li> <li>Fixed weapon range deltamod tooltip showing up on unidentified items</li> <li>Fixed wrong health bar B/H display on dead characters</li> <li>The dismantle context menu option should no longer get permanently stuck in case of unidentified shenanigans</li> <li>Added a 20% tax to dismantling items from context menus, used to amortize the development costs of the new menus as well as to fund future development of the mod<ul> <li>just kidding</li> </ul> </li> </ul>"},{"location":"patchnotes/#v1041-231021","title":"v1041 (23/10/21)","text":"<ul> <li>Added a slider for status overhead duration</li> <li>Fixed damage overheads for items not working with the new size settings</li> <li>Fixed the talents tab being selected after exiting mirror</li> <li>Fixed character sheet not updating the first time it is opened after a respec</li> <li>Fixed decimal stat adjustments being lost while merging them into one tooltip</li> <li>Fixed character creation talent points display when changing presets</li> <li>Fixed 1st hotbar not being clickable after a lua reset</li> <li>Fixed hotbar cooldown/active overlays when joining mid-session<ul> <li>This should also have fixed the issue with loading a save during a summon turn</li> </ul> </li> <li>Origins should no longer get Epic Enemies buffs</li> <li>Possibly fixed unidentified items showing the weapon range deltamods in the tooltip</li> </ul>"},{"location":"patchnotes/#v1040-191021","title":"v1040 (19/10/21)","text":"<ul> <li>Added some client APIs for the message box UI and overhead texts (Client.UI.MessageBox and Client.UI.Overheads)</li> <li>Added settings for overhead sizes</li> <li>Added a setting to bring back the vanilla combat log button (on by default)</li> <li>Fixed talents not being hidden properly in the character creation UI (which includes the mirror, it's the same UI)</li> <li>Fixed EE stats tab not working for new companions until a reload</li> <li>Fixed sliders in the options menu being saved with +1 step than what you've set them to</li> </ul>"},{"location":"patchnotes/#v1039-171021","title":"v1039 (17/10/21)","text":"<ul> <li>Fixed SI tooltip highlighting not working for a few schools</li> <li>Fixed wrong earth damage color in shift-tooltips</li> </ul>"},{"location":"patchnotes/#v1038-161021","title":"v1038 (16/10/21)","text":"<ul> <li>Added a hotbar hotkey to use the skill/item on the very last slot of your hotbar (right-most in 5th row)<ul> <li>Can use this to make a Source Vamp hotkey, for example</li> </ul> </li> <li>Weapon range deltamods now show up like regular deltamods on the tooltip, and the weapon range display is split up to show both base and extra range</li> <li>Holding the show cones button (shift by default) will display skill damage as their multipliers</li> <li>When infusing or when the shift key is held, unmet SI requirements will be displayed in red text</li> <li>Possibly fixed the \"auto-unlock inventories\" feature</li> <li>Artifact items now show quality</li> <li>Added an option to log all UI ExternalInterface calls and invokes to the console, visible in the settings menu if the extender developer mode is enabled</li> <li>Started slowly organizing code into sensical libraries; anything in the extended <code>Game</code> table should be reliable and will likely not change names<ul> <li>Let me know if something that used to work before broke all of a sudden</li> </ul> </li> <li>Fixed an error in the console when hovering over armor whose subtype could not be determined (ex. the starting tattered equipment)</li> <li>Character Creation UI now implements machine learning and blockchain technology to notify you of possible typos in your character names</li> <li>Added a WIP custom talents feature. See <code>EpipTalents.lua</code> for usage example. You can also hide any non-racial talent.<ul> <li>Shortcomings:</li> <li>They will only display on kb+m. No controller UI support yet.</li> <li>They do not show up in the examine UI yet.</li> <li>Requirements are not rechecked while moving ability/attribute points around in the mirror; upon exiting, you will still lose any talents you cannot sustain</li> <li>Can't bind them to deltamods</li> <li>Rarely, the mirror UI might show you having fewer talent points than you do - this should fix itself if you exit the mirror and go back in (if someone has a save where this happens consistently, let me know)</li> </ul> </li> <li>As a result of the talent UI changes, the bug with unequipping walk-it-off should be fixed</li> </ul>"},{"location":"patchnotes/#v1037-21021","title":"v1037 (2/10/21)","text":"<ul> <li>Fixed right-most zeros getting culled in stat adjustment tooltips</li> <li>Added a new setting to disable fog of war (server-wide, host-only, non-destructive; can be reverted)<ul> <li>Minor visual bug: re-enabling FoW will cause the world to go black until you unpause</li> </ul> </li> </ul>"},{"location":"patchnotes/#v1036-11021","title":"v1036 (1/10/21)","text":"<ul> <li>Changed the Damage tooltip in character sheet to be less confusing</li> <li>Removed the obsolete \"From LW: -0%\" tooltip text from character sheet</li> <li>Removed the word \"Set:\" from deltamods</li> <li>Added an option to auto-unlock inventories in multiplayer upon loading a save. This setting is per player.</li> <li>Fixed negative stat adjustments not being grouped together in tooltips</li> <li>Equipment now shows a \"Quality\" rating in tooltips, which denotes how good its damage/armor roll was. An item with 100% Quality has the best roll (only possible for Divines)</li> <li>Trickster's Repertoire now grants invisibility+sneaking until the start of your first turn, and only causes you to sneak starting from your second round. Additionally, at the start of your turns, you always unsneak.</li> <li>Changed wording for the Hothead tooltip</li> <li>Fixed error spam in console upon reload, and reorganized some code</li> <li>Added a lifesteal stat to the stats tab (will update upon changing Necromancy points, or in combat)</li> <li>Finished support for preset descriptions in character creation, override CharacterCreation.characterCreationPresetDescriptions in CharacterCreationUI.lua to set them</li> </ul>"},{"location":"patchnotes/#v1035-120921","title":"v1035 (12/09/21)","text":"<ul> <li>Replaced the config json file with an ingame settings menu, available from the game's normal \"Gameplay settings\" tab</li> <li>Unidentified artifacts now show their rarity as artifact, and use the custom color</li> <li>Proteans and Artifact runes now also use the Artifact color, and slots that they cannot be put on have a warning message</li> <li>Fixed Trickster's Repertoire breaking sneaking from other effects that cause you to sneak</li> <li>Fixed hotbar initialization message (again)</li> </ul>"},{"location":"patchnotes/#v1032-050921","title":"v1032 (05/09/21)","text":"<p>Small patch with some QoL for dyes and a fix for a Finesse issue.</p> <ul> <li>Dyeing equipped items will now re-quip them automatically</li> <li>Changed the finesse recovery for weapon-based skills to fix an issue with delayed procs if multiple things used its logic</li> <li>Removed the option to show enemy lvl in healthbar (still buggy!)</li> </ul>"},{"location":"patchnotes/#v1030-300821","title":"v1030 (30/08/21)","text":"<p>Monthly patch to appease our ever-so-hungry Derpy overlord.</p> <ul> <li>Hotbar slot keys now work as expected - ex. pressing \"4\" will use the fourth skill on the bottom bar, regardless of the row it's set to</li> <li>Hotbar actions now show their keybinding, if they have one<ul> <li>Vanilla actions (ex. open journal) will always show the vanilla keybind instead of the custom one (it will still work, though)</li> </ul> </li> <li>Re-enabled the keyboard hotkeys for hotbar actions by default. If you had these disabled previously (or if you're using the mod for the first time), its keys will be unbound upon loading in</li> <li>Changed the default hotbar bindings to swap ping with combat log</li> <li>Added a hotbar action for Portable Respec Mirror, if its mod is loaded</li> <li>Resting from the hotbar now uses the item rather than resting directly (should work with other bedroll mods now)</li> <li>Added a toggle for the minimap onto the hotbar</li> <li>You can no longer rearrange hotbar actions while the hotbar is locked (except within the skills panel)</li> <li>Added a faint blinking animation to the health bar when B/H have 1 turn or less remaining</li> <li>Added an option to show level next to character name in the top healthbar (on by default)</li> <li>You can now unbind hotbar action buttons with middle-click</li> <li>Added handling for when hotbar actions are removed from a save (ex. disabling a mod that adds them)</li> <li>Brittle status now shows its calculated damage like DoTs</li> <li>Masterworked items now show a warning in the tooltip</li> <li>Changed Splintered Arrow icon</li> <li>Fixed Escapist being a huntsman skill</li> <li>Fix protruding hotbar texture on the bottom bar</li> <li>Fixed Trickster's Repertoire removing AP in consecutive turns</li> <li>Trickster's Repertoire no longer activates while playing dead</li> <li>Fixed artifact names not using the new color (oops)</li> <li>Moved the casting notification slightly up so multiline ones don't overlap the health bar</li> <li>Fixed dragging items onto the world not working if the hotbar was enabled</li> <li>Fixed the add/remove rows button being available on summons after opening the pause menu</li> <li>You can no longer use hotbar action hotkeys in dialogues (or other occasions where the UI is entirely hidden), when there is a UI element focused, or when the game is paused</li> <li>Fixed name of hotbar slot 6 binding in the input menu</li> <li>Fixed Slowed 3 AP penalty stacking</li> </ul>"},{"location":"patchnotes/#v1029-060821","title":"v1029 (06/08/21)","text":"<ul> <li>Moved the casting notifications to where your health bar is, and added a toggle for them in the settings (defaults to enabled)</li> <li>Toggle party link hotbar hotkey is now instant (no casting animation)</li> <li>Added a one-row layout to the hotbar actions bar, which is automatically used when you only have one row of skill slots active<ul> <li>You can control the behaviour with the new hotbarHotkeysLayout setting: \"auto\" is the behaviour described above, \"single\" makes it always use the 1-row layout, \"dual\" forces it to always be two rows (like how it was before)</li> <li>Keyboard hotkeys remain functional at all times, even if the buttons are hidden</li> </ul> </li> <li>Fixed \"c\" displaying on the hotbar button you're dragging</li> <li>DoT statuses now show their calculated damage<ul> <li>The display fluctuates for a bit after a skill cast, might redo this entirely later to not rely on the engine damage formula</li> </ul> </li> <li>Centurion Battlestomp can now only be cast if the target is at &lt;10m, and does not consume the ranged charge</li> <li>Tried banishing the \"Enemy Turn\" message again</li> </ul>"},{"location":"patchnotes/#v1027-v1028-300721-and-310721","title":"v1027, v1028 (30/07/21 and 31/07/21)","text":"<p>This patch contains numerous fixes and the first part of the rework of hotbar hotkeys. Happy birthday Derpy!</p> <ul> <li>Replaced the tutorials tab in the journal with a patch notes tab<ul> <li>See EpipPatchNotes.lua for an example on how to use this in your own mod.</li> </ul> </li> <li>Artifact tooltips now show \"Artifact\" as rarity rather than Unique</li> </ul> <p>Hotbar Updates</p> <ul> <li>Added customizable hotbar action hotkeys/buttons. Drag and drop to rearrange/assign them, right click to bring up a list of all actions. Mods can add their own actions very easily; see HotbarActions.lua for an example.</li> <li>To use them with keyboard keys, assign the \"Hotbar Hotkey #\" keys from the game's controls menu. Rebinding them will be easier in the future. You must also enable them within the config file.</li> <li>This rework is a work-in-progress, both in terms of functionality and art; in the future there will also be a 1-row layout.</li> <li>The multihotbar is now enabled by default. Set \"disableHotbar\" to true in the config file to disable it. (the old setting now does nothing)</li> <li>Deprecated the Infusion and Meditate hotkeys; please use the hotbar version of them from now on.</li> <li>Summons can no longer add hotbar rows</li> <li>All the custom elements should now hide during dialogues</li> <li>Fixed jankiness when using low resolutions</li> </ul> <p>Fixes</p> <ul> <li>Fixed player status bar sometimes clipping through portraits and appearing to the left of them</li> <li>Fixed stat adjustments tooltip not working properly on resists</li> <li>Fixed stat adjustments tooltip eating up all other boosts</li> <li>Fixed boss frame in the enemy health bar UI. It should work consistently now</li> <li>Leper rune now should properly grant the talent when it's socketed into an equipped item</li> <li>Fixed being able to infuse out-of-turn with the hotkey (rest in peace gigabrain infused reaction builds)</li> <li>Possibly disabled turn notifications on the hotbar health bar</li> </ul> <p>Known issues</p> <ul> <li>\"Actions\" drawer (attack/sneak/sheathe) does not work well along with the default keyboard hotkey, and the menu is not repositioned</li> <li>Buttons on the hotbar don't yet light up like they do in vanilla</li> <li>Order of actions in drawer is random</li> <li>Some hotbar buttons do not have state animations yet</li> <li>The title in the patch notes menu will not be the right color the first time after a reload</li> </ul>"},{"location":"patchnotes/#v1025-v1026-the-great-interface-update-060721","title":"v1025, v1026 - THE GREAT INTERFACE UPDATE (06/07/21)","text":"<p>Many UI quality-of-life changes, as well as features for modders. The UI changes were untested on controllers. Most will not apply (status wrapping works, but reverts the frames to the square ones).</p> <ul> <li>The character sheet now displays physical and piercing resistances</li> <li>The health bar when you hover over an enemy now shows B/H, with the icons lighting up when you have enough stacks for a T3. If you hold shift, the resistance display is replaced by AP, SP and Initiative info. Special thanks to Elric for the new art assets!</li> <li> <p>The B/H statuses are now hidden in that UI, to reduce clutter.</p> </li> <li> <p>Added hotkeys for Meditate, Source Infusion and toggling additional hotbars. You can bind them from the game's normal controls screen. The hotbar hotkey allows you to temporarily toggle the additional bars from the multibar feature, explained below.</p> </li> <li>You can dismantle non-uniques from your inventory by right-clicking them and selecting the new Dismantle option at the bottom (work-in-progress, can get \u2018stuck' sometimes; simply use it again on another item and both should be dismantled)</li> <li>Presets in character creation now support descriptions (see the modding section on how to add these; Derpy's mod soon will)</li> <li>\"Stat Adjustments\" in tooltips are merged into one line</li> <li>Skill and item tooltips now reflect the +1ap costs from Slowed III (using items is still bugged; I'm pretty sure that's en engine issue)</li> <li>The health bars at the bottom now always show their values (no need to hover)</li> <li>Added a new stats tab in the character sheet with EE-related stats, like reaction charges and missing regeneration. Will also show your keyword activators and mutators. You can expand/collapse the stat tabs by left-clicking them.</li> <li>The player portraits on the left now wrap their status displays onto a second row once a character has &gt;6 statuses. Each row tries to maintain an equal amount of statuses (they never wrap onto a third row).</li> <li>Unfortunately, to make this work I had to hide summon statuses there. You can still see them in the middle of the screen or on the tooltip of their portrait. I might be able to remedy this in the future, it just needs more research.</li> <li> <p>Summon portraits will be shrunk once the player's statuses wrap.</p> <ul> <li>You can disable this in the config file.</li> </ul> </li> <li> <p>Added a work-progress multihotbar; you must enable it from the config file in  Documents\\Larian Studios\\Divinity Original Sin 2 Definitive Edition\\Osiris Data\\Config_EpipEncounters.json (it will be generated on first load). I don't promise any stability at the moment. Multiplayer is untested.</p> <ul> <li>You can add up to 4 extra bars, and reorder them. Multihotbar layouts are synchronized to the host (savegame) every 8 mins.</li> </ul> </li> <li>The first time you load a save with the setting active, you will have to manually switch all characters to the first hotbar row before the multihotbar will be enabled. This is to circumvent a crash. You will only need to do this once per playthrough (and anytime you disable and re-enable the feature)</li> <li>If the extra rows get in the way, remember there is a hotkey to temporarily toggle them.</li> </ul> <p>Known issues with the multihotbar:</p> <ul> <li>Resizing window does not update the health bar position properly, neither the bars<ul> <li>The extra rows will not show icons if your resolution does not have space for all 29 slots in a row</li> </ul> </li> <li>You can click outside of the bar to the right to select slots from upper rows</li> <li>In dialogues, you can still see the hotbar cycling buttons</li> <li>Combat log button positioning is not adjusted</li> </ul> <p>Fixes in this patch:</p> <ul> <li>Added SP refund to Reactive Shot tooltip</li> <li>Updated the infusion deltamod removal to use the new removal PROC (should be compatible with Derpy's deltamod additions now)</li> <li>Fixed Opportunist charge script after Amer's patch, and removed the patching procedure from the new versioning system (hopefully there are no more issues with this)</li> <li>Updated the GoTS script to work with the new basic attack script</li> <li>Fixed Leper rune having old Incons (this might not be retroactive)</li> <li>Added the AP penalty to Slowed III tooltip<ul> <li>No clue how to do so for the journal</li> </ul> </li> <li>Updated Horrid Wilting SI reaction script</li> <li>The modded centurion activator now mentions the 1 ranged charge</li> <li>Thirst accumulated AP is now lost on death or combat exit</li> </ul> <p>For modders:</p> <ul> <li>Added Utilities.lua, a table which contains helper methods for adding features in way that is compatible with multiple mods, and some UI helpers<ul> <li>Can be accessed with Mods[\u201cEpipEncounters\u201d].Utilities</li> <li>Calls to its methods are not persistent, and you must always make them when the lua engine loads, before the StatsLoaded / SessionLoaded events. In other words, call its methods from the main lua body, not from any listener.</li> <li>AddArtifactToTreasure() has been moved here.</li> </ul> </li> <li>Added AddSkillbook(), which functions similarly to the previous method and adds a skillbook to a trader table. Params are the item id (without the I_ prefix that you'd normally use for tables) and the school name, as it appears ingame (capitalized)</li> <li>You can modify the characterCreationPresetDescriptions subtable to add descriptions to the presets in character creation. The table is commented with the preset that corresponds to the index in the preset selector.</li> <li>No documentation currently exists for the new stats tab, but do let me know if you want to add your own mod's stats to this panel.</li> <li>Added GetConfig(), which retrieves a json config file for your mod. Takes two params: the suffix of the config file, and a table containing its default values, for patching old configs with new settings</li> </ul> <p>Known issues:</p> <ul> <li>Picking a talent will not update the new stats</li> <li>Preset descriptions do not appear until you switch presets at least once</li> <li>Changing name in character creation causes the skills to disappear (fixed by changing tabs)</li> <li>Dismantling from right click can get \u2018stuck' on some items - this can be fixed by dismantling another one.</li> <li>Character creation spits a few errors on startup, these are completely harmless (some element is not yet initialized at that point, unsure which one)</li> <li>New stats fail to update when starting a new playthrough (harmless)</li> <li>With multiple controlled summons, the gap between their portraits changes when you switch between them</li> </ul>"},{"location":"patchnotes/#v1020-250421","title":"v1020 (25/04/21)","text":"<ul> <li>Boneshaped Crusher now has All-In</li> <li>Removed Incons from talent menus and characters that had it; you will be refunded Talent Points for characters that had it. Special thanks to Focus for the UI editing help.</li> <li>Leper now grants Trickster's Repertoire instead of old Inconspicuous</li> <li>Ending combat with the new incons now automatically unsneaks</li> <li>Added (hopefully) all the text changes that were missing (infused reactions, artifacts, some talents)</li> <li>Reactive Shot SI3 refunds 1SP</li> <li>Added descriptions of the Epic Enemies effects to the condensed tooltip (thanks Derpy)</li> <li>Presence mutator from Epic Enemies now grants all Presence effects</li> <li>The custom loading screen is now toggleable, and off by default. To re-enable it, edit EpipEncountersConfig.json in Documents\\Larian Studios\\Divinity Original Sin 2 Definitive Edition\\Osiris Data</li> <li>For modders: added a function to safely add artifacts to the ST_AMER_UNI treasuretable. Simply call Mods[\u201cEpipEncounters\u201d].AddArtifactToTreasure(statsID) (ex. AddArtifactToTreasure(\"UNI_AMER_Abyss\") ) before the StatsLoaded engine event. You can copy TreasureTables.lua into your mod to use it, if you don't want to have Epip Encounters as a dependency. If I implement more helpers like this, I'll split them off into their own mod.</li> <li>Fixed opportunist script not running</li> <li>Fixed Chthonian not appearing as a status on Epic Enemies</li> <li>Fixed Greatforge item validation breaking<ul> <li>Warning for other modders: if you're overloading an existing query with Lua, do not do so directly from Ext.NewQuery(), as there is no way to define queries that expect specific params. This causes issues with negating queries. Instead, create a wrapper query in osiris that uses NRD_ModQuery.</li> </ul> </li> </ul>"},{"location":"patchnotes/#v1010-170421","title":"v1010 (17/04/21)","text":"<p>Note: you will need the latest EE update (the one for modders) for the text changes to work properly. Also, you will not see the usual \u201cEpip Encounters has been updated\u201d message as the normal EE one will show up instead.</p> <ul> <li>Break the Shackles cleanses dazzled</li> <li>Inconspicuous rework, as a rework of Master Fletcher (now named Trickster's Repertoire):</li> <li>You sneak and become invisible for free at the start of combat, until the end of your first turn. At the end of your turn, sneak for free. At the start of your turns, if you were sneaking from this effect, you stop sneaking. Additionally, your special arrows count as basic attacks and you have a 33% chance to recover a special arrow after shooting it.</li> <li> <p>Old inconspicuous remains available. At least for now.</p> </li> <li> <p>Apotheosis SI3 is now exclusive from the previous SIs, but lasts until your source gen depletes</p> </li> <li>Escapist skill costs 0AP, has 5m range, up from 4m</li> <li>Opportunist grants 2 free generic reaction charges, up from 1</li> <li>Added a tutorial for when you get an infused reaction node for the first time (kekw)</li> <li>Executioner grants 2 AP, up from 1</li> <li>Charity is now once per round per character, rather than once per round</li> <li>Added meta skills to print SP and resistances</li> <li>Added correct text for most changes (ascension, artifacts and executioner are still missing)</li> <li>Fixed using Clouded Memories from bags not consuming them</li> <li>Fixed finesse recovery for weapon-based skills activating per-target rather than per skill cast</li> <li>I'm surprised no one tried whirlwind while this lasted</li> <li>Fixed Prototrophize not granting SP when under infinite SG</li> <li>It will still extend SG when you're at max sp. I'm not sure what the behaviour should be in that case.</li> </ul>"},{"location":"patchnotes/#v1001-30421","title":"v1001 (3/04/21)","text":"<ul> <li>Fixed Drill Sockets merging damage types for weapons</li> <li>Fixed permanent Prosperity keyword from Hothead talent - loading a save will recalculate your legitimate sources</li> </ul>"},{"location":"Client/","title":"Client","text":""},{"location":"Client/#client","title":"Client","text":"<p>The <code>Client</code> table contains client-specific calls as well as tables with APIs for UIs. It is only available on the Client context.</p> <p>The \"Client character\" here refers to the currently-controlled character on the client.</p> <p></p>"},{"location":"Client/#clientlib-class","title":"ClientLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Client/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Client/#activecharacterchanged-event","title":"ActiveCharacterChanged (event)","text":"<p>@field PreviousCharacter <code>EclCharacter</code></p> <p>@field NewCharacter <code>EclCharacter</code></p>"},{"location":"Client/#skillstatechanged-event","title":"SkillStateChanged (event)","text":"<p>Fired when the active client character enters or exits a skill state.</p> <p>@field Character <code>EclCharacter</code> The active client character.</p> <p>@field State <code>EclSkillState?</code></p>"},{"location":"Client/#viewportchanged-event","title":"ViewportChanged (event)","text":"<p>Fired when the size of the viewport changes.</p> <p>@field NewSize <code>Vector2</code></p> <p>@field OldSize <code>Vector2</code></p>"},{"location":"Client/#methods","title":"Methods","text":""},{"location":"Client/#copytoclipboard","title":"CopyToClipboard","text":"<pre><code>function ClientLib.CopyToClipboard(text) -- (Client-only)\n</code></pre> <p>Copies text to the clipboard.  </p> <p>Some characters, like newlines, will be trimmed out as per the vanilla scripting on the swf.</p> <p>Relies on MessageBox.</p> <p>@param text <code>string</code></p>"},{"location":"Client/#getactiveui","title":"GetActiveUI","text":"<pre><code>function ClientLib.GetActiveUI(playerIndex) -- (Client-only)\n-&gt; UIObject?\n</code></pre> <p>Returns the last UIObject the player has interacted with.</p> <p>@param playerIndex <code>integer?</code> Defaults to `1`.</p>"},{"location":"Client/#getcharacter","title":"GetCharacter","text":"<pre><code>function ClientLib.GetCharacter(playerIndex) -- (Client-only)\n-&gt; EclCharacter\n</code></pre> <p>Returns the currently-controlled character on the client.  </p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Client/#getdate","title":"GetDate","text":"<pre><code>function ClientLib.GetDate(utc) -- (Client-only)\n-&gt; DateTime\n</code></pre> <p>Returns the current date and time as an object. Relies on Client.UI.Time</p> <p>@param utc <code>boolean</code> Whether to use UTC time. Defaults to false.</p>"},{"location":"Client/#getdatestring","title":"GetDateString","text":"<pre><code>function ClientLib.GetDateString() -- (Client-only)\n-&gt; string\n</code></pre> <p>Returns the current date and time as a string.</p>"},{"location":"Client/#getmouseposition","title":"GetMousePosition","text":"<pre><code>function ClientLib.GetMousePosition() -- (Client-only)\n-&gt; integer, integer\n</code></pre> <p>Returns the global position of the mouse in the screen space, in pixel coordinates.</p>"},{"location":"Client/#getprofileguid","title":"GetProfileGUID","text":"<pre><code>function ClientLib.GetProfileGUID(playerIndex) -- (Client-only)\n-&gt; GUID\n</code></pre> <p>Returns the profile GUID of a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Client/#getviewportsize","title":"GetViewportSize","text":"<pre><code>function ClientLib.GetViewportSize() -- (Client-only)\n-&gt; Vector2\n</code></pre> <p>Returns the viewport size.</p>"},{"location":"Client/#isactivecombatant","title":"IsActiveCombatant","text":"<pre><code>function ClientLib.IsActiveCombatant() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the client's char is currently playing its turn in a combat. TODO this fails while fear is applied.</p> <p>Relies on StatusConsole.</p>"},{"location":"Client/#iscursoroverui","title":"IsCursorOverUI","text":"<pre><code>function ClientLib.IsCursorOverUI(playerIndex) -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the cursor is over any UIObject.</p> <p>@param playerIndex <code>integer?</code> Defaults to `1`.</p>"},{"location":"Client/#ishost","title":"IsHost","text":"<pre><code>function ClientLib.IsHost() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns true if the client is the host of the current session.  </p> <p>Relies on GameMenu.</p>"},{"location":"Client/#isincombat","title":"IsInCombat","text":"<pre><code>function ClientLib.IsInCombat() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the client char is in combat.</p>"},{"location":"Client/#isindialogue","title":"IsInDialogue","text":"<pre><code>function ClientLib.IsInDialogue() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the client character is currently in dialogue.</p>"},{"location":"Client/#isingameplaystate","title":"IsInGameplayState","text":"<pre><code>function ClientLib.IsInGameplayState() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns true if the game is in a gameplay state, or late into loading.</p>"},{"location":"Client/#ispreparinginfusion","title":"IsPreparingInfusion","text":"<pre><code>function ClientLib.IsPreparingInfusion() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns true if the client character is preparing a Source Infusion.</p>"},{"location":"Client/#isusingcontroller","title":"IsUsingController","text":"<pre><code>function ClientLib.IsUsingController() -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the client is using a controller.</p>"},{"location":"Client/#worldpositiontoscreen","title":"WorldPositionToScreen","text":"<pre><code>function ClientLib.WorldPositionToScreen(worldPosition, playerIndex) -- (Client-only)\n-&gt; Vector2\n</code></pre> <p>Translates world coordinates to screen position.</p> <p>@param worldPosition <code>Vector3</code></p> <p>@param playerIndex <code>integer?</code> Defaults to `1`.</p> <p></p>"},{"location":"Client/input/","title":"Input","text":""},{"location":"Client/input/#input","title":"Input","text":"<p><code>Client.Input</code> contains input-related queries.</p>"},{"location":"Client/input/#functions","title":"Functions","text":"<p>nil </p>"},{"location":"Client/UI/CharacterSheet/","title":"CharacterSheet","text":""},{"location":"Client/UI/CharacterSheet/#charactersheet","title":"CharacterSheet","text":""},{"location":"Client/UI/CharacterSheet/#events","title":"Events","text":"<p>nil </p>"},{"location":"Client/UI/ChatLog/","title":"ChatLog","text":""},{"location":"Client/UI/ChatLog/#chatlog","title":"ChatLog","text":"<p>The ChatLog UI displays and manages the chat log. Epip's script allows you to add custom tabs to it (like the Party/All Players tabs by default).</p> <p>Examples of its use are the chat commands features, which intercept sent messages to execute terminal-style commands.</p>"},{"location":"Client/UI/ChatLog/#events-hooks","title":"Events &amp; Hooks","text":"<pre><code>---Fired when the client sends a message in chat. TODO pass tab\n---@event MessageSent\n---@field RegisterListener fun(self, listener:fun(text:string, clientChar:EclCharacter))\n---@field Fire fun(self, text:string, clientChar:EclCharacter)\n---Fired when a message is rendered onto the UI.\n---@event MessageAdded\n---@field RegisterListener fun(self, listener:fun(tab:integer|string, text:string))\n---@field Fire fun(self, tab:integer|string, text:string)\n---Fired when the client attempts to send a message.\n---@hook CanSendMessage\n---@field RegisterHook fun(self, handler:fun(canSend:boolean, text:string, char:EclCharacter))\n---@field Return fun(self, canSend:boolean, text:string, char:EclCharacter)\n</code></pre>"},{"location":"Client/UI/ChatLog/#methods","title":"Methods","text":"<pre><code>---Sends text onto the chatbox, using the vanilla colors and font sizes.\n---@param tab integer|string Tab ID. See ChatLog.TABS enum. For custom tabs, use your string ID.\n---@param userName string\n---@param message string\nfunction Chat.AddFormattedMessage(tab, userName, message)\n---Clear a chat tab's messages.\n---Render raw text onto the chatbox.\n---@param tab integer|string\n---@param tab? integer|string Tab ID. See ChatLog.TABS enum. For custom tabs, use your string ID. Defaults to current tab.\n---@param text string\nfunction Chat.AddMessage(tab, text)\n---Adds a tab to the chat log.\n---@param tabID string\n---@param label string\nfunction Chat.AddTab(tabID, label)\n</code></pre>"},{"location":"Client/UI/ChatLog/#objects","title":"Objects","text":"<pre><code>---@class ChatLogUI : UI\n</code></pre>"},{"location":"Client/UI/Examine/","title":"Examine","text":""},{"location":"Client/UI/Examine/#examine","title":"Examine","text":"<p>Hooks for the Examine UI.</p>"},{"location":"Client/UI/GiftBagContent/","title":"GiftBagContent","text":""},{"location":"Client/UI/GiftBagContent/#giftbagcontent","title":"GiftBagContent","text":"<p>The GiftBagContent UI is the ingame giftbags menu.</p>"},{"location":"Client/UI/GiftBagContent/#events-hooks","title":"Events &amp; Hooks","text":"<pre><code>---Fired after the UI's content is updated, upon opening the UI.\n---@event ContentUpdated\n---@field RegisterListener fun(self, listener:fun(content:GiftBagContentUIEntry[]))\n---@field Fire fun(self, content:GiftBagContentUIEntry[])\n---Fired when the content of the UI needs to be updated.\n---@hook GetContent\n---@field RegisterHook fun(self, handler:fun(content:GiftBagContentUIEntry[]))\n---@field Return fun(self, content:GiftBagContentUIEntry[])\n</code></pre>"},{"location":"Client/UI/GiftBagContent/#methods","title":"Methods","text":"<pre><code>---Returns a giftbag mod by its numerical ID.\n---@param id number\n---@return GUID \nfunction GB.GetModGUID(id)\n---Renders the contents of the UI, based on the data arrays in flash.\nfunction GB.RenderContent()\n</code></pre>"},{"location":"Client/UI/GiftBagContent/#objects","title":"Objects","text":"<pre><code>---@class GiftBagContentUI : Feature\n---Represents a mod entry in the UI.\n---@class GiftBagContentUIEntry\n---@field ID number ID in UI.\n---@field Name string\n---@field Description string\n---@field Enabled boolean\n---@field Locked boolean Locked giftbags cannot be toggled.\n---@field Mod string GUID of giftbag mod.\n</code></pre>"},{"location":"Client/UI/MessageBox/","title":"MessageBox","text":""},{"location":"Client/UI/MessageBox/#messagebox","title":"MessageBox","text":"<p><code>Client.UI.MessageBox</code> is used to send custom prompts (like with <code>OpenMessageBox</code> in Osiris).</p>"},{"location":"Client/UI/MessageBox/#events","title":"Events","text":"<p>Subscribe with <code>Client.UI.MessageBox:RegisterListener(event: string, handler: function)</code>. You can subscribe to events coming from a specific message box with <code>RegisterMessageListener()</code> instead.</p> <p></p> <p>nil </p>"},{"location":"Client/UI/OptionsInput/","title":"OptionsInput","text":""},{"location":"Client/UI/OptionsInput/#optionsinput","title":"OptionsInput","text":"<p>The OptionsInput UI script handles new functionality for the input settings menu, which, curiously, is actually a separate UI from the settings menu, and just like it, it does not exist whilst not open.</p> <p>Epip extends it to provide custom keybinding configuration tabs, as well as to read the user's current keybindings as strings to display elsewhere.</p>"},{"location":"Client/UI/OptionsInput/#events-hooks","title":"Events &amp; Hooks","text":"<pre><code>---@event ActionExecuted\n---@field RegisterListener fun(self, listener:fun(action:string, binding:string))\n---@field Fire fun(self, action:string, binding:string)\n---@hook ShouldRenderEntry\n---@field RegisterHook fun(self, handler:fun(render:boolean, entry:OptionsInputKeybind))\n---@field Return fun(self, render:boolean, entry:OptionsInputKeybind)\n---Saves the user's bindings to the disk.\n---@hook CanExecuteAction\n---@field RegisterHook fun(self, handler:fun(execute:boolean, action:string, data:OptionsInputKeybind))\n---@field Return fun(self, execute:boolean, action:string, data:OptionsInputKeybind)\n</code></pre>"},{"location":"Client/UI/OptionsInput/#methods","title":"Methods","text":"<pre><code>function Options.SaveBindings()\n---Returns whether a keybind should show up in the UI.\n---@param entry OptionsInputKeybind\n---@return boolean \nfunction Options.ShouldRenderEntry(entry)\n---Returns whether an action can be currently executed.\n---@param actionID string\n---@return boolean \nfunction Options.CanExecuteAction(actionID)\n---Loads the user's bindings from the disk.\nfunction Options.LoadBindings()\n---@param actionID string\n---@param bindingIndex integer\n---@param keybind string\nfunction Options.SetKeybind(actionID, bindingIndex, keybind)\n---Updates the input map. Call this every time after modifying the user's keybindings.\n---@return table&lt;string, string[]&gt;\nfunction Options.UpdateInputMap()\n---@param index integer\nfunction _SavedKeybind:GetShortInputString(index)\n---Get the saved keybinds for an action.\n---@param action string\n---@return OptionsInputSavedKeybind \nfunction Options.GetKeybinds(action)\n---Get the data for a custom action.\n---@return OptionsInputKeybind \nfunction Options.GetActionData(action)\n---@param action OptionsInputKeybind\nfunction Options.RegisterAction(action)\n---@param id string\n---@param tab OptionsInputTab\nfunction Options.RegisterTab(id, tab)\n---@param tabID string\n---@param keybind OptionsInputKeybind\nfunction Options.AddEntry(tabID, keybind)\n---@param tabID integer\nfunction Options.GetTabIndex(tabID)\n---@return boolean \nfunction Options.IsBindingKey()\n---@param key string\nfunction Options.SetPotentialBinding(key)\n</code></pre>"},{"location":"Client/UI/OptionsInput/#objects","title":"Objects","text":"<pre><code>---@class OptionsInputUI : Feature\n---@field CUSTOM_TABS table&lt;string, OptionsInputTab&gt;\n---@field TAB_ORDER string[]\n---@field nextCustomTabID integer\n---@field renderedCustomTabs table&lt;integer, string&gt;\n---@field tabIndexes table&lt;string, integer&gt;\n---@field nextEntryID integer\n---@field entries table&lt;integer, string&gt;\n---@field keyBeingBound? string\n---@field indexBeingBound? integer\n---@field potentialBinding? string\n---@field BINDINGS table&lt;string, OptionsInputSavedKeybind&gt;\n---@field ACTIONS table&lt;string, OptionsInputKeybind&gt;\n---@field INPUT_MAP table&lt;string, string[]&gt; Maps keyboard inputs to a list of actions that are bound to it.\n---@class OptionsInputTab\n---@field ID string\n---@field Name string\n---@field Label string?\n---@field Keybinds OptionsInputKeybind[]\n---@class OptionsInputKeybind\n---@field Name string\n---@field ID string\n---@field DefaultInput1 string?\n---@field DefaultInput2 string?\n---@field DeveloperOnly boolean? If true, the binding will not be visible in the UI outside of developer mode (and won't function either)\n---@class OptionsInputSavedKeybind\n---@field ID string\n---@field Input1 OptionsInputBinding\n---@field Input2 OptionsInputBinding\n</code></pre>"},{"location":"Client/UI/OptionsSettings/","title":"OptionsSettings","text":""},{"location":"Client/UI/OptionsSettings/#optionssettings","title":"OptionsSettings","text":"<p>Handles the settings menu. Extended to allow for custom setting tabs. Note that the input menu is a different UI - documentation for it pending.</p>"},{"location":"Client/UI/OptionsSettings/#adding-settings","title":"Adding settings","text":"<p>To create a tab with settings for your mod, start by calling <code>RegisterMod(mod: string, data: OptionsSettingsOptionSet)</code>, before <code>SessionLoading</code> - preferably in the lua script's body.</p> <p>The data table should have your mod's name, header (displayed at the top) and side button label (displayed on the button that switches tabs). You may also pass <code>Options</code> in the table at this time, or register settings later through <code>RegisterOptions</code>.</p> <pre><code>Client.UI.OptionsSettings.RegisterMod(\"EpipEncounters\", {\nSideButtonLabel = \"Epip Encounters\",\nTabHeader = \"&lt;font color='7e72d6' size='23'&gt;Epip Encounters&lt;/font&gt;\",\n})\n</code></pre> <p><code>Options</code> is a list of the options for the settings tab, in order that they will appear in. They are in the <code>OptionsSettingsOption</code> format - see fields.</p> <p>The following types of options exist:</p> <ul> <li><code>Checkbox</code>: <code>OptionsSettingsCheckbox</code> struct</li> <li><code>Dropdown</code>: <code>OptionsSettingsDropdown</code> struct</li> <li><code>Slider</code>: <code>OptionsSettingsSlider</code> struct</li> <li><code>Button</code>: <code>OptionsSettingsButton</code> struct</li> <li><code>Header</code>: <code>OptionsSettingsHeader</code> struct, just a text label. Good for dividing sections of your setting menu.</li> </ul> <p>Example options, a dropdown and a slider:</p> <pre><code>{\nID = \"ExaminePosition\",\nType = \"Dropdown\",\nLabel = \"Examine Menu Position\",\nTooltip = \"Controls the default position of the Examine menu when it is opened.\",\nDefaultValue = 1,\nOptions = {\n\"Center\",\n\"Middle Right\",\n\"Middle Left\"\n}\n},\n{\nID = \"OverheadsSize\",\nType = \"Slider\",\nLabel = \"Overhead Text Size\",\nMinAmount = 10,\nMaxAmount = 45,\nDefaultValue = 19,\nInterval = 1,\nHideNumbers = false,\nTooltip = \"Controls the size of regular text above characters talking.&lt;br&gt;&lt;br&gt;Default is 19.\",\n},\n</code></pre> <p>Once you've got your mod and settings registered, they will appear in the settings menu. The user will be able to change them, and their values will be stored to the disk.</p> <p>To query the value of a setting, use <code>GetOptionValue(mod: string, setting: string)</code>. For checkboxes this returns <code>boolean</code>, for other elements it's <code>number</code>. Dropdowns use 1-based indexing! (1 = first option). You can also set the stored value (or hook <code>GetOptionValue</code>). If you do this, keep in mind that it will not be automatically saved to disk.</p> <pre><code>if (Minimap.visible ~= Client.UI.OptionsSettings.GetOptionValue(\"EpipEncounters\", \"Minimap\")) then\nClient.UI.OptionsSettings.SetOptionValue(\"EpipEncounters\", \"Minimap\", Minimap.visible)\nClient.UI.OptionsSettings.SaveSettings()\nend\n</code></pre> <p>You may use the <code>IsElementEnabled</code> hook to make elements in your menu non-interactable. You can use this to require a setting to first have another one enabled/disabled by the user.</p>"},{"location":"Client/UI/OptionsSettings/#events","title":"Events","text":"<p>nil </p>"},{"location":"Documentation/Terminology/","title":"Terminology","text":""},{"location":"Documentation/Terminology/#terminology","title":"Terminology","text":"<p>This page contains definitions for various terms commonly used throughout the docs.</p>"},{"location":"Documentation/Terminology/#internal","title":"Internal","text":"<p>Refers to classes, methods or other resources that are only intended to be used directly by Epip itself, and not any mods that have it as a dependency.</p> <p>Also see visiblity.</p>"},{"location":"Documentation/Terminology/#visibility","title":"Visibility","text":"<p>Refers to visibility of class methods and fields in the OOP sense.</p> <p>In Epip, fields prefixed with <code>_</code> (single underscore) are considered \"private\" and meant only for internal use within the class, while fields prefixed with <code>__</code> (two underscores) are considered \"protected\" and meant only for use within the class hierarchy. In both cases, these fields are not part of the public API and are not meant to be used within your own mod, and are subject to change without notice.</p> <p>Lua does not have an explicit concept of visibility for table fields. Though it is possible to create \"private\" fields via upvaluing, this is avoided in Epip due to readability issues as well as the fact that private visibility is arguably a bad practice in modding - it actively prevents other modders from patching parts of your mod to achieve compatibility / interoperability. For the same reason, local functions and variables are avoided, and only used for niche cases.</p> <p>As such, visibility in Epip is merely a suggestion. It is possible to use/override invisible fields as a last measure if you truly deem it necessary, however it's a better idea to first contact the Epip team to see if the public API can be adjusted to your needs, as that could lead to cleaner solutions that would better satisfy current and future developers.</p>"},{"location":"Documentation/Terminology/#invisible-fields","title":"Invisible Fields","text":"<p>Refers to usage of <code>private</code>, <code>protected</code> or <code>package</code> fields in a context where they trigger the <code>invisible</code> diagnostic.</p>"},{"location":"Documentation/Terminology/#namespacing","title":"Namespacing","text":"<p>As is the case for modding the base game, numerous resources in Epip use string identifiers which in turn can lead to collisions. Namespacing refers to prefixing such identifiers to avoid accidentally overwriting resources from other Epip mods.</p> <p>The Library and Feature classes contain wrapper methods for certain core libraries to automatically prefix identifiers used.</p> <p>Most methods in Epip do not throw nor warn when you attempt to register some resource under an ID already in use - this is by design so as to allow easy overriding.</p>"},{"location":"Documentation/Client/Pointer/","title":"Pointer","text":""},{"location":"Documentation/Client/Pointer/#pointer","title":"Pointer","text":"<p>The <code>Pointer</code> library contains methods related to the pointer for the game world; used to interact with game objects and move around.</p> <p>It's primarily a wrapper around <code>Ext.UI.GetPickingState()</code>. In addition to methods to quickly fetch its entities, it offers events for when they change (when the user starts/stops hovering over a new entity).</p> <p></p>"},{"location":"Documentation/Client/Pointer/#pointerlib-class","title":"PointerLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Client/Pointer/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Client/Pointer/#hovercharacterchanged-event","title":"HoverCharacterChanged (event)","text":"<p>@field Character <code>EclCharacter?</code></p>"},{"location":"Documentation/Client/Pointer/#hovercharacter2changed-event","title":"HoverCharacter2Changed (event)","text":"<p>Fired when the corpse character over the pointer changes.</p> <p>@field Character <code>EclCharacter?</code></p>"},{"location":"Documentation/Client/Pointer/#hoveritemchanged-event","title":"HoverItemChanged (event)","text":"<p>@field Item <code>EclItem?</code></p>"},{"location":"Documentation/Client/Pointer/#hoverentitychanged-event","title":"HoverEntityChanged (event)","text":"<p>@field Entity <code>Entity?</code></p>"},{"location":"Documentation/Client/Pointer/#dragdropstatechanged-event","title":"DragDropStateChanged (event)","text":"<p>Fired when a player starts or ends a drag drop. </p> <p>@field State <code>DragDropManagerPlayerDragInfo?</code> `nil` if the player stopped dragging.</p> <p>@field PlayerIndex <code>integer</code></p>"},{"location":"Documentation/Client/Pointer/#methods","title":"Methods","text":""},{"location":"Documentation/Client/Pointer/#getcurrentcharacter","title":"GetCurrentCharacter","text":"<pre><code>function PointerLib.GetCurrentCharacter(playerIndex, includeDead) -- (Client-only)\n-&gt; EclCharacter?\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p> <p>@param includeDead <code>boolean?</code> Defaults to false.</p>"},{"location":"Documentation/Client/Pointer/#getcurrententity","title":"GetCurrentEntity","text":"<pre><code>function PointerLib.GetCurrentEntity(playerIndex) -- (Client-only)\n-&gt; Entity?\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#getcurrentitem","title":"GetCurrentItem","text":"<pre><code>function PointerLib.GetCurrentItem(playerIndex) -- (Client-only)\n-&gt; EclItem?\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#getdragdropstate","title":"GetDragDropState","text":"<pre><code>function PointerLib.GetDragDropState(playerIndex) -- (Client-only)\n-&gt; DragDropManagerPlayerDragInfo\n</code></pre> <p>Returns the drag-drop system state for a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#getdraggeditem","title":"GetDraggedItem","text":"<pre><code>function PointerLib.GetDraggedItem(playerIndex) -- (Client-only)\n-&gt; EclItem?\n</code></pre> <p>Returns the item being dragged by a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#getdraggedskill","title":"GetDraggedSkill","text":"<pre><code>function PointerLib.GetDraggedSkill(playerIndex) -- (Client-only)\n-&gt; string? -- Can be an action as well.\n</code></pre> <p>Returns the skill being dragged by a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#getwalkableposition","title":"GetWalkablePosition","text":"<pre><code>function PointerLib.GetWalkablePosition(playerIndex) -- (Client-only)\n-&gt; Vector3D\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#getworldposition","title":"GetWorldPosition","text":"<pre><code>function PointerLib.GetWorldPosition(playerIndex) -- (Client-only)\n-&gt; Vector3D\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Client/Pointer/#isdragging","title":"IsDragging","text":"<pre><code>function PointerLib.IsDragging(playerIndex) -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the player's cursor is dragging anything.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Introduction/","title":"Introduction","text":""},{"location":"Documentation/Client/UI/Generic/Introduction/#generic","title":"Generic","text":"<p>Generic is a framework for creating UIs using just lua scripting. It functions by instancing a special .swf with various types of elements implemented that you can then interface with from lua.</p> <p>It offers various advantages over traditional UI creation:</p> <ul> <li>No fiddling with flash: UI creation with Generic uses purely lua. You do not need to touch or know anything about flash files.</li> <li>Extendability and moddability: UIs made with Generic, along with their elements, are exposed to all mods; any script can hook these UIs to add elements to them or modify them, something not possible with .swf UIs.</li> <li>Fast prototyping: all you need to do to test your changes to your UIs is to reload lua. There is no requirement for external tools nor any exporting process.</li> <li>Reusability: \"prefabs\" with custom APIs can be created to work with groups of elements in a reusable manner across different UIs, and offered to mods that use yours as a dependency.</li> </ul> <p>Generic powers every UI in Epip made after its inception, including:</p> <ul> <li>Quick Examine</li> <li>Hotbar Groups</li> <li>Save/Load Overlay</li> <li>Debug Display</li> <li>Debug Menu / Control Panel</li> <li>Fishing minigame</li> <li>Quick Find</li> <li>Settings menu (partially)</li> <li>Bedazzled (match 3 minigame)</li> </ul>"},{"location":"Documentation/Client/UI/Generic/Introduction/#getting-started","title":"Getting started","text":"<p>Call <code>Generic.Create()</code> to create a new UI.</p> <pre><code>local Generic = Client.UI.Generic\nlocal ExampleUI = Generic.Create(\"PIP_ExampleUI\")\n</code></pre> <p>Generic UIs are composed of elements; these can be interactable controls (such as buttons), visual elements (backgrounds, icons) and containers (lists and grids of elements).</p> <p>You can add elements to your UI by calling <code>CreateElement()</code>:</p> <pre><code>-- Creates a tiled background element.\n-- All elements must have a unique string ID.\nlocal background = ExampleUI:CreateElement(\"MyBackground\", \"GenericUI_Element_TiledBackground\")\n</code></pre> <p>Elements are lua objects with methods and events to interface with them - all elements share basic getters/setters for properties like position, and offer additional calls based on their intended purpose.</p> <pre><code>-- Set the background to solid black with 400x400 size.\nbackground:SetBackground(\"Black\", 400, 400)\n</code></pre> <p>Parenting elements is supported. Parented elements use positioning relative to their parent, as would be in regular flash, and inherit certain other properties like visibility. To create child elements, you can pass an element (or its ID) as a third parameter to <code>CreateElement()</code> or call <code>AddChild()</code> on an existing element reference:</p> <pre><code>-- Adds a button\nlocal closeButton = background:AddChild(\"CloseButton\", \"GenericUI_Element_Button\")\ncloseButton:SetType(\"Close\") -- Sets the appearance\n-- Put the button in the top right corner of the parent element (MyBackground) with a 20px offset on both axes\ncloseButton:SetPositionRelativeToParent(\"TopRight\", -20, 20)\n</code></pre> <p>All elements implement basic mouse-related events (entering, exiting, press, release) as well as high-level ones based on the element's purpose.</p> <p>Text is available via the <code>GenericUI_Element_Text</code> element:</p> <pre><code>local header = background:AddChild(\"MyHeader\", \"GenericUI_Element_Text\")\nheader:SetText(Text.Format(\"My UI\", {Color = Color.BLACK}))\nheader:SetSize(400, 50)\nheader:SetPositionRelativeToParent(\"Top\", 0, 60) -- Sets the header's position to the top center of the panel, with a 60px offset from the top\n</code></pre> <pre><code>-- \"Pressed\" event is akin to the general MouseUp event, but only fires if the button is not disabled.\ncloseButton.Events.Pressed:Subscribe(function (_)\n-- Close the UI when the button is pressed\nExampleUI:Hide()\nend)\n</code></pre> <p>Generic UI elements have no lifetime restrictions and references to them may be stored and used at any time. You can store them within your UI table for convenient access, but this is not a necessity if moddability is a concern - your UI, as well as all of its elements, are always available to other modders through their string IDs. These IDs are valid within your UI only and therefore need not be prefixed.</p> <pre><code>-- Other modders can access your UI by its string ID\nlocal yourUI = Generic.GetInstance(\"PIP_ExampleUI\")\nlocal yourAcceptButton = yourUI:GetElementByID(\"AcceptButton\")\n-- And they may interface with them just as you would\nyourUI:CreateElement(\"MyNewElement\", \"GenericUI_Element_IggyIcon\")\nyourAcceptButton:SetVisible(false)\n</code></pre> <p>Internally, Generic UIs are no different from regular UIs - there is a <code>UIObject</code> for each UI, and its elements exist within it as flash MovieClips. Access to all these is available.</p> <pre><code>-- Direct access to UIObject and MovieClip is available\nprint(ExampleUI:GetUI())\nprint(acceptButton:GetMovieClip())\n-- GenericUI instances inherit from the same class as built-in UIs in Epip\nprint(ExampleUI:IsFlagged(\"OF_PlayerInput1\"))\n</code></pre> <p>The code in this section is from an example UI in <code>Epip/Examples/GenericUI.lua</code>.</p> <p>Warning</p> <p>Though accessing an element's MovieClip is possible, its purpose is for internal &amp; debug usage only. Interfacing with elements outside of their public APIs is not supported and any such use is prone to breaking in future releases with no warning.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#elements","title":"Elements","text":"<p>The following element types are implemented:</p> <ul> <li>Empty: an element with no visual presence. Ideal for anchoring or as a root for custom container prefabs.</li> <li>Texture: displays a texture resource.</li> <li>Text: displays a text field, optionally user-editable.</li> <li>IggyIcon: displays an Iggy icon - an icon from a texture atlas.</li> <li>Color: displays a solid color.</li> <li>ComboBox: implements a combobox (dropdown).</li> <li>Slider: implements a slider.</li> <li>Slot: implements a hotbar-like slot, with cooldown/refresh animations. See <code>GenericUI_Prefab_HotbarSlot</code> for a ready-to-use inventory-like slot.</li> </ul> <p>Worthy of distinction are the following \"container/list\" elements, whose purpose is to position their children in a specific layout:</p> <ul> <li>VerticalList: positions elements along the vertical axis. Equivalent to Larian's <code>listDisplay</code>.</li> <li>HorizontalList: positions elements along the horizontal axis. Equivalent to Larian's <code>horizontalList</code>.</li> <li>ScrollList: positions elements along the vertical axis and has a set frame size; overflowing elements can be accessed by scrolling the viewport with a scrollbar. Equivalent to Larian's <code>scrollList</code>.</li> <li>Grid: positions elements in a grid composed of rows and columns of elements. Equivalent to Larian's <code>grid</code>.</li> </ul> <p>You can read up about them on their dedicated pages.</p> <p>The following element types also exist, but are deprecated in favor of Prefab-based solutions:</p> <ul> <li>Button: replaced by <code>GenericUI_Prefab_Button</code>.</li> <li>StateButton: a button with 2 states (inactive/active). Replaced by <code>GenericUI_Prefab_Button</code>.</li> <li>Divider: replaced by Texture element and SlicedTexture prefab.</li> <li>TiledBackground: a 9-sliced resizable background. Replaced by SlicedTexture.</li> </ul> <p>These elements continue to exist for backwards compatibility, but their usage in newer UIs is discouraged.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#prefabs","title":"Prefabs","text":"<p>Prefabs are classes which initialize and manage groups of elements; they allow complex pieces of UIs to be reused efficiently, being analogous to ex. Fragments in Android UI development.</p> <p>Typically, prefabs have a public constructor which takes UI, ID and parent parameters, creates &amp; initializes its elements, and returns an instance of the prefab class.</p> <p>Prefabs implement high-level, contextual APIs to interact with their elements indirectly - ideally the user should not need to consider how the prefab is structured in terms of actual elements; the prefab manages its hierarchy of elements.</p> <p>The <code>Spinner</code> prefab for example implements a spinner form element; the user may use the -/+ buttons to decrement/increment a value, and that value can be queried using <code>:GetValue()</code> on the prefab instance. This Spinner is composed of Text and Button elements, as well as a background.</p> <p></p> <p>A prefab in itself is not an element, but may implement the <code>Elementable</code> interface to allow calling Element methods on them, by specifying the target element (most commonly the root of the prefab).</p> <p>The <code>Stylable</code> interface allows customizing the appearance of prefabs through styles consisting of textures, sounds, and other assets/parameters. Each prefab using this interface declares its own style class with possible customizations. If a prefab does not use this system, you can of course always tweak the elements yourself directly.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#limitations-considerations-and-observations","title":"Limitations, considerations and observations","text":""},{"location":"Documentation/Client/UI/Generic/Introduction/#sprite-based-animations","title":"Sprite-based animations","text":"<p>There is currently no convenient way of creating animations that involve multiple animation sprites. Two solutions have been theorized, but their practicality is untested:</p> <ol> <li>Animate the Texture element: this appears to be the most straightforward option (and already possible); the obvious inconvenience being the need to import every frame of your animation as a separate texture resource. The performance of repeatedly calling <code>:SetTexture()</code> has also not been investigated.</li> <li>Implement a custom element: it is theoretically possible to implement a custom flash element in Generic, importing its script and Sprite from another <code>.swf</code>. You could setup your animation in the <code>.swf</code> as you'd normally do in flash and create a simple element to instantiate it from Generic. This approach has the massive problem of flash library slots being limited; there's only a few available slots for custom libraries, and they would have to be registered in advance within Generic's swf (ex. use <code>ImportAssets</code> to import \"Custom1.swf\", \"Custom2.swf\", and have the user override those to provide their custom elements).</li> </ol>"},{"location":"Documentation/Client/UI/Generic/Introduction/#stutters-when-creating-hundreds-of-elements-at-a-time","title":"Stutters when creating hundreds of elements at a time","text":"<p>Creating MovieClips programmatically appears to be the major performance bottleneck in Generic/Iggy. UIs that instantiate hundreds of elements at once will likely see noticeable stutter during that process. The performance of these UIs afterwards is normal.</p> <p>The major UIs that suffer from this are inventory-like UIs, due to the Slot element being particularly complex and consisting of multiple parts. In v1066, measures have been taken to minimize the amount of DisplayObjects created - certain aspects of Slots such as the cooldown animation are now only created on-demand, resulting in a 30-35% performance improvement when creating Slot elements that do not use all of its features.</p> <p>No further possible major improvements are known. It's worth noting that  the problems lies within class instantiation and not Generic itself; vanilla UIs such as PartyInventory and Craft experience similar stutters when needing to create a ton of slots/recipes.</p> <p>A possible workaround for this is to create your elements during the load screen, however this will inflict the resulting \"stutter\" as extra loading time for the user. Epip prefers initializing UIs on-demand; that is, the UI basically doesn't exist until it is necessary.</p> <p>When working with UIs where this is a concern, it is recommended to implement a pooling system to reuse elements. Avoid clearing and re-creating lists of hundreds of elements - instead reuse existing instances.</p> <p>QuickInventory and Codex sections that inherit from <code>Features.Codex.Sections.Grid</code> are good examples of implementing pooling for an inventory-like UI, massively improving responsiveness after the creation of the elements.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#testing","title":"Testing","text":"<p>Since user interaction in Generic is driven through events in Lua, it's theoretically possible to implement instrumented tests for UIs by invoking those events to spoof user interaction.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#wrong-container-size-when-using-prefabs","title":"Wrong container size when using prefabs","text":"<p>Container size is by default recalculated upon adding an element; in the case of adding prefabs, this happens when the root of the prefab is added. As such, the container will use the size of the first element created by the prefab, before any other element creation or calls. To address positioning issues, you should call <code>RepositionElements()</code> on the container after all elements are added and initialized. Disabling auto-positioning with <code>SetRepositionAfterAdding()</code> in this case might improve performance.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#overlay-uis","title":"Overlay UIs","text":"<p>Though overlay UIs are an overall good solution to extending vanilla UIs, regular ones made in Flash still have moddability issues. Two mods overlaying the same part of a UI is gonna result in a visual conflict with both of them overlapping.</p> <p>The recommended solution for this problem in Generic (assuming both mods are using it) is to insert elements of one overlay UI onto the other as a compatibility measure.</p> <p>If you have mod A and B both with an overlay UI that extends a similar area of the vanilla UI, mod B could check for mod A being loaded and if it is, instead of creating its own overlay UI, mod B could add its own overlay elements into the Generic UI of mod A.</p> <p>This of course only works reliably if mod A offers a stable UI structure, which is why it's not recommended to change element IDs or keys of element references in the UI table in new versions of your mod.</p> <p>With that in mind there is little reason to create overlay UIs for Generic UIs. It is far simpler and reliable to simply insert your elements within the UI itself.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#colored-translucency-in-textures","title":"Colored translucency in textures","text":"<p>Textures with low alpha and colored (non-grayscale) areas just don't appear to render correctly. The low-alpha areas will appear much brighter than expected and may exhibit strange blending with UIs below it. DDS color format and compression chosen doesn't seem to have an effect on this; it is suspected to be either an Iggy bug or a bug within the texture-to-bitmap engine function.</p> <p></p> <p>Textures with black dropshadows or brownish backgrounds like the one in the example screenshot appear fine. The exact alpha+color combinations that cause this issue are unknown.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#genericui-class","title":"GenericUI Class","text":"<p>Inherits from <code>Feature</code>.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#methods","title":"Methods","text":""},{"location":"Documentation/Client/UI/Generic/Introduction/#create","title":"Create","text":"<pre><code>function GenericUI.Create(id, layer)\n-&gt; GenericUI_Instance\n</code></pre> <p>@param id <code>string</code></p> <p>@param layer <code>integer?</code> Defaults to `DEFAULT_LAYER`.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#getinstance","title":"GetInstance","text":"<pre><code>function GenericUI.GetInstance(id)\n-&gt; GenericUI_Instance\n</code></pre> <p>Returns the instance of a Generic UI by its identifier.</p> <p>@param id <code>string|integer</code> String ID of the UI or its TypeID.</p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#getprefab","title":"GetPrefab","text":"<pre><code>function GenericUI.GetPrefab(className)\n-&gt; T\n</code></pre> <p>@param className <code>`T`|GenericUI_PrefabClass</code></p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#inherit","title":"Inherit","text":"<pre><code>function GenericUI.Inherit(tbl1, tbl2)\n</code></pre> <p>@param tbl1 <code>table</code></p> <p>@param tbl2 <code>table</code></p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#registerelementtype","title":"RegisterElementType","text":"<pre><code>function GenericUI.RegisterElementType(elementType, elementTable)\n</code></pre> <p>@param elementType <code>string</code></p> <p>@param elementTable <code>GenericUI_Element</code></p>"},{"location":"Documentation/Client/UI/Generic/Introduction/#registerprefab","title":"RegisterPrefab","text":"<pre><code>function GenericUI.RegisterPrefab(id, prefab)\n</code></pre> <p>Registers a prefab.</p> <p>@param id <code>string</code></p> <p>@param prefab <code>table</code></p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Button/","title":"Button","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Button/#button","title":"Button","text":"<p>Deprecated</p> <p>This element has been deprecated in favor of a Prefab-based solution. See <code>GenericUI_Prefab_Button</code>. The element continues to be available for backwards compatibility.</p> <p>The <code>GenericUI_Element_Button</code> button element implements a typical button form element. It may be disabled (preventing user interaction) and will fire a contextual event if it is activated while not disabled.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#genericui_element_button-class","title":"GenericUI_Element_Button Class","text":"<p>Inherits from <code>GenericUI_Element</code>.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#methods","title":"Methods","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Button/#isenabled","title":"IsEnabled","text":"<pre><code>function GenericUI_Element_Button:IsEnabled()\n-&gt; boolean\n</code></pre> <p>Returns whether the button is enabled.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#setenabled","title":"SetEnabled","text":"<pre><code>function GenericUI_Element_Button:SetEnabled(enabled)\n</code></pre> <p>Sets the button's enabled state. Enabled buttons are interactable.</p> <p>@param enabled <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#settext","title":"SetText","text":"<pre><code>function GenericUI_Element_Button:SetText(text, textY)\n</code></pre> <p>Sets the button's text.</p> <p>@param text <code>string</code></p> <p>@param textY <code>number?</code> Vertical offset for the text. Use for centering.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#settype","title":"SetType","text":"<pre><code>function GenericUI_Element_Button:SetType(buttonType)\n</code></pre> <p>Sets the button's visuals.</p> <p>@param buttonType <code>GenericUI_Element_Button_Type</code></p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Color/","title":"Color","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Color/#color","title":"Color","text":"<p>The <code>GenericUI_Element_Color</code> element displays a solid color with full opacity.</p> <p>It's intended for displaying single colors, useful for solid-color backgrounds or as part of color-related widgets that might need to visualize them.</p> <p>Its performance for \"painting\" textures dynamically is untested.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Color/#genericui_element_color-class","title":"GenericUI_Element_Color Class","text":"<p>Inherits from <code>GenericUI_Element</code>.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Color/#methods","title":"Methods","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Color/#setcolor","title":"SetColor","text":"<pre><code>function GenericUI_Element_Color:SetColor(color)\n</code></pre> <p>Sets the color shown by the element.</p> <p>@param color <code>RGBColor</code></p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/","title":"ComboBox","text":""},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#combobox","title":"ComboBox","text":"<p>The <code>GenericUI_Element_ComboBox</code> element implements a combobox form element. The user may change its value to any labelled one from a predefined list.</p> <p>You can set its options with <code>SetOptions()</code> or <code>AddOption()</code>. Comboboxes contain no options by default.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#genericui_element_combobox-class","title":"GenericUI_Element_ComboBox Class","text":"<p>Inherits from <code>GenericUI_Element</code>.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#methods","title":"Methods","text":""},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#addoption","title":"AddOption","text":"<pre><code>function GenericUI_Element_ComboBox:AddOption(id, label)\n</code></pre> <p>Adds an option to the combobox.</p> <p>@param id <code>string</code></p> <p>@param label <code>string</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#clearoptions","title":"ClearOptions","text":"<pre><code>function GenericUI_Element_ComboBox:ClearOptions()\n</code></pre> <p>Removes all options from the combobox.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#selectoption","title":"SelectOption","text":"<pre><code>function GenericUI_Element_ComboBox:SelectOption(id)\n</code></pre> <p>Sets the currently selected option.</p> <p>@param id <code>string</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#setopenupwards","title":"SetOpenUpwards","text":"<pre><code>function GenericUI_Element_ComboBox:SetOpenUpwards(openUpwards)\n</code></pre> <p>Sets whether the combobox should open upwards, or downwards (default)</p> <p>Use to determine the orientation of the options selector when opened.</p> <p>@param openUpwards <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#setoptions","title":"SetOptions","text":"<pre><code>function GenericUI_Element_ComboBox:SetOptions(options)\n</code></pre> <p>Sets the options for the combobox. Equivalent to calling <code>ClearOptions()</code> then <code>AddOption()</code> for each option in the list passed.</p> <p>@param options <code>GenericUI_Element_ComboBox_Option[]</code></p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/","title":"Element","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Element/#element","title":"Element","text":"<p><code>GenericUI_Element</code> is the base class that all built-in elements inherit from.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#genericui_element-class","title":"GenericUI_Element Class","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Element/#methods","title":"Methods","text":""},{"location":"Documentation/Client/UI/Generic/Elements/Element/#addchild","title":"AddChild","text":"<pre><code>function GenericUI_Element:AddChild(id, elementType)\n-&gt; `T`\n</code></pre> <p>@param id <code>string</code></p> <p>@param elementType <code>`T`|GenericUI_ElementType</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#destroy","title":"Destroy","text":"<pre><code>function GenericUI_Element:Destroy()\n</code></pre>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getchildren","title":"GetChildren","text":"<pre><code>function GenericUI_Element:GetChildren()\n-&gt; GenericUI_Element[]\n</code></pre> <p>Returns the children of the element.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getheight","title":"GetHeight","text":"<pre><code>function GenericUI_Element:GetHeight(considerOverrides)\n-&gt; number\n</code></pre> <p>Returns the height of the element.</p> <p>@param considerOverrides <code>boolean?</code> If `true`, height overrides will be considered. Defaults to `true`.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getmovieclip","title":"GetMovieClip","text":"<pre><code>function GenericUI_Element:GetMovieClip()\n-&gt; FlashMovieClip\n</code></pre> <p>Get the movie clip of this element.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getparent","title":"GetParent","text":"<pre><code>function GenericUI_Element:GetParent()\n-&gt; GenericUI_Element\n</code></pre> <p>Returns the parent element.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getposition","title":"GetPosition","text":"<pre><code>function GenericUI_Element:GetPosition()\n-&gt; number, number -- X and Y coordinates in local space.\n</code></pre>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getrawheight","title":"GetRawHeight","text":"<pre><code>function GenericUI_Element:GetRawHeight()\n-&gt; number\n</code></pre> <p>Returns the height of the element without considering its children.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getrawsize","title":"GetRawSize","text":"<pre><code>function GenericUI_Element:GetRawSize()\n-&gt; Vector2\n</code></pre> <p>Gets the size of the element without considering its children.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getrawwidth","title":"GetRawWidth","text":"<pre><code>function GenericUI_Element:GetRawWidth()\n-&gt; number\n</code></pre> <p>Returns the width of the element without considering its children.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getscale","title":"GetScale","text":"<pre><code>function GenericUI_Element:GetScale()\n-&gt; Vector2\n</code></pre> <p>Returns the scale of the element.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getsize","title":"GetSize","text":"<pre><code>function GenericUI_Element:GetSize(considerOverrides)\n-&gt; Vector2\n</code></pre> <p>Returns the size of the element.</p> <p>@param considerOverrides <code>boolean?</code> If `true`, width/height overrides will be considered. Defaults to `true`.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getsizeoverride","title":"GetSizeOverride","text":"<pre><code>function GenericUI_Element:GetSizeOverride()\n-&gt; Vector2?\n</code></pre> <p>Returns the size override of the element, if any.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getwidth","title":"GetWidth","text":"<pre><code>function GenericUI_Element:GetWidth(considerOverrides)\n-&gt; number\n</code></pre> <p>Returns the width of the element.</p> <p>@param considerOverrides <code>boolean?</code> If `true`, width overrides will be considered. Defaults to `true`.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#move","title":"Move","text":"<pre><code>function GenericUI_Element:Move(x, y)\n</code></pre> <p>Moves the element a certain amount of pixels from its current position.</p> <p>@param x <code>number</code></p> <p>@param y <code>number</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#registerlistener","title":"RegisterListener","text":"<pre><code>function GenericUI_Element:RegisterListener(eventType, handler)\n</code></pre> <p>@param eventType <code>string</code></p> <p>@param handler <code>function</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#removechild","title":"RemoveChild","text":"<pre><code>function GenericUI_Element:RemoveChild(element)\n</code></pre> <p>@param element <code>GenericUI_Element</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#removescrollrect","title":"RemoveScrollRect","text":"<pre><code>function GenericUI_Element:RemoveScrollRect()\n</code></pre> <p>Removes the scroll rect from the element, if any.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setalpha","title":"SetAlpha","text":"<pre><code>function GenericUI_Element:SetAlpha(alpha, affectChildren)\n</code></pre> <p>@param alpha <code>number</code></p> <p>@param affectChildren <code>boolean?</code> Defaults to not affecting children alpha.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setasdraggablearea","title":"SetAsDraggableArea","text":"<pre><code>function GenericUI_Element:SetAsDraggableArea()\n</code></pre> <p>Sets this element as the area for dragging the entire UI.</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setcenterinlists","title":"SetCenterInLists","text":"<pre><code>function GenericUI_Element:SetCenterInLists(center)\n</code></pre> <p>Sets whether the element should be horizontally centered in VerticalList and ScrollList.</p> <p>@param center <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setchildindex","title":"SetChildIndex","text":"<pre><code>function GenericUI_Element:SetChildIndex(child, index)\n</code></pre> <p>Sets the Z-order index of a child element.</p> <p>@param child <code>string|GenericUI_Element</code></p> <p>@param index <code>integer</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setmousechildren","title":"SetMouseChildren","text":"<pre><code>function GenericUI_Element:SetMouseChildren(enabled)\n</code></pre> <p>@param enabled <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setmouseenabled","title":"SetMouseEnabled","text":"<pre><code>function GenericUI_Element:SetMouseEnabled(enabled)\n</code></pre> <p>@param enabled <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setposition","title":"SetPosition","text":"<pre><code>function GenericUI_Element:SetPosition(x, y)\n</code></pre> <p>@param x <code>number</code></p> <p>@param y <code>number</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setpositionrelativetoparent","title":"SetPositionRelativeToParent","text":"<pre><code>function GenericUI_Element:SetPositionRelativeToParent(position, horizontalOffset, verticalOffset)\n</code></pre> <p>Sets the position of the element relative to its parent.</p> <p>@param position <code>GenericUI_Element_RelativePosition</code></p> <p>@param horizontalOffset <code>number?</code></p> <p>@param verticalOffset <code>number?</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setrotation","title":"SetRotation","text":"<pre><code>function GenericUI_Element:SetRotation(degrees)\n</code></pre> <p>@param degrees <code>number</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setscale","title":"SetScale","text":"<pre><code>function GenericUI_Element:SetScale(scale)\n</code></pre> <p>Sets the scale of the element.</p> <p>@param scale <code>Vector2</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setscrollrect","title":"SetScrollRect","text":"<pre><code>function GenericUI_Element:SetScrollRect(position, size)\n</code></pre> <p>Sets the scroll rect of the element.</p> <p>@param position <code>Vector2</code></p> <p>@param size <code>Vector2</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setsize","title":"SetSize","text":"<pre><code>function GenericUI_Element:SetSize(width, height)\n</code></pre> <p>@param width <code>number</code></p> <p>@param height <code>number</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setsizeoverride","title":"SetSizeOverride","text":"<pre><code>function GenericUI_Element:SetSizeOverride(width, height)\n</code></pre> <p>Sets the size override, used to override the element size within list-like elements.</p> <p>@param width <code>number</code></p> <p>@param height <code>number</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#settooltip","title":"SetTooltip","text":"<pre><code>function GenericUI_Element:SetTooltip(tooltipType, tooltip)\n</code></pre> <p>Sets the tooltip of the element.</p> <p>@param tooltipType <code>TooltipLib_TooltipType</code></p> <p>@param tooltip <code>any</code> TODO document</p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setvisible","title":"SetVisible","text":"<pre><code>function GenericUI_Element:SetVisible(visible)\n</code></pre> <p>@param visible <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#tween","title":"Tween","text":"<pre><code>function GenericUI_Element:Tween(tween)\n</code></pre> <p>@param tween <code>GenericUI_ElementTween</code></p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/","title":"Button","text":""},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#button","title":"Button","text":"<p>The <code>GenericUI_Prefab_Button</code> prefab implements a button; an element that can be clicked and visually reacts to user interaction.</p> <p>This prefab is intended to replace the built-in <code>Button</code> and <code>StateButton</code> elements. It's major advantage is easier styling and maintainability, as there is no flash code directly involved.</p> <p>Buttons implement <code>I_Stylable</code>, which allows customizing their group of textures and other visual assets to use. Styles can be registered via <code>:RegisterStyle()</code> and fetched using <code>:GetStyle()</code>.</p> <p>StateButtons (buttons that toggle between active/inactive states) are created by supplying and additional style to use for the active state, via <code>:SetActiveStyle()</code>.</p> <p>Epip has many premade button styles. You may browse them via <code>GenericUITextures</code> UI.</p> <p>The button prefab additionally supports adding an IggyIcon to it with <code>:SetIcon()</code>.</p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#genericui_prefab_button-class","title":"GenericUI_Prefab_Button Class","text":"<p>Inherits from <code>GenericUI_Prefab, GenericUI_I_Stylable, GenericUI_I_Elementable</code>.</p> <p>Prefab for a button.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#pressed-event","title":"Pressed (event)","text":"<p>Fires only if the button is enabled.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#rightclicked-event","title":"RightClicked (event)","text":"<p>An event object with no parameters.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#methods","title":"Methods","text":""},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#create","title":"Create","text":"<pre><code>function GenericUI_Prefab_Button.Create(ui, id, parent, style)\n-&gt; GenericUI_Prefab_Button\n</code></pre> <p>@param ui <code>GenericUI_Instance</code></p> <p>@param id <code>string</code></p> <p>@param parent <code>GenericUI_Element|string</code></p> <p>@param style <code>GenericUI_Prefab_Button_Style</code></p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#geticonelement","title":"GetIconElement","text":"<pre><code>function GenericUI_Prefab_Button:GetIconElement()\n-&gt; GenericUI_Element_IggyIcon?\n</code></pre> <p>Returns the icon element, if any.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#getlabelelement","title":"GetLabelElement","text":"<pre><code>function GenericUI_Prefab_Button:GetLabelElement()\n-&gt; GenericUI_Prefab_Text\n</code></pre> <p>Returns the label element.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#getrootelement","title":"GetRootElement","text":"<pre><code>function GenericUI_Prefab_Button:GetRootElement()\n</code></pre> <p>@override</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#isactivated","title":"IsActivated","text":"<pre><code>function GenericUI_Prefab_Button:IsActivated()\n-&gt; boolean\n</code></pre> <p>Returns whether the button is activated.</p> <p>Will throw if the button is not a state button.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#isenabled","title":"IsEnabled","text":"<pre><code>function GenericUI_Prefab_Button:IsEnabled()\n-&gt; boolean\n</code></pre> <p>Returns whether the button is enabled.</p> <p>Disabled buttons do not fire the Pressed event.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setactivated","title":"SetActivated","text":"<pre><code>function GenericUI_Prefab_Button:SetActivated(activated)\n</code></pre> <p>Sets the activated state of the button.</p> <p>Will throw if the button is not a state button.</p> <p>@param activated <code>any</code></p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setactivestyle","title":"SetActiveStyle","text":"<pre><code>function GenericUI_Prefab_Button:SetActiveStyle(style)\n</code></pre> <p>Sets a style to be used while the button is active.</p> <p>This cannot be used to revert the button to a normal one if it was already a state button.</p> <p>@param style <code>GenericUI_Prefab_Button_Style</code> If background fields are not assigned, the normal style will be used as fallback.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setenabled","title":"SetEnabled","text":"<pre><code>function GenericUI_Prefab_Button:SetEnabled(enabled)\n</code></pre> <p>Sets the enabled state of the button.</p> <p>@param enabled <code>boolean</code></p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#seticon","title":"SetIcon","text":"<pre><code>function GenericUI_Prefab_Button:SetIcon(icon, size, relativePosition, offset)\n</code></pre> <p>Sets an icon for the button.</p> <p>@param icon <code>icon</code></p> <p>@param size <code>Vector2</code></p> <p>@param relativePosition <code>GenericUI_Element_RelativePosition?</code> Defaults to `\"Center\"`.</p> <p>@param offset <code>Vector2?</code> Defaults to `(0, 0)`.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setlabel","title":"SetLabel","text":"<pre><code>function GenericUI_Prefab_Button:SetLabel(label, align)\n</code></pre> <p>Sets the label of the button.</p> <p>@param label <code>string</code> Set to an empty string to hide the label.</p> <p>@param align <code>GenericUI_Element_Text_Align?</code> Defaults to `\"Center\"`.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#settooltip","title":"SetTooltip","text":"<pre><code>function GenericUI_Prefab_Button:SetTooltip(type, tooltip)\n</code></pre> <p>Sets the tooltip of the element.</p> <p>@param type <code>TooltipLib_TooltipType</code></p> <p>@param tooltip <code>any</code> TODO document</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#__onstylechanged","title":"__OnStyleChanged","text":"<pre><code>---@protected\nfunction GenericUI_Prefab_Button:__OnStyleChanged()\n</code></pre> <p>@override </p> <p></p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#genericui_prefab_button_style-class","title":"GenericUI_Prefab_Button_Style Class","text":"<p>Inherits from <code>GenericUI_I_Stylable_Style</code>.</p> <p>@field IdleTexture <code>TextureLib_Texture</code></p> <p>@field HighlightedTexture <code>TextureLib_Texture</code> If not present, `IdleTexture` will be used instead.</p> <p>@field PressedTexture <code>TextureLib_Texture?</code> If not present, `IdleTexture` will be used instead.</p> <p>@field DisabledTexture <code>TextureLib_Texture?</code> If not present, `IdleTexture` will be used instead.</p> <p>@field Size <code>Vector2?</code> Defaults to texture size.</p> <p>@field Sound <code>string?</code> Sound effect to play when the button is pressed. Defaults to `DEFAULT_SOUND`.</p> <p>@field IdleOverlay <code>TextureLib_Texture?</code></p> <p>@field HighlightedOverlay <code>TextureLib_Texture?</code> If not present, `IdleOverlay` will be used instead.</p> <p>@field PressedOverlay <code>TextureLib_Texture?</code> If not present, `IdleOverlay` will be used instead.</p>"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#methods_1","title":"Methods","text":""},{"location":"Documentation/Global%20Tables/Epip/","title":"Important Tables","text":""},{"location":"Documentation/Global%20Tables/Epip/#epip","title":"Epip","text":"<p>The <code>Epip</code> table mainly serves as a container for Features. It contains methods to register Features as well as libraries and UI tables.</p> <p>Use <code>RegisterFeature()</code> to register and initialize a Feature.</p> <p></p>"},{"location":"Documentation/Global%20Tables/Epip/#epip-class","title":"Epip Class","text":""},{"location":"Documentation/Global%20Tables/Epip/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Global%20Tables/Epip/#beforefeatureinitialization-event","title":"BeforeFeatureInitialization (event)","text":"<p>Fired during feature initialization.</p> <p>@field Feature <code>Feature</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#afterfeatureinitialization-event","title":"AfterFeatureInitialization (event)","text":"<p>Fired during feature initialization.</p> <p>@field Feature <code>Feature</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#methods","title":"Methods","text":""},{"location":"Documentation/Global%20Tables/Epip/#getfeature","title":"GetFeature","text":"<pre><code>function Epip.GetFeature(modTable, id)\n-&gt; Feature|`T`\n</code></pre> <p>@param modTable <code>string</code></p> <p>@param id <code>`T`</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#getfeature_1","title":"GetFeature","text":"<pre><code>function Epip.GetFeature(id)\n-&gt; Feature|`T`\n</code></pre> <p>Overload for fetching features defined in EpipEncounters.</p> <p>@param id <code>`T`</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#initializefeature","title":"InitializeFeature","text":"<pre><code>function Epip.InitializeFeature(modTable, id, feature)\n</code></pre> <p>TODO move to Feature</p> <p>@param modTable <code>string</code></p> <p>@param id <code>string</code></p> <p>@param feature <code>Feature</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#initializelibrary","title":"InitializeLibrary","text":"<pre><code>function Epip.InitializeLibrary()\n</code></pre>"},{"location":"Documentation/Global%20Tables/Epip/#isdevelopermode","title":"IsDeveloperMode","text":"<pre><code>function Epip.IsDeveloperMode(requirePipPoem)\n-&gt; boolean\n</code></pre> <p>@param requirePipPoem <code>boolean?</code> Whether a poem to Pip is required for this call to succeed. Defaults to false (which checks Extender dev mode instead)</p>"},{"location":"Documentation/Global%20Tables/Epip/#registerfeature","title":"RegisterFeature","text":"<pre><code>function Epip.RegisterFeature(modTable, id, feature)\n</code></pre> <p>Registers a feature, initializing its utility metatable and exposing it to other mods via GetFeature(). Should be called outside of any listener, as soon as the table is defined. This will also check for required path overrides and disable the feature if the required mods are not enabled.</p> <p>@param modTable <code>string</code></p> <p>@param id <code>string</code></p> <p>@param feature <code>Feature</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#registerfeatureinitializationlistener","title":"RegisterFeatureInitializationListener","text":"<pre><code>function Epip.RegisterFeatureInitializationListener(modTable, featureID, timing, listener)\n</code></pre> <p>Registers a <code>FeatureInitialization</code> listener for a specific feature.</p> <p>@param modTable <code>modtable</code></p> <p>@param featureID <code>string</code></p> <p>@param timing <code>\"Before\"|\"After\"</code></p> <p>@param listener <code>fun(ev:Epip.Events.FeatureInitialization)</code></p>"},{"location":"Documentation/Global%20Tables/Epip/#savedump","title":"SaveDump","text":"<pre><code>function Epip.SaveDump(obj, opts, fileName)\n</code></pre> <p>@param obj <code>any</code></p> <p>@param opts <code>any?</code></p> <p>@param fileName <code>string?</code></p> <p></p>"},{"location":"Documentation/Global%20Tables/Feature/","title":"Feature","text":""},{"location":"Documentation/Global%20Tables/Feature/#feature","title":"Feature","text":"<p>The <code>Feature</code> class is the base plugin class in Epip, which all end-user features inherit from. It provides a plethora of generic utilities useful for any sort of script, mainly in the form of integrations with other core Epip libraries.</p> <p>Features are the recommended way of working with Epip. You may use as many or as few parts of the class as you want; nothing is forced onto you, however its utilities generally speed up development and reduce boilerplate code by quite a lot.</p> <p>Features offer:</p> <ul> <li>Event and hook system</li> <li>Easy TSK registration</li> <li>Integration with libraries like Settings, Input, with automatic namespacing to prevent ID conflicts</li> <li>\"Disabling\" and re-enabling the feature at runtime</li> <li>Declaring mod dependencies</li> <li>All utilities from the Library class</li> </ul> <p>Features are registered and initialized from the Epip table.</p> <p>Features can be disabled by calling <code>:Disable()</code>, which may also be done automatically based on mod dependencies being missing or the game state being invalid. Disabling a feature has no intrinsic meaning. This does not \"unload\" nor stop their scripting; it's up to you to add <code>:IsEnabled()</code> checks to parts of your scripting that need only run while enabled. This is by design, so as to allow features to be disabled and re-enabled at any time, as well as to allow alternative logic to run while disabled - for example, you might want to show the user a message if they try to use your feature while it's disabled.</p> <p>Consider Features as analogous to GameObjects in Unity (and most other engines): game objects, when disabled, continue to exist in a reduced manner, and their public interfaces remain available (to an extent). Once the game object is re-enabled, its routines resume as normal. Features are intended to work in a similar manner.</p> <p>Features are not just used for scripts targeting the player user; in Epip they are also commonly used to create libraries or wrappers whose use is too specific to be made into a core library. Since Feature inherits from Library, all the tools to create good event-driven libraries remain available. You are encouraged to use Events and Hooks in any kind of feature to facilitate mod interoperability.</p> <p></p>"},{"location":"Documentation/Global%20Tables/Feature/#feature-class","title":"Feature Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Global%20Tables/Feature/#methods","title":"Methods","text":""},{"location":"Documentation/Global%20Tables/Feature/#create","title":"Create","text":"<pre><code>function Feature.Create(modTable, id, feature)\n-&gt; Feature\n</code></pre> <p>WIP. Do not use! Use Epip.RegisterFeature() for the time being.</p> <p>@param modTable <code>string</code></p> <p>@param id <code>string</code></p> <p>@param feature <code>Feature</code></p>"},{"location":"Documentation/Global%20Tables/Feature/#getenabledfunctor","title":"GetEnabledFunctor","text":"<pre><code>function Feature:GetEnabledFunctor()\n-&gt; fun():boolean\n</code></pre> <p>Returns a function that takes no parameters and returns whether the feature is enabled.</p> <p>Intended for use with Event options.</p>"},{"location":"Documentation/Global%20Tables/Feature/#getfeatureid","title":"GetFeatureID","text":"<pre><code>function Feature:GetFeatureID()\n-&gt; string\n</code></pre> <p>Returns the ID of the feature.</p>"},{"location":"Documentation/Global%20Tables/Feature/#getmodtable","title":"GetModTable","text":"<pre><code>function Feature:GetModTable()\n-&gt; modtable\n</code></pre> <p>Returns the mod table of the feature.</p>"},{"location":"Documentation/Global%20Tables/Feature/#getnamespace","title":"GetNamespace","text":"<pre><code>function Feature:GetNamespace()\n-&gt; string\n</code></pre> <p>Returns a string containing the feature's mod table and ID.</p> <p>Ex. <code>\"MyModTable_MyFeature\"</code>.</p>"},{"location":"Documentation/Global%20Tables/Feature/#getsettingvalue","title":"GetSettingValue","text":"<pre><code>function Feature:GetSettingValue(setting)\n</code></pre> <p>@param setting <code>string|SettingsLib_Setting</code></p>"},{"location":"Documentation/Global%20Tables/Feature/#registerinputaction","title":"RegisterInputAction","text":"<pre><code>function Feature:RegisterInputAction(id, action)\n-&gt; InputLib_Action\n</code></pre> <p>Registers an InputLib action.</p> <p>@param id <code>string</code> Will be prefixed with the mod table and feature ID.</p> <p>@param action <code>InputLib_Action</code></p>"},{"location":"Documentation/Global%20Tables/Feature/#registersetting","title":"RegisterSetting","text":"<pre><code>function Feature:RegisterSetting(id, data)\n-&gt; SettingsLib_Setting\n</code></pre> <p>Registers a setting with the feature's module ID.</p> <p>@param id <code>string</code></p> <p>@param data <code>SettingsLib_Setting</code></p>"},{"location":"Documentation/Global%20Tables/Feature/#registertest","title":"RegisterTest","text":"<pre><code>function Feature:RegisterTest(name, func)\n-&gt; Feature_Test\n</code></pre> <p>@param name <code>string</code></p> <p>@param func <code>fun(inst:CoroutineInstance)</code></p>"},{"location":"Documentation/Global%20Tables/Feature/#savesettings","title":"SaveSettings","text":"<pre><code>function Feature:SaveSettings()\n</code></pre>"},{"location":"Documentation/Global%20Tables/Feature/#setsettingvalue","title":"SetSettingValue","text":"<pre><code>function Feature:SetSettingValue(setting, value)\n</code></pre> <p>Sets the value of a setting.</p> <p>@param setting <code>string|SettingsLib_Setting</code></p> <p>@param value <code>any</code></p>"},{"location":"Documentation/Global%20Tables/Feature/#__initialize","title":"__Initialize","text":"<pre><code>---@protected\nfunction Feature:__Initialize()\n</code></pre> <p>Called after the feature is registered.</p> <p>Override to run initialization routines - this is preferable over initializing things at the root of your script, as it is hookable.</p> <p>@virtual</p>"},{"location":"Documentation/Global%20Tables/Feature/#__setup","title":"__Setup","text":"<pre><code>---@protected\nfunction Feature:__Setup()\n</code></pre> <p>Invoked on SessionLoaded if the feature is not disabled.</p> <p>Override to run initialization routines.</p>"},{"location":"Documentation/Global%20Tables/Feature/#__test","title":"__Test","text":"<pre><code>---@protected\nfunction Feature:__Test()\n</code></pre> <p>Invoked on a small delay after SessionLoaded if Epip.IsDeveloperMode(true) is true and the feature is being debugged. </p>"},{"location":"Documentation/Utilities/Artifact/","title":"Artifact","text":""},{"location":"Documentation/Utilities/Artifact/#artifact","title":"Artifact","text":"<p>This library is relevant for Epic Encounters only.</p> <p>The <code>Artifact</code> library contains data and methods related to Epic Encounters Artifacts.</p> <p>The <code>ArtifactLib_ArtifactDefinition</code> class holds information for each of the artifacts, including slot, item/rune templates, as well as the related keyword activators and mutators (defined manually).</p> <p>The data is not generated automatically. You must add your own artifacts by calling <code>RegisterArtifact()</code> with the data table filled out. Ideally, this should be done on both contexts, so client scripting can also query the information.</p> <p></p>"},{"location":"Documentation/Utilities/Artifact/#artifactlib_artifactdefinition-class","title":"ArtifactLib_ArtifactDefinition Class","text":"<p>@field ID <code>string</code></p> <p>@field Slot <code>ItemSlot</code></p> <p>@field ItemTemplate <code>GUID</code></p> <p>@field RuneTemplate <code>GUID</code></p> <p>@field DescriptionHandle <code>TranslatedStringHandle</code></p> <p>@field KeywordActivators <code>Keyword[]</code></p> <p>@field KeywordMutators <code>Keyword[]</code></p>"},{"location":"Documentation/Utilities/Artifact/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Artifact/#getdescription","title":"GetDescription","text":"<pre><code>function ArtifactLib_ArtifactDefinition:GetDescription()\n-&gt; string\n</code></pre> <p>Returns the artifact power's description.</p>"},{"location":"Documentation/Utilities/Artifact/#getname","title":"GetName","text":"<pre><code>function ArtifactLib_ArtifactDefinition:GetName()\n-&gt; string\n</code></pre> <p>Returns the artifact's name.</p>"},{"location":"Documentation/Utilities/Artifact/#getpowertooltip","title":"GetPowerTooltip","text":"<pre><code>function ArtifactLib_ArtifactDefinition:GetPowerTooltip()\n-&gt; TooltipLib_Element[]\n</code></pre> <p>Returns a full tooltip showing the artifact's name and power.</p>"},{"location":"Documentation/Utilities/Artifact/#haskeyword","title":"HasKeyword","text":"<pre><code>function ArtifactLib_ArtifactDefinition:HasKeyword(keyword)\n</code></pre> <p>Returns whether the artifact has a keyword activator or mutator.</p> <p>@param keyword <code>Keyword</code></p> <p></p> <p></p>"},{"location":"Documentation/Utilities/Artifact/#artifactlib-class","title":"ArtifactLib Class","text":"<p>Inherits from <code>Feature</code>.</p>"},{"location":"Documentation/Utilities/Artifact/#methods_1","title":"Methods","text":""},{"location":"Documentation/Utilities/Artifact/#getdata","title":"GetData","text":"<pre><code>function ArtifactLib.GetData(artifactID)\n-&gt; ArtifactLib_ArtifactDefinition?\n</code></pre> <p>Returns the definition for an artifact.</p> <p>@param artifactID <code>string</code></p>"},{"location":"Documentation/Utilities/Artifact/#getequippedpowers","title":"GetEquippedPowers","text":"<pre><code>function ArtifactLib.GetEquippedPowers(char) -- (Server-only)\n-&gt; ArtifactLib_ArtifactDefinition[]\n</code></pre> <p>Returns a list of artifact powers active on char.</p> <p>@param char <code>EsvCharacter</code></p>"},{"location":"Documentation/Utilities/Artifact/#getequippedpowers_1","title":"GetEquippedPowers","text":"<pre><code>function ArtifactLib.GetEquippedPowers(char) -- (Client-only)\n-&gt; ArtifactLib_ArtifactDefinition[]\n</code></pre> <p>Returns a list of artifact powers active on char.</p> <p>@param char <code>EclCharacter</code></p>"},{"location":"Documentation/Utilities/Artifact/#isequipped","title":"IsEquipped","text":"<pre><code>function ArtifactLib.IsEquipped(char, artifact) -- (Server-only)\n-&gt; boolean\n</code></pre> <p>Returns whether char has the artifact power active.</p> <p>@param char <code>EsvCharacter</code></p> <p>@param artifact <code>ArtifactLib_ArtifactDefinition|string</code></p>"},{"location":"Documentation/Utilities/Artifact/#isequipped_1","title":"IsEquipped","text":"<pre><code>function ArtifactLib.IsEquipped(char, artifact) -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether char has the artifact power active.</p> <p>@param char <code>EclCharacter</code></p> <p>@param artifact <code>ArtifactLib_ArtifactDefinition|string</code></p>"},{"location":"Documentation/Utilities/Artifact/#isownedbyparty","title":"IsOwnedByParty","text":"<pre><code>function ArtifactLib.IsOwnedByParty(id)\n</code></pre> <p>Returns whether the party owns an artifact.</p> <p>@param id <code>string</code></p>"},{"location":"Documentation/Utilities/Artifact/#registerartifact","title":"RegisterArtifact","text":"<pre><code>function ArtifactLib.RegisterArtifact(data)\n-&gt; ArtifactLib_ArtifactDefinition\n</code></pre> <p>Registers the data for an artifact.</p> <p>@param data <code>ArtifactLib_ArtifactDefinition</code></p> <p></p>"},{"location":"Documentation/Utilities/Artifact/#usage-examples","title":"Usage examples","text":"<p>This library is used in the Quick Examine UI to display tooltips for artifacts. It is additionally used in the stats tab to check the equipped artifacts of a character.</p>"},{"location":"Documentation/Utilities/Character/","title":"Character","text":""},{"location":"Documentation/Utilities/Character/#character","title":"Character","text":"<p>The <code>Character</code> library contains utility methods relating to characters. The vast majority of them are available on both contexts.</p> <p></p>"},{"location":"Documentation/Utilities/Character/#characterlib-class","title":"CharacterLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Character/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/Character/#statusapplied-event","title":"StatusApplied (event)","text":"<p>TODO move somewhere else, since victim could be an item</p> <p>@field SourceHandle <code>EntityHandle</code></p> <p>@field Victim <code>Character|Item</code></p> <p>@field Status <code>EclStatus|EsvStatus</code></p>"},{"location":"Documentation/Utilities/Character/#itemequipped-event","title":"ItemEquipped (event)","text":"<p>@field Character <code>Character</code></p> <p>@field Item <code>Item</code></p> <p>@field Slot <code>ItemSlot</code></p>"},{"location":"Documentation/Utilities/Character/#createequipmentvisuals-hook","title":"CreateEquipmentVisuals (hook)","text":"<p>Client-only.</p> <p>@field Character <code>EclCharacter</code></p> <p>@field Item <code>EclItem</code></p> <p>@field Request <code>EclEquipmentVisualSystemSetParam</code> Hookable.</p> <p>@field RawEvent <code>EclLuaCreateEquipmentVisualsRequestEvent</code></p>"},{"location":"Documentation/Utilities/Character/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Character/#canuseskill","title":"CanUseSkill","text":"<pre><code>function CharacterLib.CanUseSkill(char, skillID, itemSource)\n-&gt; boolean\n</code></pre> <p>Returns whether char can enter preparation state for a skill.</p> <p>@param char <code>Character</code></p> <p>@param skillID <code>string</code></p> <p>@param itemSource <code>Item?</code></p>"},{"location":"Documentation/Utilities/Character/#get","title":"Get","text":"<pre><code>function CharacterLib.Get(identifier, isFlashHandle)\n-&gt; Character\n</code></pre> <p>@param identifier <code>GUID|PrefixedGUID|NetId|EntityHandle</code></p> <p>@param isFlashHandle <code>boolean?</code> If true, the identifier will be passed through DoubleToHandle() first.</p>"},{"location":"Documentation/Utilities/Character/#getactionpoints","title":"GetActionPoints","text":"<pre><code>function CharacterLib.GetActionPoints(char)\n-&gt; integer, integer -- Current, maximum\n</code></pre> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getcombatid","title":"GetCombatID","text":"<pre><code>function CharacterLib.GetCombatID(char)\n-&gt; integer?, integer? -- The combat ID and team ID. `nil` if the character is not in combat. This is different from the osi query, which returns a reserved value.\n</code></pre> <p>Returns the combat ID and team ID of char, if any.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getcurrentskill","title":"GetCurrentSkill","text":"<pre><code>function CharacterLib.GetCurrentSkill(char)\n-&gt; string? -- `nil` if the character has no active skill state.\n</code></pre> <p>Returns the ID of the skill that char is preparing or casting.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getdynamicstat","title":"GetDynamicStat","text":"<pre><code>function CharacterLib.GetDynamicStat(char, statName)\n</code></pre> <p>@param char <code>Character</code></p> <p>@param statName <code>string</code></p>"},{"location":"Documentation/Utilities/Character/#getequippeditems","title":"GetEquippedItems","text":"<pre><code>function CharacterLib.GetEquippedItems(char)\n-&gt; table&lt;ItemSlot, EclItem&gt;\n</code></pre> <p>Returns the equipped items of char, per slot.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getexperience","title":"GetExperience","text":"<pre><code>function CharacterLib.GetExperience(char)\n-&gt; integer\n</code></pre> <p>Returns the current experience points of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getexperiencerequiredforlevel","title":"GetExperienceRequiredForLevel","text":"<pre><code>function CharacterLib.GetExperienceRequiredForLevel(targetLevel)\n-&gt; integer -- Experience points.\n</code></pre> <p>Returns the cumulative experience required to reach a level.</p> <p>@param targetLevel <code>integer</code></p>"},{"location":"Documentation/Utilities/Character/#getgender","title":"GetGender","text":"<pre><code>function CharacterLib.GetGender(char)\n-&gt; Gender\n</code></pre> <p>Returns the gender of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#gethighestpartyability","title":"GetHighestPartyAbility","text":"<pre><code>function CharacterLib.GetHighestPartyAbility(char, ability)\n-&gt; integer\n</code></pre> <p>Gets the highest stat score of all characters in char's party.</p> <p>@param char <code>Character</code></p> <p>@param ability <code>string</code> Needs to be a property indexable in char.Stats</p>"},{"location":"Documentation/Utilities/Character/#getinitiative","title":"GetInitiative","text":"<pre><code>function CharacterLib.GetInitiative(char)\n-&gt; integer\n</code></pre> <p>Returns the initiative of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getlevel","title":"GetLevel","text":"<pre><code>function CharacterLib.GetLevel(char)\n-&gt; integer\n</code></pre> <p>Returns the level of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getmaxcarryweight","title":"GetMaxCarryWeight","text":"<pre><code>function CharacterLib.GetMaxCarryWeight(char)\n-&gt; integer -- In \"grams\"\n</code></pre> <p>Returns the maximum carry weight of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getmovement","title":"GetMovement","text":"<pre><code>function CharacterLib.GetMovement(char)\n-&gt; number -- In centimeters.\n</code></pre> <p>Returns the calculated movement stat of a character.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getowner","title":"GetOwner","text":"<pre><code>function CharacterLib.GetOwner(char)\n-&gt; Character?\n</code></pre> <p>Returns the character's owner, if it is a summon or party follower(?).</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getpartymembers","title":"GetPartyMembers","text":"<pre><code>function CharacterLib.GetPartyMembers(char) -- (Client-only)\n-&gt; EclCharacter[] Includes the char passed per param.-- the char passed per param.\n</code></pre> <p>Returns a list of party members of char's party. Char must be a player.</p> <p>Depends on PlayerInfo.</p> <p>@param char <code>EclCharacter</code></p>"},{"location":"Documentation/Utilities/Character/#getpartymembers_1","title":"GetPartyMembers","text":"<pre><code>function CharacterLib.GetPartyMembers(char) -- (Server-only)\n-&gt; EsvCharacter[] Includes the char passed per param.-- the char passed per param.\n</code></pre> <p>Returns a list of party members of char's party. Char must be a player.</p> <p>@param char <code>EsvCharacter</code></p>"},{"location":"Documentation/Utilities/Character/#getrace","title":"GetRace","text":"<pre><code>function CharacterLib.GetRace(char)\n-&gt; Race\n</code></pre> <p>Returns the current race of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getrealrace","title":"GetRealRace","text":"<pre><code>function CharacterLib.GetRealRace(char)\n-&gt; Race\n</code></pre> <p>Returns the original race of a player char, before any transforms.</p> <p>@param char <code>Character</code> Must be tagged with \"REALLY_{Race}\"</p>"},{"location":"Documentation/Utilities/Character/#getresistance","title":"GetResistance","text":"<pre><code>function CharacterLib.GetResistance(char, damageType, baseValuesOnly)\n-&gt; integer\n</code></pre> <p>Returns the computed resistance value of char.</p> <p>@param char <code>Character</code></p> <p>@param damageType <code>DamageType</code></p> <p>@param baseValuesOnly <code>boolean?</code> If `true`, base value will be returned. Defaults to `false`.</p>"},{"location":"Documentation/Utilities/Character/#getskillbarrowcontents","title":"GetSkillBarRowContents","text":"<pre><code>function CharacterLib.GetSkillBarRowContents(char, row, slotsPerRow)\n-&gt; EocSkillBarItem[]\n</code></pre> <p>Returns the contents of a character's skillbar row.</p> <p>@param char <code>Character</code> Must be a player.</p> <p>@param row <code>integer</code></p> <p>@param slotsPerRow <code>integer?</code> Defaults to 29.</p>"},{"location":"Documentation/Utilities/Character/#getskillstate","title":"GetSkillState","text":"<pre><code>function CharacterLib.GetSkillState(char)\n-&gt; (EclSkillState|EsvSkillState)?\n</code></pre> <p>Returns the current skill state of char.</p> <p>On the server, this can only return the state while using the skill. Preparation state cannot be accessed.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getsourcepoints","title":"GetSourcePoints","text":"<pre><code>function CharacterLib.GetSourcePoints(char)\n-&gt; integer, integer -- Current and maximum points.\n</code></pre> <p>Returns the current and maximum source points of char.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#getstatusbyhandle","title":"GetStatusByHandle","text":"<pre><code>function CharacterLib.GetStatusByHandle(char, handle)\n-&gt; EclStatus|EsvStatus\n</code></pre> <p>Returns a status by handle.</p> <p>@param char <code>Character</code></p> <p>@param handle <code>EntityHandle</code></p>"},{"location":"Documentation/Utilities/Character/#getstatusbynetid","title":"GetStatusByNetID","text":"<pre><code>function CharacterLib.GetStatusByNetID(char, netID)\n-&gt; EclStatus|EsvStatus\n</code></pre> <p>Returns a status on char by its net ID.</p> <p>@param char <code>Character</code></p> <p>@param netID <code>NetId</code></p>"},{"location":"Documentation/Utilities/Character/#getstatusesfromitems","title":"GetStatusesFromItems","text":"<pre><code>function CharacterLib.GetStatusesFromItems(char) -- (Client-only)\n-&gt; CharacterLib_StatusFromItem[]\n</code></pre> <p>Returns a list of statuses the character has from its equipped items.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#hasdagger","title":"HasDagger","text":"<pre><code>function CharacterLib.HasDagger(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char has a dagger equipped in either slot.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#hasimmunity","title":"HasImmunity","text":"<pre><code>function CharacterLib.HasImmunity(char, immunityName)\n-&gt; boolean\n</code></pre> <p>Returns wether char has a certain immunity.</p> <p>@param char <code>Character</code></p> <p>@param immunityName <code>StatsLib_ImmunityID</code></p>"},{"location":"Documentation/Utilities/Character/#hasmeleeweapon","title":"HasMeleeWeapon","text":"<pre><code>function CharacterLib.HasMeleeWeapon(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char has a melee weapon equipped in either slot.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#hasowner","title":"HasOwner","text":"<pre><code>function CharacterLib.HasOwner(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char has an owner.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#hasrangedweapon","title":"HasRangedWeapon","text":"<pre><code>function CharacterLib.HasRangedWeapon(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char has a bow or crossbow equipped.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#hasshield","title":"HasShield","text":"<pre><code>function CharacterLib.HasShield(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char has a shield equipped.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isactive","title":"IsActive","text":"<pre><code>function CharacterLib.IsActive()\n-&gt; boolean\n</code></pre> <p>Returns whether char is currently the active character of any player.</p>"},{"location":"Documentation/Utilities/Character/#iscastingskill","title":"IsCastingSkill","text":"<pre><code>function CharacterLib.IsCastingSkill(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is casting a skill.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isdead","title":"IsDead","text":"<pre><code>function CharacterLib.IsDead(char)\n-&gt; boolean\n</code></pre> <p>Returns true if the character is dead.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isdisarmed","title":"IsDisarmed","text":"<pre><code>function CharacterLib.IsDisarmed(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is disarmed.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isignoredbyai","title":"IsIgnoredByAI","text":"<pre><code>function CharacterLib.IsIgnoredByAI(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is ignored by AI.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isincombat","title":"IsInCombat","text":"<pre><code>function CharacterLib.IsInCombat(char)\n-&gt; boolean\n</code></pre> <p>Returns whether the character is in a combat.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isinstealth","title":"IsInStealth","text":"<pre><code>function CharacterLib.IsInStealth(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is sneaking or invisible.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isinvisible","title":"IsInvisible","text":"<pre><code>function CharacterLib.IsInvisible(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is invisible - as in, has the INVISIBLE status.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#ismale","title":"IsMale","text":"<pre><code>function CharacterLib.IsMale(char)\n-&gt; boolean\n</code></pre> <p>Returns true if char is male.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#ismuted","title":"IsMuted","text":"<pre><code>function CharacterLib.IsMuted(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is muted.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isorigin","title":"IsOrigin","text":"<pre><code>function CharacterLib.IsOrigin(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is a non-generic origin.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isplayer","title":"IsPlayer","text":"<pre><code>function CharacterLib.IsPlayer(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is a player.</p> <p>A player is any character that is controllable by the users,</p> <p>including summons and party followers.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#ispreferredbyai","title":"IsPreferredByAI","text":"<pre><code>function CharacterLib.IsPreferredByAI(char)\n-&gt; boolean\n</code></pre> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#ispreparingskill","title":"IsPreparingSkill","text":"<pre><code>function CharacterLib.IsPreparingSkill(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is preparing a skill.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isskillinnate","title":"IsSkillInnate","text":"<pre><code>function CharacterLib.IsSkillInnate(char, skillID)\n-&gt; boolean\n</code></pre> <p>Returns whether a skill is innate to a character.</p> <p>Returns false if the character doesn't have the skill in any way.</p> <p>@param char <code>Character</code></p> <p>@param skillID <code>string</code></p>"},{"location":"Documentation/Utilities/Character/#isskilllearnt","title":"IsSkillLearnt","text":"<pre><code>function CharacterLib.IsSkillLearnt(char, skillID)\n-&gt; boolean\n</code></pre> <p>Returns whether char has a skill learnt. Returns true for innate skills.</p> <p>@param char <code>Character</code></p> <p>@param skillID <code>string</code></p>"},{"location":"Documentation/Utilities/Character/#isskillmemorized","title":"IsSkillMemorized","text":"<pre><code>function CharacterLib.IsSkillMemorized(char, skillID)\n-&gt; boolean\n</code></pre> <p>Returns whether char has a skill memorized. Returns true for innate skills.</p> <p>@param char <code>Character</code></p> <p>@param skillID <code>string</code></p>"},{"location":"Documentation/Utilities/Character/#issneaking","title":"IsSneaking","text":"<pre><code>function CharacterLib.IsSneaking(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is sneaking.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#issummon","title":"IsSummon","text":"<pre><code>function CharacterLib.IsSummon(char)\n-&gt; boolean\n</code></pre> <p>Returns true if char is a summon.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isundead","title":"IsUndead","text":"<pre><code>function CharacterLib.IsUndead(char)\n-&gt; boolean\n</code></pre> <p>Returns true if char is undead.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isunpreferredbyai","title":"IsUnpreferredByAI","text":"<pre><code>function CharacterLib.IsUnpreferredByAI(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char is unpreferred by AI.</p> <p>@param char <code>Character</code></p>"},{"location":"Documentation/Utilities/Character/#isunsheathed","title":"IsUnsheathed","text":"<pre><code>function CharacterLib.IsUnsheathed(char)\n-&gt; boolean\n</code></pre> <p>Returns whether char has their weapon(s) unsheathed.</p> <p>@param char <code>Character</code></p> <p></p>"},{"location":"Documentation/Utilities/Color/","title":"Color","text":""},{"location":"Documentation/Utilities/Color/#color","title":"Color","text":"<p>The <code>Color</code> library offers utilities for working with colors, either through RGB, decimal, or hex.</p> <p>The constructor methods create an <code>RGBColor</code> table.</p> <p>The library also contains constants for common colors used by Larian.</p> <p></p>"},{"location":"Documentation/Utilities/Color/#colorlib-class","title":"ColorLib Class","text":""},{"location":"Documentation/Utilities/Color/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Color/#clone","title":"Clone","text":"<pre><code>function ColorLib.Clone(color)\n-&gt; RGBColor -- New instance with same values.\n</code></pre> <p>Clones a color instance.</p> <p>@param color <code>RGBColor</code></p>"},{"location":"Documentation/Utilities/Color/#create","title":"Create","text":"<pre><code>function ColorLib.Create(red, green, blue, alpha)\n-&gt; RGBColor\n</code></pre> <p>Alias for creating an RGBColor from RGBA values.</p> <p>@param red <code>integer?</code></p> <p>@param green <code>integer?</code></p> <p>@param blue <code>integer?</code></p> <p>@param alpha <code>integer?</code></p>"},{"location":"Documentation/Utilities/Color/#createfromdecimal","title":"CreateFromDecimal","text":"<pre><code>function ColorLib.CreateFromDecimal(num)\n-&gt; RGBColor\n</code></pre> <p>Creates a color from a decimal value.</p> <p>Does not support alpha.</p> <p>@param num <code>integer</code></p>"},{"location":"Documentation/Utilities/Color/#createfromhex","title":"CreateFromHex","text":"<pre><code>function ColorLib.CreateFromHex(hex)\n-&gt; RGBColor\n</code></pre> <p>Creates a color from an html-format hex color code.</p> <p>Does not support alpha.</p> <p>@param hex <code>string</code></p>"},{"location":"Documentation/Utilities/Color/#createfromrgb","title":"CreateFromRGB","text":"<pre><code>function ColorLib.CreateFromRGB(red, green, blue, alpha)\n-&gt; RGBColor\n</code></pre> <p>Creates a color from RGBA values. Expected range of values is [0-255].</p> <p>@param red <code>integer?</code></p> <p>@param green <code>integer?</code></p> <p>@param blue <code>integer?</code></p> <p>@param alpha <code>integer?</code></p>"},{"location":"Documentation/Utilities/Color/#lerp","title":"Lerp","text":"<pre><code>function ColorLib.Lerp(startColor, targetColor, progress)\n</code></pre> <p>Creates a new color whose RGB components are linearly interpolated from one to another.</p> <p>Uses the alpha of the target color.</p> <p>@param startColor <code>RGBColor</code></p> <p>@param targetColor <code>RGBColor</code></p> <p>@param progress <code>number</code> Expected values are from 0.0 to 1.0.</p> <p></p> <p></p>"},{"location":"Documentation/Utilities/Color/#rgbcolor-class","title":"RGBColor Class","text":""},{"location":"Documentation/Utilities/Color/#methods_1","title":"Methods","text":""},{"location":"Documentation/Utilities/Color/#clone_1","title":"Clone","text":"<pre><code>function RGBColor:Clone()\n-&gt; RGBColor\n</code></pre> <p>Returns a new instance of RGBColor with the same values.</p>"},{"location":"Documentation/Utilities/Color/#create_1","title":"Create","text":"<pre><code>function RGBColor.Create(r, g, b, a)\n-&gt; RGBColor\n</code></pre> <p>Creates a color from RGBA values.</p> <p>Expected range is [0-255] and will be clamped.</p> <p>@param r <code>integer?</code></p> <p>@param g <code>integer?</code></p> <p>@param b <code>integer?</code></p> <p>@param a <code>integer?</code> Defaults to 255.</p>"},{"location":"Documentation/Utilities/Color/#createfromdecimal_1","title":"CreateFromDecimal","text":"<pre><code>function RGBColor.CreateFromDecimal(num)\n-&gt; RGBColor\n</code></pre> <p>Creates a color from a decimal value.</p> <p>Does not support alpha.</p> <p>@param num <code>integer</code></p>"},{"location":"Documentation/Utilities/Color/#createfromhex_1","title":"CreateFromHex","text":"<pre><code>function RGBColor.CreateFromHex(hex)\n-&gt; RGBColor\n</code></pre> <p>Creates a color from a hexadecimal value.</p> <p>Does not support alpha.</p> <p>@param hex <code>string</code></p>"},{"location":"Documentation/Utilities/Color/#equals","title":"Equals","text":"<pre><code>function RGBColor:Equals(color)\n-&gt; boolean\n</code></pre> <p>Returns whether 2 colors have the same RGBA values.</p> <p>@param color <code>RGBColor</code></p>"},{"location":"Documentation/Utilities/Color/#todecimal","title":"ToDecimal","text":"<pre><code>function RGBColor:ToDecimal(addAlpha)\n-&gt; integer\n</code></pre> <p>Returns the decimal representation of the color.</p> <p>Actionscript expects colors to be represented in this way.</p> <p>@param addAlpha <code>boolean?</code> Defaults to false.</p>"},{"location":"Documentation/Utilities/Color/#tofloats","title":"ToFloats","text":"<pre><code>function RGBColor:ToFloats()\n-&gt; number, number, number, number\n</code></pre> <p>Returns the RGBA values as floats in the range[0.0 - 1.0]</p>"},{"location":"Documentation/Utilities/Color/#tohex","title":"ToHex","text":"<pre><code>function RGBColor:ToHex(prefix, addAlpha)\n-&gt; string\n</code></pre> <p>Returns the hexadecimal representation of the color.</p> <p>@param prefix <code>boolean?</code> Prefix the string with #. Defaults to false.</p> <p>@param addAlpha <code>boolean?</code> Defaults to false. If enabled, resulting color will be in the format `#RRGGBBAA`</p>"},{"location":"Documentation/Utilities/Color/#unpack","title":"Unpack","text":"<pre><code>function RGBColor:Unpack()\n-&gt; integer ...\n</code></pre> <p>Unpacks the color's RGB values, alpha included.</p>"},{"location":"Documentation/Utilities/Color/#__add","title":"__add","text":"<pre><code>---@protected\nfunction RGBColor.__add(color1, color2)\n-&gt; RGBColor\n</code></pre> <p>__add overload. Adds the RGB values of both colors.</p> <p>@param color1 <code>RGBColor</code></p> <p>@param color2 <code>RGBColor</code></p>"},{"location":"Documentation/Utilities/Color/#__eq","title":"__eq","text":"<pre><code>---@protected\nfunction RGBColor.__eq(color1, color2)\n-&gt; boolean\n</code></pre> <p>__eq overload. Equivalent to calling RGBColor:Equals()</p> <p>@param color1 <code>RGBColor</code></p> <p>@param color2 <code>RGBColor</code></p>"},{"location":"Documentation/Utilities/Color/#__sub","title":"__sub","text":"<pre><code>---@protected\nfunction RGBColor.__sub(color1, color2)\n-&gt; RGBColor\n</code></pre> <p>__sub overload. Subtracts the RGB values.</p> <p>@param color1 <code>RGBColor</code></p> <p>@param color2 <code>RGBColor</code></p> <p></p>"},{"location":"Documentation/Utilities/Combat/","title":"Combat","text":""},{"location":"Documentation/Utilities/Combat/#combat","title":"Combat","text":"<p>The <code>Combat</code> library contains methods for querying information about ongoing combats.</p> <p></p>"},{"location":"Documentation/Utilities/Combat/#combatlib-class","title":"CombatLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Combat/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Combat/#getactivecombatant","title":"GetActiveCombatant","text":"<pre><code>function CombatLib.GetActiveCombatant()\n-&gt; CombatLib_CombatCompatibleEntity\n</code></pre> <p>Returns the current active combatant in a combat.</p>"},{"location":"Documentation/Utilities/Combat/#getcombat","title":"GetCombat","text":"<pre><code>function CombatLib.GetCombat(combatID)\n-&gt; EclTurnManagerCombat|EsvTurnManagerCombat\n</code></pre> <p>@param combatID <code>integer</code></p>"},{"location":"Documentation/Utilities/Combat/#getcombatcomponent","title":"GetCombatComponent","text":"<pre><code>function CombatLib.GetCombatComponent(entity)\n-&gt; EocCombatComponent? -- `nil` if the entity does not have the component.\n</code></pre> <p>Returns the combat component of an entity.</p> <p>@param entity <code>CombatLib_CombatCompatibleEntity</code></p>"},{"location":"Documentation/Utilities/Combat/#getcombatid","title":"GetCombatID","text":"<pre><code>function CombatLib.GetCombatID(entity)\n-&gt; integer? -- `nil` if the entity is not in combat.\n</code></pre> <p>Returns the combat ID of an entity.</p> <p>@param entity <code>CombatLib_CombatCompatibleEntity</code></p>"},{"location":"Documentation/Utilities/Combat/#getturnmanager","title":"GetTurnManager","text":"<pre><code>function CombatLib.GetTurnManager()\n-&gt; EclTurnManager|EsvTurnManager\n</code></pre>"},{"location":"Documentation/Utilities/Combat/#getturnorder","title":"GetTurnOrder","text":"<pre><code>function CombatLib.GetTurnOrder() -- (Client-only)\n-&gt; CombatLib_TurnOrder\n</code></pre> <p>Returns the character participants of a combat. </p>"},{"location":"Documentation/Utilities/Coroutine/","title":"Coroutine","text":""},{"location":"Documentation/Utilities/Coroutine/#coroutine","title":"Coroutine","text":"<p>The <code>Coroutine</code> library offers coroutines that support sleeping for X seconds or until a predicate is met.</p> <p></p>"},{"location":"Documentation/Utilities/Coroutine/#coroutinelib-class","title":"CoroutineLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Coroutine/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Coroutine/#create","title":"Create","text":"<pre><code>function CoroutineLib.Create(fun)\n-&gt; CoroutineInstance\n</code></pre> <p>@param fun <code>fun(inst:CoroutineInstance, ...)</code></p> <p></p> <p></p>"},{"location":"Documentation/Utilities/Coroutine/#coroutineinstance-class","title":"CoroutineInstance Class","text":""},{"location":"Documentation/Utilities/Coroutine/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/Coroutine/#finished-event","title":"Finished (event)","text":"<p>An event object with no parameters.</p>"},{"location":"Documentation/Utilities/Coroutine/#methods_1","title":"Methods","text":""},{"location":"Documentation/Utilities/Coroutine/#continue","title":"Continue","text":"<pre><code>function CoroutineInstance:Continue()\n-&gt; ...\n</code></pre>"},{"location":"Documentation/Utilities/Coroutine/#isdead","title":"IsDead","text":"<pre><code>function CoroutineInstance:IsDead()\n-&gt; boolean\n</code></pre>"},{"location":"Documentation/Utilities/Coroutine/#issleeping","title":"IsSleeping","text":"<pre><code>function CoroutineInstance:IsSleeping()\n-&gt; boolean\n</code></pre>"},{"location":"Documentation/Utilities/Coroutine/#sleep","title":"Sleep","text":"<pre><code>function CoroutineInstance:Sleep(time, ...)\n</code></pre> <p>@param time <code>number|function</code></p> <p>@param ... <code>any</code> Variables yielded. Discarded if the coroutine is resuming from sleeping, as there is no caller.</p>"},{"location":"Documentation/Utilities/Coroutine/#yield","title":"Yield","text":"<pre><code>function CoroutineInstance:Yield()\n</code></pre>"},{"location":"Documentation/Utilities/GameState/","title":"GameState","text":""},{"location":"Documentation/Utilities/GameState/#gamestate","title":"GameState","text":"<p>The <code>GameState</code> library contains methods and events related to the global game state - that is, whether it's in a session, loading, paused, etc.</p> <p>Its events are helpful for initialization purposes. <code>ClientReady</code>, for example, fires when the client transitions from <code>PrepareRunning</code> to <code>Running</code> and is a great moment to initialize anything that could need the client character to be present and/or send messages to the server (both of which are not reliable to do before that point).</p> <p></p>"},{"location":"Documentation/Utilities/GameState/#gamestatelib-class","title":"GameStateLib Class","text":"<p>Inherits from <code>Feature</code>.</p>"},{"location":"Documentation/Utilities/GameState/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/GameState/#gamepaused-event","title":"GamePaused (event)","text":""},{"location":"Documentation/Utilities/GameState/#gameunpaused-event","title":"GameUnpaused (event)","text":""},{"location":"Documentation/Utilities/GameState/#statechanged-event","title":"StateChanged (event)","text":"<p>@field From <code>GameState</code></p> <p>@field To <code>GameState</code></p>"},{"location":"Documentation/Utilities/GameState/#gameready-event","title":"GameReady (event)","text":"<p>Fires when the game transitions from PrepareRunning to Running (on the client)</p> <p>or when transitioning from Sync to Running (on the server)</p>"},{"location":"Documentation/Utilities/GameState/#tick-event","title":"Tick (event)","text":"<p>Fired every tick.</p> <p>@field DeltaTime <code>integer</code> Milliseconds elapsed since last tick</p>"},{"location":"Documentation/Utilities/GameState/#runningtick-event","title":"RunningTick (event)","text":"<p>Fired every tick while the game is not paused.</p> <p>@field DeltaTime <code>integer</code> Milliseconds elapsed since last tick (NOT the last running tick)</p>"},{"location":"Documentation/Utilities/GameState/#luaresetted-event","title":"LuaResetted (event)","text":"<p>An event object with no parameters.</p>"},{"location":"Documentation/Utilities/GameState/#clientready-event","title":"ClientReady (event)","text":"<p>Fired when the client transitions from PrepareRunning to Running,</p> <p>as well as when lua is reset.</p> <p>@field CharacterNetID <code>NetId</code></p> <p>@field ProfileGUID <code>GUID</code></p>"},{"location":"Documentation/Utilities/GameState/#regionstarted-event","title":"RegionStarted (event)","text":"<p>Server-only.</p> <p>@field LevelID <code>string</code></p>"},{"location":"Documentation/Utilities/GameState/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/GameState/#getstate","title":"GetState","text":"<pre><code>function GameStateLib.GetState() -- (Server-only)\n-&gt; GameState\n</code></pre>"},{"location":"Documentation/Utilities/GameState/#getstate_1","title":"GetState","text":"<pre><code>function GameStateLib.GetState() -- (Client-only)\n-&gt; GameState\n</code></pre>"},{"location":"Documentation/Utilities/GameState/#isinmainmenu","title":"IsInMainMenu","text":"<pre><code>function GameStateLib.IsInMainMenu()\n-&gt; boolean\n</code></pre> <p>Returns whether the game is in a main menu-related state.</p>"},{"location":"Documentation/Utilities/GameState/#isinrunningsession","title":"IsInRunningSession","text":"<pre><code>function GameStateLib.IsInRunningSession()\n-&gt; boolean\n</code></pre> <p>Returns whether the game state is within a running session (not paused)</p>"},{"location":"Documentation/Utilities/GameState/#isinsession","title":"IsInSession","text":"<pre><code>function GameStateLib.IsInSession()\n-&gt; boolean\n</code></pre> <p>Returns whether the game state is currently in a session.</p>"},{"location":"Documentation/Utilities/GameState/#isloading","title":"IsLoading","text":"<pre><code>function GameStateLib.IsLoading()\n-&gt; boolean\n</code></pre> <p>Returns whether the game is within a loading-related state.</p>"},{"location":"Documentation/Utilities/GameState/#ispaused","title":"IsPaused","text":"<pre><code>function GameStateLib.IsPaused() -- (Client-only)\n-&gt; boolean\n</code></pre>"},{"location":"Documentation/Utilities/GameState/#ispaused_1","title":"IsPaused","text":"<pre><code>function GameStateLib.IsPaused() -- (Server-only)\n-&gt; boolean\n</code></pre>"},{"location":"Documentation/Utilities/GameState/#issessionloaded","title":"IsSessionLoaded","text":"<pre><code>function GameStateLib.IsSessionLoaded() -- (Server-only)\n-&gt; boolean\n</code></pre>"},{"location":"Documentation/Utilities/IO/","title":"IO","text":""},{"location":"Documentation/Utilities/IO/#io","title":"IO","text":"<p>The <code>IO</code> library contains wrapper methods for loading and saving files, automatically serializing/deserializing tables into/from json.</p> <p></p>"},{"location":"Documentation/Utilities/IO/#inputoutputlib-class","title":"InputOutputLib Class","text":""},{"location":"Documentation/Utilities/IO/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/IO/#loadfile","title":"LoadFile","text":"<pre><code>function InputOutputLib.LoadFile(filename, context, raw)\n-&gt; any\n</code></pre> <p>Loads a file.</p> <p>@param filename <code>string</code></p> <p>@param context <code>(InputOutputLib_UserFileContext)?</code> Defaults to \"user\"</p> <p>@param raw <code>boolean?</code> Defaults to false.</p>"},{"location":"Documentation/Utilities/IO/#savefile","title":"SaveFile","text":"<pre><code>function InputOutputLib.SaveFile(filename, contents, raw, clean)\n</code></pre> <p>Serializes contents into json and saves them to a file.</p> <p>@param filename <code>string</code></p> <p>@param contents <code>any</code></p> <p>@param raw <code>boolean?</code> Defaults to false.</p> <p>@param clean <code>boolean?</code> Defaults to false. Calls table.clean() on the contents.</p> <p></p>"},{"location":"Documentation/Utilities/Item/","title":"Item","text":""},{"location":"Documentation/Utilities/Item/#item","title":"Item","text":"<p>The <code>Item</code> library contains methods relating to item game objects.</p> <p></p>"},{"location":"Documentation/Utilities/Item/#itemlib-class","title":"ItemLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Item/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Item/#applydye","title":"ApplyDye","text":"<pre><code>function ItemLib.ApplyDye(item, dye)\n-&gt; boolean False if item is already dyed with the same dye, or if dye is ``nil``.-- if item is already dyed with the same dye, or if dye is ``nil``.\n</code></pre> <p>Applies a dye to the item.</p> <p>@param item <code>Item</code></p> <p>@param dye <code>Dye</code></p>"},{"location":"Documentation/Utilities/Item/#canuse","title":"CanUse","text":"<pre><code>function ItemLib.CanUse(char, item)\n-&gt; boolean\n</code></pre> <p>Returns whether char meets the requirements to use an item.</p> <p>@param char <code>Character</code></p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#countitemsininventory","title":"CountItemsInInventory","text":"<pre><code>function ItemLib.CountItemsInInventory(entity, predicate)\n-&gt; number\n</code></pre> <p>Count the items in an entity's inventory that match a predicate function.  </p> <p>Predicate is passed <code>Item</code> and should return true for items to be counted.</p> <p>@param entity <code>Entity</code></p> <p>@param predicate <code>fun(item: EsvItem)</code></p>"},{"location":"Documentation/Utilities/Item/#get","title":"Get","text":"<pre><code>function ItemLib.Get(identifier, isFlashHandle)\n-&gt; Item\n</code></pre> <p>@param identifier <code>GUID|NetId|EntityHandle</code></p> <p>@param isFlashHandle <code>boolean?</code></p>"},{"location":"Documentation/Utilities/Item/#getcontaineditems","title":"GetContainedItems","text":"<pre><code>function ItemLib.GetContainedItems(container, predicate)\n-&gt; Item[]\n</code></pre> <p>Returns the items contained within a container item, optionally filtered by predicate.</p> <p>@param container <code>Item</code></p> <p>@param predicate <code>(fun(item:Item):boolean)?</code> The predicate should return `true` for items to be included. If `nil`, all items will be included.</p>"},{"location":"Documentation/Utilities/Item/#getcurrentdye","title":"GetCurrentDye","text":"<pre><code>function ItemLib.GetCurrentDye(item)\n-&gt; string,Dye The dye ID and data table.-- dye ID and data table.\n</code></pre> <p>Returns the ID and data for the most recently-applied dye deltamod on the item.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getequipmentsubtype","title":"GetEquipmentSubtype","text":"<pre><code>function ItemLib.GetEquipmentSubtype(item)\n-&gt; ItemLib_EquipmentType|ItemSlot\n</code></pre> <p>Returns the subtype of item (ex. \"Knife\" or \"Platemail\").  </p> <p>Returns ItemSlot for items with no subtypes.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getequippeditem","title":"GetEquippedItem","text":"<pre><code>function ItemLib.GetEquippedItem(char, slot)\n-&gt; Item?\n</code></pre> <p>@param char <code>Character</code></p> <p>@param slot <code>ItemSlot</code></p>"},{"location":"Documentation/Utilities/Item/#getequippedslot","title":"GetEquippedSlot","text":"<pre><code>function ItemLib.GetEquippedSlot(item, char)\n-&gt; EquipSlot?\n</code></pre> <p>Returns the slot that an item is equipped in, or nil if it is not.</p> <p>@param item <code>Item</code></p> <p>@param char <code>Character?</code> Defaults to item's owner.</p>"},{"location":"Documentation/Utilities/Item/#geticon","title":"GetIcon","text":"<pre><code>function ItemLib.GetIcon(item)\n-&gt; string\n</code></pre> <p>Returns the icon of the item.</p> <p>Fetching the icon is technically different per context; the server only cares about root template icon (except for the gold template). This function uses the client logic (which also checks icon override and icon from stats).</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getidentifyrequirement","title":"GetIdentifyRequirement","text":"<pre><code>function ItemLib.GetIdentifyRequirement(item)\n-&gt; number\n</code></pre> <p>Gets the amount of Loremaster necessary to identify an item.  </p> <p>Ignores whether the item is already identified.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getitemslot","title":"GetItemSlot","text":"<pre><code>function ItemLib.GetItemSlot(item)\n-&gt; ItemSlot? -- Nil if the item has no stats.\n</code></pre> <p>Alias for Item.Stats.ItemSlot</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getitemsininventory","title":"GetItemsInInventory","text":"<pre><code>function ItemLib.GetItemsInInventory(entity, predicate)\n-&gt; Item[]\n</code></pre> <p>Returns a list of the items in the entity's inventory that match an optional predicate function.  </p> <p>Predicate is passed the EclItem/EsvItem and should return true for items to be included.</p> <p>@param entity <code>Entity</code></p> <p>@param predicate <code>fun(item: Item)</code></p>"},{"location":"Documentation/Utilities/Item/#getitemsinpartyinventory","title":"GetItemsInPartyInventory","text":"<pre><code>function ItemLib.GetItemsInPartyInventory(char, predicate)\n</code></pre> <p>Returns all items in the party inventory of char matching the predicate, or all if no predicate is passed.</p> <p>@param char <code>Character</code></p> <p>@param predicate <code>fun(item:Item)</code></p>"},{"location":"Documentation/Utilities/Item/#getlevel","title":"GetLevel","text":"<pre><code>function ItemLib.GetLevel(item)\n-&gt; integer? -- `nil` if the item has no stats.\n</code></pre> <p>Returns the level of an item.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getnamedboosts","title":"GetNamedBoosts","text":"<pre><code>function ItemLib.GetNamedBoosts(item)\n-&gt; string[]\n</code></pre> <p>Returns a list of the named boosts on the item.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getowner","title":"GetOwner","text":"<pre><code>function ItemLib.GetOwner(item)\n-&gt; Character?\n</code></pre> <p>Returns the current owner of the item.</p> <p>The owner will be nil if the character who owned the item died.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getpartytemplatecount","title":"GetPartyTemplateCount","text":"<pre><code>function ItemLib.GetPartyTemplateCount(template) -- (Client-only)\n-&gt; number\n</code></pre> <p>Count the amount of template instances (prefix + guid) in the client party's inventory.</p> <p>@param template <code>string</code></p>"},{"location":"Documentation/Utilities/Item/#getrarityicon","title":"GetRarityIcon","text":"<pre><code>function ItemLib.GetRarityIcon(rarity)\n-&gt; icon? -- Not all rarities have icons.\n</code></pre> <p>Returns the icon frame for a rarity, if any.</p> <p>@param rarity <code>ItemLib_Rarity|EclItem</code></p>"},{"location":"Documentation/Utilities/Item/#getrarityname","title":"GetRarityName","text":"<pre><code>function ItemLib.GetRarityName(rarity)\n</code></pre> <p>Returns the name of a rarity.</p> <p>@param rarity <code>Item|ItemLib_Rarity</code></p>"},{"location":"Documentation/Utilities/Item/#getrune","title":"GetRune","text":"<pre><code>function ItemLib.GetRune(item, index)\n-&gt; StatItem\n</code></pre> <p>Gets the stats object of the rune inserted at rune index <code>index</code> on item.</p> <p>@param item <code>Item</code></p> <p>@param index <code>integer</code> **0-based.**</p>"},{"location":"Documentation/Utilities/Item/#getruneslots","title":"GetRuneSlots","text":"<pre><code>function ItemLib.GetRuneSlots(item)\n-&gt; integer\n</code></pre> <p>Returns the amount of rune slots an item has.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getruneslotsicon","title":"GetRuneSlotsIcon","text":"<pre><code>function ItemLib.GetRuneSlotsIcon(item)\n-&gt; icon? -- `nil` if the item has no rune slots.\n</code></pre> <p>Returns the icon displaying the state of item's rune slots.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getrunes","title":"GetRunes","text":"<pre><code>function ItemLib.GetRunes(item)\n-&gt; table&lt;number, StatItem&gt; -- Empty slots are nil.\n</code></pre> <p>Returns a list of runes on the item.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getuseapcost","title":"GetUseAPCost","text":"<pre><code>function ItemLib.GetUseAPCost(item)\n-&gt; integer\n</code></pre> <p>Returns the base AP cost of using an item, independent of the character.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#getuseactions","title":"GetUseActions","text":"<pre><code>function ItemLib.GetUseActions(item, actionType)\n-&gt; IActionData[]\n</code></pre> <p>Returns the use actions of an item, optionally filtered by type.</p> <p>@param item <code>Item|ItemTemplate</code></p> <p>@param actionType <code>ActionDataType</code></p>"},{"location":"Documentation/Utilities/Item/#hasflag","title":"HasFlag","text":"<pre><code>function ItemLib.HasFlag(item, flag)\n</code></pre> <p>Returns whether the item has a flag.</p> <p>@param item <code>Item</code></p> <p>@param flag <code>EclItemFlags|EsvItemFlags|EclItemFlags2|EsvItemFlags2</code></p>"},{"location":"Documentation/Utilities/Item/#hasrunes","title":"HasRunes","text":"<pre><code>function ItemLib.HasRunes(item)\n-&gt; boolean\n</code></pre> <p>Returns true if item has any runes slotted.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#hasuseaction","title":"HasUseAction","text":"<pre><code>function ItemLib.HasUseAction(item, useActionID)\n-&gt; boolean\n</code></pre> <p>Returns whether the item has a OnUsePeaceAction of the passed type.</p> <p>@param item <code>Item</code></p> <p>@param useActionID <code>ActionDataType</code></p>"},{"location":"Documentation/Utilities/Item/#hasuseactions","title":"HasUseActions","text":"<pre><code>function ItemLib.HasUseActions(item)\n-&gt; boolean\n</code></pre> <p>Returns whether an item has any use actions.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isartifact","title":"IsArtifact","text":"<pre><code>function ItemLib.IsArtifact(item)\n-&gt; boolean\n</code></pre> <p>Returns true if the item is an Artifact by checking the AMER_UNI tag.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#iscontainer","title":"IsContainer","text":"<pre><code>function ItemLib.IsContainer(item)\n-&gt; boolean\n</code></pre> <p>Returns whether an item is a container.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isdagger","title":"IsDagger","text":"<pre><code>function ItemLib.IsDagger(item)\n-&gt; boolean\n</code></pre> <p>Returns whether item is a dagger (satisfying a DaggerWeapon requirement)</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isdyeable","title":"IsDyeable","text":"<pre><code>function ItemLib.IsDyeable(item)\n-&gt; boolean\n</code></pre> <p>Returns true for dyeable items (equipment, except rings/amulet/belt).</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isequipment","title":"IsEquipment","text":"<pre><code>function ItemLib.IsEquipment(item)\n-&gt; boolean\n</code></pre> <p>Returns true if the item is an armor piece or a weapon.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isequipped","title":"IsEquipped","text":"<pre><code>function ItemLib.IsEquipped(char, item)\n-&gt; boolean\n</code></pre> <p>Returns true if item is equipped by char. Assumes the item cannot be equipped into an unintended slot. Rings and weapons are checked for both slots.</p> <p>@param char <code>Character</code></p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#islegal","title":"IsLegal","text":"<pre><code>function ItemLib.IsLegal(item)\n-&gt; boolean\n</code></pre> <p>Returns whether interacting with an item is legal.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#ismarkedaswares","title":"IsMarkedAsWares","text":"<pre><code>function ItemLib.IsMarkedAsWares(item)\n-&gt; boolean\n</code></pre> <p>Returns whether an item is marked as wares.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#ismeleeweapon","title":"IsMeleeWeapon","text":"<pre><code>function ItemLib.IsMeleeWeapon(item)\n-&gt; boolean\n</code></pre> <p>Returns whether item is a melee weapon (satisfying a MeleeWeapon requirement)</p> <p>Returns true for None-type weaponry.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#israngedweapon","title":"IsRangedWeapon","text":"<pre><code>function ItemLib.IsRangedWeapon(item)\n-&gt; boolean\n</code></pre> <p>Returns whether item is a ranged weapon; bow or crossbow only!</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isrune","title":"IsRune","text":"<pre><code>function ItemLib.IsRune(item)\n-&gt; boolean\n</code></pre> <p>Returns whether the item is a rune.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isshield","title":"IsShield","text":"<pre><code>function ItemLib.IsShield(item)\n-&gt; boolean\n</code></pre> <p>Returns whether item is a shield (satisfying a ShieldWeapon requirement)</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isunique","title":"IsUnique","text":"<pre><code>function ItemLib.IsUnique(item)\n-&gt; boolean\n</code></pre> <p>Returns whether an item is of Unique rarity.</p> <p>Returns <code>true</code> for Artifact items.</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#isweapon","title":"IsWeapon","text":"<pre><code>function ItemLib.IsWeapon(item)\n-&gt; boolean\n</code></pre> <p>Returns true if the item is a weapon (shields don't count!)</p> <p>@param item <code>Item</code></p>"},{"location":"Documentation/Utilities/Item/#seticonoverride","title":"SetIconOverride","text":"<pre><code>function ItemLib.SetIconOverride(item, icon) -- (Client-only)\n</code></pre> <p>Sets a custom icon for an item.</p> <p>Not persistent!</p> <p>@param item <code>Item</code></p> <p>@param icon <code>string</code></p> <p></p>"},{"location":"Documentation/Utilities/Library/","title":"Library","text":""},{"location":"Documentation/Utilities/Library/#library","title":"Library","text":"<p>The <code>Library</code> class is the internal base class for libraries in Epip. It offers general-purpose utility methods, such as logging, debug flags, event systems, as well as integrations with some core Epip libraries to simplify the registration of resources.</p> <p><code>Epip.InitializeLibrary()</code> is meant to be used to define libraries, though you are not intended to do so in your own mod - use Features instead.</p> <p>Library contains integrations with the following core Epip libraries:</p> <ul> <li>Text (for TSK registration and organizing TSKs by library/feature within the localization sheet)</li> <li>UserVars (for namespacing)</li> <li>OOP (for containing related subclasses)</li> </ul> <p>Perceptive readers will realize that these integrations indeed create circular dependencies. This concern is however pretty low on the list.</p> <p>The class includes some methods to filter out unwanted logging, however the recommended way to filter it is to use the \"control panel\" UI (<code>Feature_DebugMenu</code>, defaults to Left Ctrl+B) to set the logging level instead of calling the methods yourself anywhere.</p> <p></p>"},{"location":"Documentation/Utilities/Library/#library-class","title":"Library Class","text":"<p>Inherits from <code>Class</code>.</p>"},{"location":"Documentation/Utilities/Library/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Library/#addprofilingstep","title":"AddProfilingStep","text":"<pre><code>function Library:AddProfilingStep(stepID)\n</code></pre> <p>Adds a step to the current profiling session.</p> <p>Does nothing outside of Debug mode.</p> <p>@param stepID <code>string</code></p>"},{"location":"Documentation/Utilities/Library/#addsubscribableevent","title":"AddSubscribableEvent","text":"<pre><code>function Library:AddSubscribableEvent(evName, preventable)\n-&gt; Event\n</code></pre> <p>Registers a new event.</p> <p>@param evName <code>string</code></p> <p>@param preventable <code>boolean?</code> Defaults to false.</p>"},{"location":"Documentation/Utilities/Library/#addsubscribablehook","title":"AddSubscribableHook","text":"<pre><code>function Library:AddSubscribableHook(evName, preventable)\n-&gt; Event\n</code></pre> <p>Registers a new hook.</p> <p>@param evName <code>string</code></p> <p>@param preventable <code>boolean?</code> Defaults to false.</p>"},{"location":"Documentation/Utilities/Library/#create","title":"Create","text":"<pre><code>function Library.Create(modTable, id, data)\n-&gt; Library\n</code></pre> <p>Initializes a table as a Library.</p> <p>@param modTable <code>string</code></p> <p>@param id <code>string</code></p> <p>@param data <code>Library</code></p>"},{"location":"Documentation/Utilities/Library/#debug","title":"Debug","text":"<pre><code>function Library:Debug()\n</code></pre> <p>Show debug-level logging from this library.</p> <p>Only works in Developer mode.</p>"},{"location":"Documentation/Utilities/Library/#debuglog","title":"DebugLog","text":"<pre><code>function Library:DebugLog()\n</code></pre> <p>Log a value in Debug mode.</p>"},{"location":"Documentation/Utilities/Library/#dump","title":"Dump","text":"<pre><code>function Library:Dump(msg)\n</code></pre> <p>Dump a value to the console, in Debug mode.</p> <p>@param msg <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#endprofiling","title":"EndProfiling","text":"<pre><code>function Library:EndProfiling()\n</code></pre> <p>Ends the current profiling session.</p> <p>Does nothing outside of Debug mode.</p>"},{"location":"Documentation/Utilities/Library/#error","title":"Error","text":"<pre><code>function Library:Error(method)\n</code></pre> <p>Throws an error prefixed by the thrower method name.</p> <p>@param method <code>string</code></p>"},{"location":"Documentation/Utilities/Library/#getclass","title":"GetClass","text":"<pre><code>function Library:GetClass(className)\n-&gt; `T`\n</code></pre> <p>Returns a class's base table.</p> <p>@param className <code>`T`</code></p>"},{"location":"Documentation/Utilities/Library/#getmodvariable","title":"GetModVariable","text":"<pre><code>function Library:GetModVariable(modGUID, name)\n-&gt; any\n</code></pre> <p>Returns the value of a mod variable.</p> <p>@param modGUID <code>GUID</code></p> <p>@param name <code>string</code></p>"},{"location":"Documentation/Utilities/Library/#getpackageprefix","title":"GetPackagePrefix","text":"<pre><code>function Library:GetPackagePrefix()\n-&gt; string\n</code></pre> <p>Returns the package prefix for this library's subclasses.</p>"},{"location":"Documentation/Utilities/Library/#gettranslatedstringhandleforkey","title":"GetTranslatedStringHandleForKey","text":"<pre><code>function Library:GetTranslatedStringHandleForKey(localKey)\n-&gt; TranslatedStringHandle?\n</code></pre> <p>@param localKey <code>string</code></p>"},{"location":"Documentation/Utilities/Library/#getuservariable","title":"GetUserVariable","text":"<pre><code>function Library:GetUserVariable(component, variable)\n-&gt; any\n</code></pre> <p>Gets the value of a user variable on an entity component.</p> <p>@param component <code>UserVarsLib_CompatibleComponent</code></p> <p>@param variable <code>string|UserVarsLib_UserVar</code></p>"},{"location":"Documentation/Utilities/Library/#isdebug","title":"IsDebug","text":"<pre><code>function Library:IsDebug()\n-&gt; boolean\n</code></pre> <p>Returns whether <code>:Debug()</code> has been ran successfully.</p>"},{"location":"Documentation/Utilities/Library/#log","title":"Log","text":"<pre><code>function Library:Log(...)\n</code></pre> <p>Log a value.</p> <p>@param ... <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#logerror","title":"LogError","text":"<pre><code>function Library:LogError(...)\n</code></pre> <p>Log an error.</p> <p>@param ... <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#logmethod","title":"LogMethod","text":"<pre><code>function Library:LogMethod(method, ...)\n</code></pre> <p>Log a message in the format \"[MODULE] method(): msg\"</p> <p>@param method <code>any</code></p> <p>@param ... <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#lognotimplemented","title":"LogNotImplemented","text":"<pre><code>function Library:LogNotImplemented(methodName)\n</code></pre> <p>Logs a \"Not implemented\" warning. Use as a placeholder.</p> <p>@param methodName <code>string</code></p>"},{"location":"Documentation/Utilities/Library/#logwarning","title":"LogWarning","text":"<pre><code>function Library:LogWarning(...)\n</code></pre> <p>Log a warning.</p> <p>Requires logging level to be set to WARN or lower.</p> <p>@param ... <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#mute","title":"Mute","text":"<pre><code>function Library:Mute()\n</code></pre> <p>Stop all non-error, non-warning logging from this feature.</p>"},{"location":"Documentation/Utilities/Library/#rawlog","title":"RawLog","text":"<pre><code>function Library:RawLog(...)\n</code></pre> <p>Log values without any prefixing.</p> <p>@param ... <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#registerclass","title":"RegisterClass","text":"<pre><code>function Library:RegisterClass(className, class, parentClasses)\n-&gt; `T`\n</code></pre> <p>Registers a class.</p> <p>@param className <code>`T`</code></p> <p>@param class <code>table</code> Class table.</p> <p>@param parentClasses <code>string[]?</code> Classes this one inherits from.</p>"},{"location":"Documentation/Utilities/Library/#registermodvariable","title":"RegisterModVariable","text":"<pre><code>function Library:RegisterModVariable(modGUID, name, data)\n</code></pre> <p>Registers a mod variable.</p> <p>@param modGUID <code>GUID</code></p> <p>@param name <code>string</code></p> <p>@param data <code>UserVarsLib_ModVar</code></p>"},{"location":"Documentation/Utilities/Library/#registertranslatedstring","title":"RegisterTranslatedString","text":"<pre><code>function Library:RegisterTranslatedString(handle, tsk)\n-&gt; Library_TranslatedString\n</code></pre> <p>Registers a TSK.</p> <p>@param handle <code>TranslatedStringHandle</code></p> <p>@param tsk <code>Library_TranslatedString</code> ModTable, FeatureID and Handle fields are auto-initialized.</p>"},{"location":"Documentation/Utilities/Library/#registeruservariable","title":"RegisterUserVariable","text":"<pre><code>function Library:RegisterUserVariable(name, data)\n</code></pre> <p>Registers a user variable.</p> <p>@param name <code>string</code></p> <p>@param data <code>UserVarsLib_UserVar?</code></p>"},{"location":"Documentation/Utilities/Library/#setmodvariable","title":"SetModVariable","text":"<pre><code>function Library:SetModVariable(modGUID, name, value)\n</code></pre> <p>Sets the value of a mod variable.</p> <p>@param modGUID <code>GUID</code></p> <p>@param name <code>string</code></p> <p>@param value <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#setuservariable","title":"SetUserVariable","text":"<pre><code>function Library:SetUserVariable(component, variable, value)\n</code></pre> <p>Sets the value of a user variable.</p> <p>@param component <code>UserVarsLib_CompatibleComponent</code></p> <p>@param variable <code>string|UserVarsLib_UserVar</code></p> <p>@param value <code>any</code></p>"},{"location":"Documentation/Utilities/Library/#shutup","title":"ShutUp","text":"<pre><code>function Library:ShutUp()\n</code></pre> <p>Stop all non-error logging.</p>"},{"location":"Documentation/Utilities/Library/#startprofiling","title":"StartProfiling","text":"<pre><code>function Library:StartProfiling(id)\n</code></pre> <p>Starts a profiling session.</p> <p>Does nothing outside of Debug mode.</p> <p>@param id <code>string</code> Session ID.</p>"},{"location":"Documentation/Utilities/Library/#thrownotimplemented","title":"ThrowNotImplemented","text":"<pre><code>function Library:ThrowNotImplemented(methodName)\n</code></pre> <p>Throws a \"Not implemented\" error. Use as a placeholder.</p> <p>@param methodName <code>string</code></p> <p></p>"},{"location":"Documentation/Utilities/Mod/","title":"Mod","text":""},{"location":"Documentation/Utilities/Mod/#mod","title":"Mod","text":"<p>The <code>Mod</code> library contains wrapper methods for querying mod-related information.</p> <p>The <code>GUIDS</code> table contains the GUIDs of various notable mods.</p> <p></p>"},{"location":"Documentation/Utilities/Mod/#modlib-class","title":"ModLib Class","text":""},{"location":"Documentation/Utilities/Mod/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Mod/#get","title":"Get","text":"<pre><code>function ModLib.Get()\n-&gt; Module\n</code></pre> <p>Returns a mod by its guid.</p>"},{"location":"Documentation/Utilities/Mod/#getcurrentcontext","title":"GetCurrentContext","text":"<pre><code>function ModLib.GetCurrentContext()\n-&gt; \"Client\"|\"Server\"\n</code></pre> <p>Returns the context the caller script is running in.</p>"},{"location":"Documentation/Utilities/Mod/#getloadorder","title":"GetLoadOrder","text":"<pre><code>function ModLib.GetLoadOrder()\n-&gt; Module[]\n</code></pre> <p>Returns a list of the currently loaded mods.</p>"},{"location":"Documentation/Utilities/Mod/#getstoryversion","title":"GetStoryVersion","text":"<pre><code>function ModLib.GetStoryVersion(guid)\n-&gt; integer?, integer?, integer?, integer? -- Major, minor, revision, build version. Fails if the mod is not loaded.\n</code></pre> <p>Returns the story version of a mod.</p> <p>@param guid <code>GUID</code></p>"},{"location":"Documentation/Utilities/Mod/#isloaded","title":"IsLoaded","text":"<pre><code>function ModLib.IsLoaded(guid)\n</code></pre> <p>Returns whether a mod is loaded.</p> <p>@param guid <code>GUID</code></p> <p></p>"},{"location":"Documentation/Utilities/Net/","title":"Net","text":""},{"location":"Documentation/Utilities/Net/#net","title":"Net","text":"<p>The <code>Net</code> library offers wrapper methods to make working with network messages easier. Its main feature is automatically stringifying messages, removing the need to do so explicitly when using tables.</p> <p>Additionally, <code>Net.RegisterListener()</code> provides a way to register net listeners with IDE hints for the function parameters. This is done by defining a class with the name of the net message, for example: </p><pre><code>---@class EPIPENCOUNTERS_Vanity_ApplyAura : NetMessage, Net_SimpleMessage_NetID\n---@field AuraID string\n---@field BoneID string\nNet.RegisterListener(\"EPIPENCOUNTERS_Vanity_ApplyAura\", function(payload)\n-- The payload variable here will be of the type EPIPENCOUNTERS_Vanity_ApplyAura and offer auto-completion!\nend)\n</code></pre> <p>Additionally, for purposes of semantic clarity, a <code>NetMessage</code> class exists for denoting net events. Several other net message classes are defined with commonly used fields like <code>CharacterNetID</code>. You may have your net message classes inherit from these to reduce annotation duplication and to clarify the class's purpose as a net message.</p> <p></p>"},{"location":"Documentation/Utilities/Net/#netlib-class","title":"NetLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Net/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/Net/#messagereceived-event","title":"MessageReceived (event)","text":"<p>@field Channel <code>string</code></p> <p>@field Message <code>`T`|any</code> Will be a primitive if the payload sent wasn't a table.</p> <p>@field UserID <code>UserId</code></p>"},{"location":"Documentation/Utilities/Net/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Net/#broadcast","title":"Broadcast","text":"<pre><code>function NetLib.Broadcast(channel, message, excludedChar)\n</code></pre> <p>Sends a message to all peers.</p> <p>@param channel <code>`T`</code></p> <p>@param message <code>T?</code></p> <p>@param excludedChar <code>GUID?</code></p>"},{"location":"Documentation/Utilities/Net/#posttocharacter","title":"PostToCharacter","text":"<pre><code>function NetLib.PostToCharacter(char, channel, message)\n</code></pre> <p>Sends a message to the user that currently controls char. Fails if char is a summon.</p> <p>@param char <code>Character|GUID|NetId</code></p> <p>@param channel <code>`T`</code></p> <p>@param message <code>T?</code></p>"},{"location":"Documentation/Utilities/Net/#posttoowner","title":"PostToOwner","text":"<pre><code>function NetLib.PostToOwner(char, channel, message)\n</code></pre> <p>Sends a message to the owner of char. Use if you suspect the char might be a summon.</p> <p>@param char <code>Character</code></p> <p>@param channel <code>string</code></p> <p>@param message <code>any</code></p>"},{"location":"Documentation/Utilities/Net/#posttouser","title":"PostToUser","text":"<pre><code>function NetLib.PostToUser(user, channel, message, excludedChar)\n</code></pre> <p>Sends a message to a user.</p> <p>@param user <code>UserId</code></p> <p>@param channel <code>`T`</code></p> <p>@param message <code>T</code></p> <p>@param excludedChar <code>GUID?</code></p>"},{"location":"Documentation/Utilities/Net/#registerlistener","title":"RegisterListener","text":"<pre><code>function NetLib.RegisterListener(channel, func)\n</code></pre> <p>Wrapper for Ext.RegisterNetListener that parses json payloads and fires an event afterwards.</p> <p>@param channel <code>`T`</code></p> <p>@param func <code>fun(payload:`T`)</code></p> <p></p>"},{"location":"Documentation/Utilities/OOP/","title":"OOP","text":""},{"location":"Documentation/Utilities/OOP/#oop","title":"OOP","text":"<p>The <code>OOP</code> library implements a OOP system that supports multiple inheritance.</p> <p>A class is defined by a class definition table, passed onto <code>RegisterClass()</code> to initialize and register it. Classes to inherit from are defined during this call and cannot be changed afterwards. Instances of the classes will inherit keys from their class definition table.</p> <p>Inheritance is done via metatables, however special logic is used to extend this functionality to allow for multiple inheritance.</p> <p>If class A inherits from class B and C, indexing an instance (or the definition) of class A will:</p> <ol> <li>Check for the presence of the key within the instance/definition of A</li> <li>Check for the presence of the key within each superclass, in order of inheritance established during <code>RegisterClass()</code> (from first to last). This is done recursively for any superclasses those classes might have.</li> <li>Invoke <code>__index</code> of the class.</li> </ol> <p>There is currently no support for multiple inheritance of metamethods. They will only be checked in the direct superclass.</p> <p>There is no public constructor for classes by design; it is up to you to explicitly declare one. In Epip, these are typically called <code>Create()</code>. <code>__call</code> is not used for clarity reasons, as well as limitations in how it can be annotated (ex. no comments for parameters).</p> <p>Constructors must call <code>ClassDefinition:__Create()</code> to create an instance. This method takes an optional table parameter; if present, that table will become the class instance, keeping any keys it had already set. This is typically also the parameter of the public constructor, so as to avoid bloating the constructor's formal parameters, instead providing them via a table. Within your constructor you may afterwards perform any initializations of your own as necessary.</p> <p>As mentioned before, an instance must be of a single class type, and there are no public constructors; as a result, it is not possible to make an \"anonymous\" class that inherits from multiple classes. You must register an explicit class that inherits from the classes you want.</p> <p>Class instances are of the <code>Class</code> type. This type provides several utility methods for type-checking.</p> <p>When annotating your classes, be sure to make them inherit from <code>Class</code> to denote they use the OOP system as well as to expose the utility methods in the IDE.</p> <p>Note that Feature has integration with this library that allows registering and fetching classes related to the feature itself. If working with features, their calls should be used instead, as they will likely get automatic namespacing in the future. Currently, class names must be unique, lest new registrations will overwrite the previous definition.</p> <p></p>"},{"location":"Documentation/Utilities/OOP/#ooplib-class","title":"OOPLib Class","text":""},{"location":"Documentation/Utilities/OOP/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/OOP/#getclass","title":"GetClass","text":"<pre><code>function OOPLib.GetClass(className)\n-&gt; `T`\n</code></pre> <p>Returns the base table for a class.</p> <p>Throws if the class is not registered.</p> <p>@param className <code>`T`</code></p>"},{"location":"Documentation/Utilities/OOP/#isclass","title":"IsClass","text":"<pre><code>function OOPLib.IsClass(tbl, className)\n-&gt; boolean\n</code></pre> <p>Returns whether a table is a class table or instance.</p> <p>@param tbl <code>table</code></p> <p>@param className <code>string?</code> If present, `true` will only be returned if the table *is* the requested class.</p>"},{"location":"Documentation/Utilities/OOP/#registerclass","title":"RegisterClass","text":"<pre><code>function OOPLib.RegisterClass(className, class, parentClasses)\n-&gt; `T`\n</code></pre> <p>Registers a class.</p> <p>@param className <code>string|`T`</code></p> <p>@param class <code>table</code></p> <p>@param parentClasses <code>string[]?</code> Classes this one inherits from.</p>"},{"location":"Documentation/Utilities/OOP/#setmetatable","title":"SetMetatable","text":"<pre><code>function OOPLib.SetMetatable(table, metatable)\n</code></pre> <p>Sets a table's metatable. __index is set to index the metatable itself, using the metatable's __index as a fallback.</p> <p>@param table <code>table</code> Mutated.</p> <p>@param metatable <code>table</code></p> <p></p> <p></p>"},{"location":"Documentation/Utilities/OOP/#class-class","title":"Class Class","text":""},{"location":"Documentation/Utilities/OOP/#methods_1","title":"Methods","text":""},{"location":"Documentation/Utilities/OOP/#getclassdefinition","title":"GetClassDefinition","text":"<pre><code>function Class:GetClassDefinition()\n-&gt; Class\n</code></pre> <p>Returns the main table that defines this class instance.</p>"},{"location":"Documentation/Utilities/OOP/#getclassname","title":"GetClassName","text":"<pre><code>function Class:GetClassName()\n-&gt; string\n</code></pre> <p>Returns the name of the class.</p>"},{"location":"Documentation/Utilities/OOP/#getparentclasses","title":"GetParentClasses","text":"<pre><code>function Class:GetParentClasses()\n-&gt; Class[]\n</code></pre> <p>Returns the parent classes of the class.</p>"},{"location":"Documentation/Utilities/OOP/#implementsclass","title":"ImplementsClass","text":"<pre><code>function Class:ImplementsClass(className)\n-&gt; boolean\n</code></pre> <p>Returns whether this class implements another.</p> <p>Hierarchies are considered.</p> <p>@param className <code>string</code></p>"},{"location":"Documentation/Utilities/OOP/#__create","title":"__Create","text":"<pre><code>---@protected\nfunction Class:__Create(data)\n-&gt; Class\n</code></pre> <p>Creates a new instance of the class.</p> <p>@param data <code>table?</code> Table with the initial fields of the instance.</p> <p></p>"},{"location":"Documentation/Utilities/Pointer/","title":"Pointer","text":""},{"location":"Documentation/Utilities/Pointer/#pointer","title":"Pointer","text":"<p>Client-only</p> <p>The <code>Pointer</code> library offers methods and events related to the state of the pointer - that is, what the user is selecting with their cursor. This includes world objects as well as drag-drop.</p> <p>It's primarily a wrapper around <code>Ext.UI.GetPickingState()</code>. In addition to methods to quickly fetch its entities, it offers events for when they change (when the user starts/stops hovering over a new entity).</p> <p></p>"},{"location":"Documentation/Utilities/Pointer/#pointerlib-class","title":"PointerLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Pointer/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/Pointer/#hovercharacterchanged-event","title":"HoverCharacterChanged (event)","text":"<p>@field Character <code>EclCharacter?</code></p>"},{"location":"Documentation/Utilities/Pointer/#hovercharacter2changed-event","title":"HoverCharacter2Changed (event)","text":"<p>Fired when the corpse character over the pointer changes.</p> <p>@field Character <code>EclCharacter?</code></p>"},{"location":"Documentation/Utilities/Pointer/#hoveritemchanged-event","title":"HoverItemChanged (event)","text":"<p>@field Item <code>EclItem?</code></p>"},{"location":"Documentation/Utilities/Pointer/#hoverentitychanged-event","title":"HoverEntityChanged (event)","text":"<p>@field Entity <code>Entity?</code></p>"},{"location":"Documentation/Utilities/Pointer/#dragdropstatechanged-event","title":"DragDropStateChanged (event)","text":"<p>Fired when a player starts or ends a drag drop. </p> <p>@field State <code>DragDropManagerPlayerDragInfo?</code> `nil` if the player stopped dragging.</p> <p>@field PlayerIndex <code>integer</code></p>"},{"location":"Documentation/Utilities/Pointer/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Pointer/#getcurrentcharacter","title":"GetCurrentCharacter","text":"<pre><code>function PointerLib.GetCurrentCharacter(playerIndex, includeDead) -- (Client-only)\n-&gt; EclCharacter?\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p> <p>@param includeDead <code>boolean?</code> Defaults to false.</p>"},{"location":"Documentation/Utilities/Pointer/#getcurrententity","title":"GetCurrentEntity","text":"<pre><code>function PointerLib.GetCurrentEntity(playerIndex) -- (Client-only)\n-&gt; Entity?\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#getcurrentitem","title":"GetCurrentItem","text":"<pre><code>function PointerLib.GetCurrentItem(playerIndex) -- (Client-only)\n-&gt; EclItem?\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#getdragdropstate","title":"GetDragDropState","text":"<pre><code>function PointerLib.GetDragDropState(playerIndex) -- (Client-only)\n-&gt; DragDropManagerPlayerDragInfo\n</code></pre> <p>Returns the drag-drop system state for a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#getdraggeditem","title":"GetDraggedItem","text":"<pre><code>function PointerLib.GetDraggedItem(playerIndex) -- (Client-only)\n-&gt; EclItem?\n</code></pre> <p>Returns the item being dragged by a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#getdraggedskill","title":"GetDraggedSkill","text":"<pre><code>function PointerLib.GetDraggedSkill(playerIndex) -- (Client-only)\n-&gt; string? -- Can be an action as well.\n</code></pre> <p>Returns the skill being dragged by a player.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#getwalkableposition","title":"GetWalkablePosition","text":"<pre><code>function PointerLib.GetWalkablePosition(playerIndex) -- (Client-only)\n-&gt; Vector3D\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#getworldposition","title":"GetWorldPosition","text":"<pre><code>function PointerLib.GetWorldPosition(playerIndex) -- (Client-only)\n-&gt; Vector3D\n</code></pre> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p>"},{"location":"Documentation/Utilities/Pointer/#isdragging","title":"IsDragging","text":"<pre><code>function PointerLib.IsDragging(playerIndex) -- (Client-only)\n-&gt; boolean\n</code></pre> <p>Returns whether the player's cursor is dragging anything.</p> <p>@param playerIndex <code>integer?</code> Defaults to 1.</p> <p></p>"},{"location":"Documentation/Utilities/Text/","title":"Text","text":""},{"location":"Documentation/Utilities/Text/#text","title":"Text","text":"<p>The <code>Text</code> table offers utility methods for working with text and formatting tags.</p> <p>It also power's Epip custom TSK system, intended to make exporting strings for translation more easily, through the <code>TextLib_TranslatedString</code> class. This class contains not only the handle and default text of a string, but also contextual data that is later used to populate the public translation sheets.</p> <p>Internally, Epip TSKs still use the game's handle system. However, translations are created and loaded differently, through <code>.json</code> files.</p> <p>When lua loads, Epip looks for these translation files in the <code>\\Data\\Mods\\{Mod}_{GUID}\\Localization\\Epip\\{Game language}\\{Mod table}.json</code> folder for each mod, following the load order. <code>{Mod table}.json</code> files are checked for every other mod present. This allows mods to provide translations or string overrides for any other mod using Epip's TSK system. Epip itself also uses this system to load the publicly contributed translations. A single mod can provide translation files for multiple mods, by creating multiple <code>{Mod table}.json</code> files within a language folder.</p> <p>The game language IDs correspond to the ones used by the game:</p> <pre><code>English\nAmlatspanish\nChinese\nChinesetraditional\nCzech\nFrench\nGerman\nItalian\nJapanese\nKorean\nPolish\nPortuguesebrazil\nRussian\nSpanish\n</code></pre> <p>It's worth noting that the game supports adding custom languages by editing the <code>Language</code> field in <code>config.lsx</code> (thereby changing the <code>ChatLanguage</code> global switch). Epip's system will consider such cases for loading translations.</p> <p>For information on how the public translation sheets are handled, see this page.</p>"},{"location":"Documentation/Utilities/Text/#commonstrings","title":"CommonStrings","text":"<p><code>CommonStrings.lua</code> contains TSKs for generic strings that are reused across many different contexts. Strings should be added here if they are of general usage and their translation won't differ across different contexts. These are accessed via the <code>Text.CommonStrings</code>, a raw table with no particularities.</p> <p>The following VSC snippet is used to add entries to CommonStrings:</p> <pre><code>\"commonstring\": {\n\"scope\": \"lua\",\n\"prefix\": \"commonstring\",\n\"body\": [\n\"Text.CommonStrings.$1 = Text.RegisterTranslatedString({\",\n\"   Handle = \\\"h${UUID/[\\\\-]/g/g}\\\",\",\n\"   Text = \\\"$1\\\",\",\n\"})\",\n],\n},\n</code></pre> <p></p>"},{"location":"Documentation/Utilities/Text/#textlib-class","title":"TextLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Text/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/Text/#gettranslationtemplateentry-hook","title":"GetTranslationTemplateEntry (hook)","text":"<p>@field Entry <code>TextLib_LocalizationTemplate_Entry</code> Hookable. Set to nil to prevent an entry from getting exported.</p> <p>@field TranslatedString <code>TextLib_TranslatedString</code></p>"},{"location":"Documentation/Utilities/Text/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Text/#addpadding","title":"AddPadding","text":"<pre><code>function TextLib.AddPadding(str, minLength, paddingCharacter, direction)\n-&gt; string\n</code></pre> <p>Adds padding characters to a string to meet a minimum length.</p> <p>@param str <code>string</code></p> <p>@param minLength <code>integer</code></p> <p>@param paddingCharacter <code>string?</code> Defaults to `\" \"`</p> <p>@param direction <code>(\"front\"|\"back\")?</code> Defaults to `\"front\"`.</p>"},{"location":"Documentation/Utilities/Text/#appendline","title":"AppendLine","text":"<pre><code>function TextLib.AppendLine(str1, str2)\n-&gt; string\n</code></pre> <p>Joins two strings inserting a line break between them.</p> <p>@param str1 <code>string</code> The line break is not added if this string is empty.</p> <p>@param str2 <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#capitalize","title":"Capitalize","text":"<pre><code>function TextLib.Capitalize(str)\n-&gt; string\n</code></pre> <p>Capitalizes the first letter of the string.</p> <p>https://stackoverflow.com/a/2421746</p> <p>@param str <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#contains","title":"Contains","text":"<pre><code>function TextLib.Contains(str, pattern)\n</code></pre> <p>Returns whether str contains the pattern.</p> <p>@param str <code>string</code></p> <p>@param pattern <code>pattern</code></p>"},{"location":"Documentation/Utilities/Text/#dump","title":"Dump","text":"<pre><code>function TextLib.Dump(obj, opts)\n-&gt; string\n</code></pre> <p>Shorthand for Ext.DumpExport() which does not require you to explicitly define the default options (Beautify, StringifyInternalTypes, etc.)</p> <p>@param obj <code>any</code></p> <p>@param opts <code>unknown?</code> TODO specify type</p>"},{"location":"Documentation/Utilities/Text/#equalizespace","title":"EqualizeSpace","text":"<pre><code>function TextLib.EqualizeSpace(str1, str2, space)\n-&gt; string\n</code></pre> <p>Concatenates 2 strings and adds enough whitespace padding inbetween them to ensure a specific length.</p> <p>@param str1 <code>string</code></p> <p>@param str2 <code>string</code></p> <p>@param space <code>integer</code></p>"},{"location":"Documentation/Utilities/Text/#escapepatterncharacters","title":"EscapePatternCharacters","text":"<pre><code>function TextLib.EscapePatternCharacters(str)\n-&gt; string\n</code></pre> <p>Escapes characters that have a special meaning in lua patterns.</p> <p>Source: https://github.com/lua-nucleo/lua-nucleo/blob/v0.1.0/lua-nucleo/string.lua#L245-L267</p> <p>@param str <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#format","title":"Format","text":"<pre><code>function TextLib.Format(str, formatData)\n-&gt; string \n</code></pre> <p>Format a string.</p> <p>@param str <code>string</code></p> <p>@param formatData <code>TextFormatData</code></p>"},{"location":"Documentation/Utilities/Text/#generateguid","title":"GenerateGUID","text":"<pre><code>function TextLib.GenerateGUID(pattern)\n-&gt; GUID\n</code></pre> <p>Generate a random GUID.</p> <p>Source: https://gist.github.com/jrus/3197011</p> <p>@param pattern <code>pattern?</code> Defaults to GUID4 pattern.</p>"},{"location":"Documentation/Utilities/Text/#generatelocalizationtemplate","title":"GenerateLocalizationTemplate","text":"<pre><code>function TextLib.GenerateLocalizationTemplate(modTable, existingTemplate)\n-&gt; TextLib_LocalizationTemplate, integer[]?, integer[]? -- Second param is new strings, third is outdated strings. Second param onwards is only returned while patching.\n</code></pre> <p>Generates a template file for localizing strings registered through this library.</p> <p>@param modTable <code>string?</code> Defaults to \"EpipEncounters\"</p> <p>@param existingTemplate <code>TextLib_LocalizationTemplate?</code> If present, translated strings from this template will be patched into the new one, if the reference text is still up-to-date.</p>"},{"location":"Documentation/Utilities/Text/#generatetranslatedstringhandle","title":"GenerateTranslatedStringHandle","text":"<pre><code>function TextLib.GenerateTranslatedStringHandle()\n-&gt; TranslatedStringHandle\n</code></pre> <p>Generates a random handle in the format that Larian uses for TranslatedStringHandle.</p>"},{"location":"Documentation/Utilities/Text/#getcurrentlanguage","title":"GetCurrentLanguage","text":"<pre><code>function TextLib.GetCurrentLanguage()\n-&gt; string\n</code></pre> <p>Returns the language the game is set to.</p>"},{"location":"Documentation/Utilities/Text/#gettranslatedstring","title":"GetTranslatedString","text":"<pre><code>function TextLib.GetTranslatedString(handle, fallBack)\n-&gt; string -- Defaults to the handle, or fallBack if specified.\n</code></pre> <p>Returns the string bound to a TranslatedStringHandle, or a key.</p> <p>@param handle <code>TranslatedStringHandle|string|TextLib_TranslatedString</code> Accepts handles or keys.</p> <p>@param fallBack <code>string?</code></p>"},{"location":"Documentation/Utilities/Text/#gettranslatedstringtranslation","title":"GetTranslatedStringTranslation","text":"<pre><code>function TextLib.GetTranslatedStringTranslation(handle, language)\n-&gt; string? -- `nil` if the handle is not translated\n</code></pre> <p>Returns the translation for a handle.</p> <p>@param handle <code>TranslatedStringHandle</code></p> <p>@param language <code>string?</code> Defaults to current language.</p>"},{"location":"Documentation/Utilities/Text/#istranslatedstringregistered","title":"IsTranslatedStringRegistered","text":"<pre><code>function TextLib.IsTranslatedStringRegistered(handle)\n-&gt; boolean\n</code></pre> <p>Returns whether a TSK handle was registered through the Text library.</p> <p>@param handle <code>TranslatedStringHandle</code></p>"},{"location":"Documentation/Utilities/Text/#join","title":"Join","text":"<pre><code>function TextLib.Join(str1, str2, separator)\n</code></pre> <p>Joins two strings together.</p> <p>@param str1 <code>string</code></p> <p>@param str2 <code>string</code></p> <p>@param separator <code>string?</code> Defaults to ` `</p>"},{"location":"Documentation/Utilities/Text/#loadlocalization","title":"LoadLocalization","text":"<pre><code>function TextLib.LoadLocalization(language, filePath)\n</code></pre> <p>Loads a localization file. Must be in the format generated by GenerateLocalizationTemplate()</p> <p>@param language <code>string</code></p> <p>@param filePath <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#registertranslatedstring","title":"RegisterTranslatedString","text":"<pre><code>function TextLib.RegisterTranslatedString(handle, text)\n-&gt; TextLib_TranslatedString\n</code></pre> <p>Registers a translated string.</p> <p>@param handle <code>TranslatedStringHandle</code></p> <p>@param text <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#removeguidprefix","title":"RemoveGUIDPrefix","text":"<pre><code>function TextLib.RemoveGUIDPrefix(guid)\n-&gt; GUID\n</code></pre> <p>Returns the GUID passed by parameter with any prefixes removed.</p> <p>@param guid <code>PrefixedGUID</code></p>"},{"location":"Documentation/Utilities/Text/#removetrailingzeros","title":"RemoveTrailingZeros","text":"<pre><code>function TextLib.RemoveTrailingZeros(num)\n-&gt; string\n</code></pre> <p>Removes trailing zeros from a number and returns it as string.</p> <p>@param num <code>number</code></p>"},{"location":"Documentation/Utilities/Text/#round","title":"Round","text":"<pre><code>function TextLib.Round(value, decimals)\n-&gt; string\n</code></pre> <p>Returns a string representation of a number, rounded.</p> <p>@param value <code>number</code></p> <p>@param decimals <code>integer</code> Defaults to 0.</p>"},{"location":"Documentation/Utilities/Text/#separatepascalcase","title":"SeparatePascalCase","text":"<pre><code>function TextLib.SeparatePascalCase(str)\n-&gt; string\n</code></pre> <p>Returns a string with spaces inserted inbetween PascalCase words.</p> <p>@param str <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#setstringkey","title":"SetStringKey","text":"<pre><code>function TextLib.SetStringKey(key, handle)\n</code></pre> <p>Binds a TSK to a string key.</p> <p>@param key <code>string</code></p> <p>@param handle <code>TranslatedStringHandle</code></p>"},{"location":"Documentation/Utilities/Text/#settranslatedstring","title":"SetTranslatedString","text":"<pre><code>function TextLib.SetTranslatedString(handle, text)\n</code></pre> <p>Sets the text of a translated string.</p> <p>@param handle <code>TranslatedStringHandle</code></p> <p>@param text <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#settranslatedstringtranslation","title":"SetTranslatedStringTranslation","text":"<pre><code>function TextLib.SetTranslatedStringTranslation(handle, language, text)\n</code></pre> <p>Sets the translation of a TSK.</p> <p>The handle's bound text will be updated if the game's language matches.</p> <p>@param handle <code>TranslatedStringHandle</code></p> <p>@param language <code>string</code></p> <p>@param text <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#split","title":"Split","text":"<pre><code>function TextLib.Split(inputstr, sep)\n-&gt; string[]\n</code></pre> <p>Split a string by delimiter. Source: https://stackoverflow.com/questions/1426954/split-string-in-lua</p> <p>@param inputstr <code>string</code></p> <p>@param sep <code>string</code></p>"},{"location":"Documentation/Utilities/Text/#split_2","title":"Split_2","text":"<pre><code>function TextLib.Split_2()\n</code></pre>"},{"location":"Documentation/Utilities/Text/#stripfonttags","title":"StripFontTags","text":"<pre><code>function TextLib.StripFontTags(str)\n-&gt; string\n</code></pre> <p>Removes all  tags from a string. WIP!</p> <p>@param str <code>string</code></p> <p></p>"},{"location":"Documentation/Utilities/Texture/","title":"Texture","text":""},{"location":"Documentation/Utilities/Texture/#texture","title":"Texture","text":"<p>The <code>Texture</code> library is used to store and reference texture resources.</p> <p>It is mainly used to store UI textures used for Generic styles, via the <code>Feature_GenericUITextures</code> feature..</p> <p></p>"},{"location":"Documentation/Utilities/Texture/#texturelib_texture-class","title":"TextureLib_Texture Class","text":"<p>@field Name <code>string</code> Resource name.</p> <p>@field GUID <code>GUID</code></p> <p></p> <p></p>"},{"location":"Documentation/Utilities/Texture/#texturelib-class","title":"TextureLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Texture/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Texture/#gettexture","title":"GetTexture","text":"<pre><code>function TextureLib.GetTexture(name)\n-&gt; TextureLib_Texture\n</code></pre> <p>Returns a texture by name.</p> <p>@param name <code>string</code></p>"},{"location":"Documentation/Utilities/Texture/#registertexture","title":"RegisterTexture","text":"<pre><code>function TextureLib.RegisterTexture(name, data)\n-&gt; TextureLib_Texture\n</code></pre> <p>Registers a texture resource.</p> <p>@param name <code>string</code></p> <p>@param data <code>TextureLib_Texture</code> `Name` is auto-initialized.</p> <p></p>"},{"location":"Documentation/Utilities/Timer/","title":"Timer","text":""},{"location":"Documentation/Utilities/Timer/#timer","title":"Timer","text":"<p>The <code>Timer</code> library implements timers, for running scripting with a delay. Since listeners for the timers ending can be registered in-line, they are usually cleaner to use than the Osiris timers. Additionally, they are available on the client.</p> <p></p>"},{"location":"Documentation/Utilities/Timer/#timerlib-class","title":"TimerLib Class","text":"<p>Inherits from <code>Feature</code>.</p>"},{"location":"Documentation/Utilities/Timer/#events-and-hooks","title":"Events and Hooks","text":""},{"location":"Documentation/Utilities/Timer/#timercompleted-event","title":"TimerCompleted (event)","text":"<p>@field Timer <code>TimerLib_Entry</code></p>"},{"location":"Documentation/Utilities/Timer/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Timer/#gettimer","title":"GetTimer","text":"<pre><code>function TimerLib.GetTimer(stringID)\n-&gt; TimerLib_Entry\n</code></pre> <p>Returns the timer with the passed string ID.</p> <p>@param stringID <code>string</code></p>"},{"location":"Documentation/Utilities/Timer/#remove","title":"Remove","text":"<pre><code>function TimerLib.Remove(timer)\n</code></pre> <p>@param timer <code>TimerLib_Entry</code></p>"},{"location":"Documentation/Utilities/Timer/#start","title":"Start","text":"<pre><code>function TimerLib.Start(id, seconds, handler, timerType)\n-&gt; TimerLib_Entry|TimerLib_TickTimerEntry\n</code></pre> <p>@param id <code>string?</code></p> <p>@param seconds <code>number</code></p> <p>@param handler <code>fun(ev:TimerLib_Event_TimerCompleted)</code></p> <p>@param timerType <code>(\"Normal\"|\"Tick\")?</code> Defaults to `\"Normal\"`</p>"},{"location":"Documentation/Utilities/Timer/#startticktimer","title":"StartTickTimer","text":"<pre><code>function TimerLib.StartTickTimer(id, ticks, handler)\n-&gt; TimerLib_TickTimerEntry\n</code></pre> <p>@param id <code>string?</code></p> <p>@param ticks <code>number</code></p> <p>@param handler <code>fun(ev:TimerLib_Event_TimerCompleted)</code></p>"},{"location":"Documentation/Utilities/Timer/#__test","title":"__Test","text":"<pre><code>---@protected\nfunction TimerLib:__Test()\n</code></pre>"},{"location":"Documentation/Utilities/UserVars/","title":"UserVars","text":""},{"location":"Documentation/Utilities/UserVars/#uservars","title":"UserVars","text":"<p>The <code>UserVars</code> library contains wrapper methods for working with UserVars and ModVars. It allows fetching definitions of variables as well as their values.</p> <p>You may also define default values to return if a variable is unset on the component/modvar.</p> <p></p>"},{"location":"Documentation/Utilities/UserVars/#uservarslib_uservar-class","title":"UserVarsLib_UserVar Class","text":"<p>@field ID <code>string</code></p> <p>@field Client <code>boolean</code></p> <p>@field Server <code>boolean</code></p> <p>@field WriteableOnServer <code>boolean</code> Defaults to `true`.</p> <p>@field WriteableOnClient <code>boolean</code> Defaults to `false`.</p> <p>@field Persistent <code>boolean</code></p> <p>@field SyncToClient <code>boolean</code> Defaults to `true`.</p> <p>@field SyncToServer <code>boolean</code> Defaults to `true`.</p> <p>@field SyncOnWrite <code>boolean</code> Defaults to `false`.</p> <p>@field SyncOnTick <code>boolean</code> Defaults to `true`.</p> <p>@field DontCache <code>boolean</code> Defaults to `false`</p> <p>@field DefaultValue <code>any?</code></p> <p></p> <p></p>"},{"location":"Documentation/Utilities/UserVars/#uservarslib-class","title":"UserVarsLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/UserVars/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/UserVars/#getmodvardefinition","title":"GetModVarDefinition","text":"<pre><code>function UserVarsLib.GetModVarDefinition(modGUID, var)\n-&gt; UserVarsLib_ModVar\n</code></pre> <p>Returns the definition of a mod variable.</p> <p>@param modGUID <code>GUID</code></p> <p>@param var <code>string</code></p>"},{"location":"Documentation/Utilities/UserVars/#getmodvarvalue","title":"GetModVarValue","text":"<pre><code>function UserVarsLib.GetModVarValue(modGUID, varName)\n-&gt; any? -- Defaults to `DefaultValue`.\n</code></pre> <p>Returns the value of a mod var.</p> <p>@param modGUID <code>GUID</code></p> <p>@param varName <code>string</code></p>"},{"location":"Documentation/Utilities/UserVars/#getmodvariables","title":"GetModVariables","text":"<pre><code>function UserVarsLib.GetModVariables(modGUID)\n-&gt; table\n</code></pre> <p>Returns the mod variables of a mod.</p> <p>@param modGUID <code>GUID</code></p>"},{"location":"Documentation/Utilities/UserVars/#getuservardefinition","title":"GetUserVarDefinition","text":"<pre><code>function UserVarsLib.GetUserVarDefinition(varName)\n-&gt; UserVarsLib_UserVar\n</code></pre> <p>Returns the definition of a user variable.</p> <p>@param varName <code>string</code></p>"},{"location":"Documentation/Utilities/UserVars/#getuservarvalue","title":"GetUserVarValue","text":"<pre><code>function UserVarsLib.GetUserVarValue(component, varName)\n-&gt; any? -- Defaults to `DefaultValue`.\n</code></pre> <p>Returns the value of a user variable for an entity.</p> <p>@param component <code>UserVarsLib_CompatibleComponent</code></p> <p>@param varName <code>string</code></p>"},{"location":"Documentation/Utilities/UserVars/#registermodvariable","title":"RegisterModVariable","text":"<pre><code>function UserVarsLib.RegisterModVariable(modGUID, name, data)\n-&gt; UserVarsLib_ModVar\n</code></pre> <p>Registers a mod variable.</p> <p>@param modGUID <code>GUID</code></p> <p>@param name <code>string</code></p> <p>@param data <code>UserVarsLib_ModVar?</code> Defaults to default values (see class).</p>"},{"location":"Documentation/Utilities/UserVars/#registeruservariable","title":"RegisterUserVariable","text":"<pre><code>function UserVarsLib.RegisterUserVariable(name, data)\n-&gt; UserVarsLib_UserVar\n</code></pre> <p>Registers a user variable.</p> <p>Must be done once for each context where you want the variable to exist.</p> <p>@param name <code>string</code></p> <p>@param data <code>UserVarsLib_UserVar?</code> Defaults to default values (see class).</p> <p></p>"},{"location":"Documentation/Utilities/Vector/","title":"Vector","text":""},{"location":"Documentation/Utilities/Vector/#vector","title":"Vector","text":"<p>The <code>Vector</code> library offers a numeric vector data structure and methods to work with them.</p> <p>They are intended to be used as immutables. All methods and operators return a new instance of the output vector.</p> <p><code>Vector</code> objects implement various operators; the binary ones only usable for vectors of the same arity:</p> <ul> <li><code>+</code>: sum of components.</li> <li><code>-</code>: subtraction of components.</li> <li><code>*</code>: dot product.</li> <li><code>^</code>: negation; inverts the sign of all components.</li> </ul> <p>Additionally, <code>vector.Arity</code> or <code>vector.Length</code> will return the amount of elements in the vector.</p> <p>In Epip, their primary use is semantic clarity for functions that require 2D coordinates as parameters.</p> <p></p>"},{"location":"Documentation/Utilities/Vector/#vectorlib-class","title":"VectorLib Class","text":"<p>Inherits from <code>Library</code>.</p>"},{"location":"Documentation/Utilities/Vector/#methods","title":"Methods","text":""},{"location":"Documentation/Utilities/Vector/#areequal","title":"AreEqual","text":"<pre><code>function VectorLib.AreEqual(v1, v2)\n</code></pre> <p>Returns whether 2 vectors are equal.</p> <p>Vectors are equal if they have the same arity and components.</p> <p>@param v1 <code>Vector</code></p> <p>@param v2 <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#clone","title":"Clone","text":"<pre><code>function VectorLib.Clone(vector)\n-&gt; Vector\n</code></pre> <p>@param vector <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#create","title":"Create","text":"<pre><code>function VectorLib.Create()\n-&gt; Vector\n</code></pre> <p>Creates a vector of variable length.</p>"},{"location":"Documentation/Utilities/Vector/#dotproduct","title":"DotProduct","text":"<pre><code>function VectorLib.DotProduct(v1, v2)\n-&gt; number\n</code></pre> <p>Performs a dot product between two vectors of the same dimensions.</p> <p>@param v1 <code>Vector</code></p> <p>@param v2 <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#getlength","title":"GetLength","text":"<pre><code>function VectorLib.GetLength(vector)\n-&gt; number\n</code></pre> <p>@param vector <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#getnormalized","title":"GetNormalized","text":"<pre><code>function VectorLib.GetNormalized(vector)\n-&gt; Vector New instance; does not mutate.-- instance; does not mutate.\n</code></pre> <p>@param vector <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#negate","title":"Negate","text":"<pre><code>function VectorLib.Negate(v)\n-&gt; Vector\n</code></pre> <p>@param v <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#scalarproduct","title":"ScalarProduct","text":"<pre><code>function VectorLib.ScalarProduct(v, scalar)\n-&gt; Vector\n</code></pre> <p>Performs a scalar product of a vector, multiplying each of its components.</p> <p>@param v <code>Vector</code></p> <p>@param scalar <code>number</code></p>"},{"location":"Documentation/Utilities/Vector/#subtract","title":"Subtract","text":"<pre><code>function VectorLib.Subtract(v1, v2)\n-&gt; Vector\n</code></pre> <p>Subtracts the components of two vectors of the same dimension.</p> <p>@param v1 <code>Vector</code></p> <p>@param v2 <code>Vector</code></p>"},{"location":"Documentation/Utilities/Vector/#sum","title":"Sum","text":"<pre><code>function VectorLib.Sum(v1, v2)\n-&gt; Vector\n</code></pre> <p>Sums the components of two vectors of the same dimensions.</p> <p>@param v1 <code>Vector</code></p> <p>@param v2 <code>Vector</code></p> <p></p>"},{"location":"Epip/","title":"Epip","text":""},{"location":"Epip/#epip","title":"Epip","text":"<p>The <code>Epip</code> table stores Features and metadata related to the mod.</p> <p>(documentation pending)</p>"},{"location":"Epip/EpicEnemies/","title":"EpicEnemies","text":""},{"location":"Epip/EpicEnemies/#epic-enemies","title":"Epic Enemies","text":"<p>Epic Enemies is a randomizer feature that gives enemies in combat random keyword effects, artifacts and other boons. It is accessed from its own settings tab in the settings menu.</p>"},{"location":"Epip/EpicEnemies/#creating-effects","title":"Creating Effects","text":"<p>An Effect is a perk that an enemy can roll if Epic Enemies is enabled. Effects can belong to a category; each category gets their own settings sliders for all its effects in the UI.</p> <p>If you wish to add effects, you should register your own category for them with <code>RegisterEffectCategory()</code>. You may define the effects while defining the category (of type <code>EpicEnemiesEffect</code>), and they will be automatically registered as well. Registering effects directly with <code>RegisterEffect()</code> does not bind them to any category by default, meaning they will not appear in the UI and will not be customizable - this is great if you wish to create auxiliary effects with 0 weight and script their applications yourself.</p> <p>Effects can be rolled on a character with <code>InitializeCharacter()</code>. By default, this happens when they enter combat, and numerous characters are excluded: players, summons, and already initialized characters. You may tag characters with <code>PIP_EpicEnemies_Ineligible</code> to exclude them as well.</p> <p>Effects from a character can be removed with <code>CleanupCharacter()</code>; this will cause their stat boosts, Special Logic, and other perks from their effects to be cleaned up as well. By default, this only happens when lua is reset (for debugging).</p> <p>When <code>InitializeCharacter()</code> is called, effects are rolled randomly based on their weight and eligibility. You may hook <code>IsEffectApplicable</code> to control which effects a character can receive. The <code>EpicEnemiesEffectTemplates</code> feature script does so to prevent keyword mutators from being granted to characters that do not possess an activator effect.</p> <p>The <code>EpicEnemiesEffectTemplates</code> feature script also implements multiple types of effects that power generic functionality:</p> <ul> <li>SpecialLogic</li> <li>Artifacts</li> <li>Summons</li> <li>Statuses</li> <li>ExtendedStats</li> <li>FlexStats</li> <li>RequiredSkills</li> </ul> <p>This is done by extending the the <code>EpicEnemiesEffect</code> class into <code>EpicEnemiesExtendedEffect</code> - you need only to add its extra fields to your effect definitions, and the event listeners from that script will take care of making them work.</p> <p>Of course, you may also add functionality yourself the same way, as detailed in the next section.</p>"},{"location":"Epip/EpicEnemies/#scripting-effects","title":"Scripting Effects","text":"<p>Effects can be in 2 states: applied and activated. \"Applied\" means the character has the effect, but its benefits are dormant and not yet active. \"Activated\" effects grant their benefits (stats, Special Logic, etc.).</p> <p>The condition for effects is based on the <code>ActivationCondition</code> field. If unspecified, it defaults to the \"EffectApplied\" type, which causes the effect to be activated as soon as it is applied (during initialization). If you specify a custom <code>ActivationCondition</code>, you will have to activate the effect's perks manually.</p> <p>The <code>EpicEnemiesEffectConditions</code> feature script implements some custom ActivationConditions:</p> <ul> <li><code>TurnStart</code>: effect activates at the start of X turn, optionally repeating (effects support multiple activations).</li> <li><code>HealthThreshold</code>: effect activates when beneath a Vitality/Armor threshold.</li> <li><code>BatteredHarried</code>: effect activates upon reaching X B/H.</li> <li><code>StatusGained</code>: effect activates upon gaining a certain status.</li> </ul> <p>Activation attempts are done through the <code>ActivateEffects()</code> call, which takes an ActivationCondition type (the string ID) as well as some params (for example, activation attemps of <code>BatteredHarried</code> pass the B/H stack count). This call in turn invokes the <code>CanActivateEffect</code> hook where scripts must judge if the parameters of the activation attempt are correct to activate each of the effects with that ActivationCondition.</p> <p>Example of how <code>TurnStart</code> works:</p> <ol> <li>A <code>PROC_AMER_Combat_TurnStarted</code> listener calls <code>ActivateEffects(char, \"TurnStart\", {Round = round})</code></li> <li>The EpicEnemies main script invokes the <code>CanActivateEffect</code> hook for each effect with the corresponding ActivationCondition type, as well as the params from the <code>ActivateEffects()</code> call.</li> <li>A listener of said hook checks if the activation condition type is \"TurnStart\", and if it is, returns a boolean indicating if the params received match the conditions defined in the effect.</li> </ol> <p>For example, the following effect activates on turn 2, meaning the enemy only becomes hasted on turn 2, since the listeners that manage the <code>TurnStart</code> activation condition compare <code>Round</code> and <code>Repeat</code> with the parameters from the activation attempt. The effect is however always visible in the tooltip, along with its activation condition, so players can plan around it.</p> <pre><code>{\nName = \"TurnStart Activation Test\",\nID = \"TestStatus2\",\nDescription = \"Hasted on turn 2.\",\nStatus = {\nStatusID = \"HASTED\",\nDuration = 2,\n},\nActivationCondition = {\nType = \"TurnStart\",\nRound = 2,\nRepeat = false,\n},\n},\n</code></pre>"},{"location":"Epip/EpicEnemies/#eventshooks","title":"Events/Hooks","text":"<pre><code>---@hook GetActivationConditionDescription\n---@field RegisterHook fun(self, handler:fun(text:string, condition:EpicEnemiesActivationCondition, char:EclCharacter))\n---@field Return fun(self, text:string, condition:EpicEnemiesActivationCondition, char:EclCharacter)\n---@event EffectApplied\n---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect))\n---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect)\n---@event EffectRemoved\n---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect))\n---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect)\n---@hook IsEligible\n---@field RegisterHook fun(self, handler:fun(eligible:boolean, char:EsvCharacter))\n---@field Return fun(self, eligible:boolean, char:EsvCharacter)\n---@hook IsEffectApplicable\n---@field RegisterHook fun(self, handler:fun(applicable:boolean, effect:EpicEnemiesEffect, char:EsvCharacter, activeEffects:EpicEnemiesEffect[]))\n---@field Return fun(self, applicable:boolean, effect:EpicEnemiesEffect, char:EsvCharacter, activeEffects:EpicEnemiesEffect[])\n---@event EffectActivated\n---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect))\n---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect)\n---@event EffectDeactivated\n---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect))\n---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect)\n---@hook CanActivateEffect\n---@field RegisterHook fun(self, handler:fun(activate:boolean, char:EsvCharacter, effect:EpicEnemiesEffect, params:any))\n---@field Return fun(self, activate:boolean, char:EsvCharacter, effect:EpicEnemiesEffect, params:any)\n---@hook GetPointsForCharacter\n---@field RegisterHook fun(self, handler:fun(points:integer, char:EsvCharacter))\n---@field Return fun(self, points:integer, char:EsvCharacter)\n---@event CharacterInitialized\n---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effects:EpicEnemiesEffect[]))\n---@field Fire fun(self, char:EsvCharacter, effects:EpicEnemiesEffect[])\n---@event CharacterCleanedUp\n---@field RegisterListener fun(self, listener:fun(char:EsvCharacter))\n---@field Fire fun(self, char:EsvCharacter)\n</code></pre>"},{"location":"Epip/EpicEnemies/#methods","title":"Methods","text":"<pre><code>function EpicEnemies.IsInitialized(char)\n---@param char EsvCharacter\nfunction EpicEnemies.InitializeCharacter(char)\n---Remove all effects from a character.\n---@param char EsvCharacter\nfunction EpicEnemies.CleanupCharacter(char)\n---Returns true if the character is eligible to receive Epic Enemies effects.\n---@param char EsvCharacter\nfunction EpicEnemies.IsEligible(char)\n---@param char EsvCharacter\n---@param effect EpicEnemiesEffect\nfunction EpicEnemies.ApplyEffect(char, effect)\n---@param char EsvCharacter\n---@param effect EpicEnemiesEffect\nfunction EpicEnemies.ActivateEffect(char, effect)\n---@param char EsvCharacter\n---@param predicate fun(char:EsvCharacter, effect:EpicEnemiesEffect)?\n---@return table&lt;string, EpicEnemiesEffect&gt;\nfunction EpicEnemies.GetAppliedEffects(char, predicate)\n---@param char EsvCharacter\n---@param effect EpicEnemiesCharacter\n---@return boolean \nfunction EpicEnemies.EffectIsActive(char, effect)\n---@param char EsvCharacter\n---@param effect EpicEnemiesCharacter\n---@return integer \nfunction EpicEnemies.GetEffectActivationCount(char, effect)\n---@param char EsvCharacter\n---@param effectType string\n---@param params table?\nfunction EpicEnemies.ActivateEffects(char, effectType, params)\n---@param char EsvCharacter\n---@param effect EpicEnemiesEffect\n---@param charges integer? Defaults to 1.\nfunction EpicEnemies.DeactivateEffect(char, effect, charges)\n---Remove an effect from a character.\n---@param char EsvCharacter\n---@param effectID string\nfunction EpicEnemies.RemoveEffect(char, effectID)\n---@param char EsvCharacter\n---@param effectPool table&lt;string, EpicEnemiesEffect&gt;\n---@param activeEffects? EpicEnemiesEffect[]\nfunction EpicEnemies.GetRandomEffect(char, effectPool, activeEffects)\n---@param char EsvCharacter\nfunction EpicEnemies.GetPointsForCharacter(char)\n---Get the cost of an effect.\nfunction _EpicEnemiesEffect:GetCost()\nfunction _EpicEnemiesEffect:GetWeight()\n---@param char Character|GUID\nfunction EpicEnemies.IsInitialized(char)\n---@param id string\n---@return EpicEnemiesEffect \nfunction EpicEnemies.GetEffectData(id)\n---@param category EpicEnemiesEffectsCategory\nfunction EpicEnemies.RegisterEffectCategory(category)\n---@param id string\n---@param effect EpicEnemiesEffect\nfunction EpicEnemies.RegisterEffect(id, effect)\n---@param effect EpicEnemiesEffect\nfunction EpicEnemies.GenerateOptionData(effect)\n</code></pre>"},{"location":"Epip/EpicEnemies/#objects","title":"Objects","text":"<pre><code>---@class EpicEnemiesActivationCondition\n---@field Type string\n---@field MaxActivations integer\n---@class EpicEnemiesEffect\n---@field ID string\n---@field Name string\n---@field Description string\n---@field Cost integer\n---@field Weight integer\n---@field DefaultWeight integer\n---@field DefaultCost integer\n---@field ActivationCondition EpicEnemiesActivationCondition\n---@field Category string?\n---@field Visible boolean? Whether this effect appears in tooltips. Defaults to true.\n---@class EpicEnemiesKeywordData\n---@field Keyword Keyword\n---@field BoonType KeywordBoonType\n---@class EpicEnemiesEffectsCategory\n---@field Name string\n---@field ID string\n---@field Effects string[]|EpicEnemiesEffect[] Can be an array of EpicEnemiesEffect while calling the register method. Will be turned into an ID array afterwards.\n</code></pre> <p>The scripts that implement the basic effect functionality define the following objects:</p> <p></p> <p></p><pre><code>---@class EpicEnemiesExtendedEffect : EpicEnemiesEffect\n---@field SpecialLogic? string Special logic to grant when the effect is rolled.\n---@field Artifact? string Artifact power to grant when the effect is rolled.\n---@field Keyword? EpicEnemiesKeywordData Used for activation conditions; certain keyword mutators will not be granted if the target has no activators of the keyword.\n---@field Summon? GUID Template to summon.\n---@field Status? EpicEnemiesStatus[]\n---@field ExtendedStats? EpicEnemiesExtendedStat[]\n---@field FlexStats? EpicEnemiesFlexStat[]\n---@field RequiredSkills? string[] The effect is ineligible if the character does not have any of the required skills.\n---@class EpicEnemiesStatus\n---@field StatusID string\n---@field Duration integer\n---@class EpicEnemiesFlexStat\n---@field Type string\n---@field Stat string\n---@field Amount number\n---@class EpicEnemiesExtendedStat\n---@field StatID string The ID of the ExtendedStat.\n---@field Amount number\n---@field Property1 string?\n---@field Property2 string?\n---@field Property3 string?\n</code></pre> <p></p> <p></p><pre><code>---@class EpicEnemiesCondition_TurnStart : EpicEnemiesActivationCondition\n---@field Round integer Which round to activate the effect on.\n---@field Repeat boolean Whether to re-activate the effect on subsequent rounds as well.\n---@field RepeatFrequency uint64? How many turns must pass between re-activations if Repeat is true. Defaults to 1.\n---@class EpicEnemiesCondition_HealthThreshold : EpicEnemiesActivationCondition\n---@field Vitality number From 0-1. Use 0 to ignore this health metric.\n---@field PhysicalArmor number From 0-1. Use 0 to ignore this health metric.\n---@field MagicArmor number From 0-1. Use 0 to ignore this health metric.\n---@field RequireAll boolean If true, all thresholds must be met for the activation.\n---@class EpicEnemiesCondition_BatteredHarried : EpicEnemiesActivationCondition\n---@field StackType StackType\n---@field Amount integer\n---@class EpicEnemiesCondition_StatusGained : EpicEnemiesActivationCondition\n---@field StatusID string\n</code></pre>"},{"location":"Epip/StatsTab/","title":"StatsTab","text":""},{"location":"Epip/StatsTab/#statstab","title":"StatsTab","text":"<p><code>Epip.Features.StatsTab</code> implements collapsable categories for the Character Sheet stats tab, as well as Ascension node stats, server-side value calculations and synching, and all stats present in the mod by default. Is this decoupling overengineered? Possibly, but it's a good showcase of how easily extensible systems can be if you stuff them with events.</p> <p>TODO document the rest of the system - Only Shared.lua is here atm.</p>"},{"location":"Epip/StatsTab/#creating-stats","title":"Creating Stats","text":"<p>There's 3 steps to creating a stat. Steps 1 and 2 have to be done on both contexts.</p> <ol> <li>Define the stat; it's name, tooltip, how it displays, etc.</li> <li>Put it into a category (or create one for it)</li> <li>Set/update it's value when requested, through <code>RegisterStatValueHook</code></li> </ol> <p>You can define a stat with <code>RegisterStat(id: string, data: EpipStat)</code>. The structure of a stat is the following:</p> <pre><code>StatsTab.RegisterStat(\"RegenLifeCalculated\", {\nName = \"Missing Life Regen\",\nDescription = \"Restores a percentage of your missing Vitality at the start of your turn.\",\nFootnote = \"Missing Regeneration is capped at 50%.\",\nSuffix = \"%\",\n})\n</code></pre> <p>Next, you need to append it into a category with <code>AddStatToCategory(statID: string, categoryID: string, index?: integer)</code>. You can omit <code>index</code> and it will be placed at the bottom.</p> <pre><code>StatsTab.AddStatToCategory(\"RegenLifeCalculated\", \"Vitals\")\n</code></pre> <p>Finally, you need to register a hook to update the stat's value. This can be done in 2 ways: on client or on server (do not do both).</p> <p>If the stat's value can be queried from the client context, you only need a simple hook on the client:</p> <pre><code>StatsTab.RegisterStatValueHook(\"PartyFunds_Gold\", function(value, data, char)\nreturn Game.Items.GetPartyTemplateCount(\"LOOT_Gold_A_1c3c9c74-34a1-4685-989e-410dc080be6f\")\nend)\n</code></pre> <p>For stats that require info from the server, there is a special system in place that synchronizes stat values with tags. To set a stat's value from the server context, you need to use a different event (note it's not a hook, you must call <code>UpdateTaggedStat</code> yourself). On the client, the stat's value will be queried automatically from such tag if it is set; the advantage here being that there is no need to request stats from the server every time the tab is opened.</p> <pre><code>StatsTab.RegisterStatUpdateListener(\"Keyword_VitalityVoid_Power\", function(char, data)\nOsi.QRY_AMER_KeywordStat_VitalityVoid_GetPower(char.MyGuid, 1)\nlocal value = Osi.DB_AMER_KeywordStat_OUTPUT_Real:Get(nil)[1][1] * 100\nEpipStats.UpdateTaggedStat(char, \"Keyword_VitalityVoid_Power\", value)\nend)\n</code></pre>"},{"location":"Epip/StatsTab/#creating-ascension-node-stats","title":"Creating Ascension Node Stats","text":"<p>Stats related to Ascension nodes are automatically updated if their ID follows a specific format. All you need to do is define one; no further event listeners required. It will also be automatically put into the relevant keyword's category.</p> <p>You can create such stat with <code>StatsTab.AddNodeStat(clusterId: string, nodeIndex: number, nodeSubIndex: number, keyword: Keyword, keywordType: KeywordBoonType, statData: EpipStat)</code>. <code>StatData</code> is the stat definition, like with a normal stat. The indexes are 0-based. <code>ClusterId</code> is the ID of the Aspect, ex. <code>Force_TheFalcon</code>.</p> <p>There's just one small catch: owned nodes are only tracked if there's a stat defined for them. When you add stats in an update, you should call <code>StatsTab.RecalculateNodeStats()</code> on the server during the patch routine. You can also call <code>NRD_ModCall(\"EpipEncounters\", \"PerformFullStatsUpdate\");</code> from Osiris, but this will be removed in the future.</p>"},{"location":"Epip/StatsTab/#creating-categories","title":"Creating Categories","text":"<p>A category holds stats, and can be collapsed in the menu. Stats only render if they're within a category that is open. They can be added with <code>RegisterCategory(id: string, data: EpipStatCategory, index?: integer)</code>. See the <code>EpipStatCategory</code> struct.</p> <pre><code>StatsTab.RegisterCategory(\"Vitals\", {\nHeader = \"&lt;font size='21'&gt;\u2014\u2014\u2014\u2014\u2014 Vitals \u2014\u2014\u2014\u2014\u2014&lt;/font&gt;\",\nName = \"Vitals\",\nBehaviour = \"GreyOut\",\nStats = {\n\"RegenLifeCalculated\",\n\"RegenPhysicalArmorCalculated\",\n\"RegenMagicArmorCalculated\",\n\"LifeSteal\",\n},\n})\n</code></pre>"},{"location":"Epip/StatsTab/#modifying-stats","title":"Modifying Stats","text":"<p>Stat definitions are stored in <code>StatsTab.STATS</code>. You may screw with them at any time. Categories are in <code>CATEGORIES</code> instead, and their rendering order is defined in <code>CATEGORIES_ORDER</code>.</p>"},{"location":"Epip/StatsTab/#methods","title":"Methods","text":"<pre><code>---Registers a stat bound to an Ascension node.\n---@param clusterId string\n---@param nodeIndex number\n---@param nodeSubIndex number\n---@param keyword Keyword\n---@param keywordType KeywordBoonType\n---@param statData EpipStat Stat metadata.\nfunction EpipStats.AddNodeStat(clusterId, nodeIndex, nodeSubIndex, keyword, keywordType, statData) --RequireBothContexts\n---Register a stat.\n---@param id string\n---@param data EpipStat\nfunction EpipStats.RegisterStat(id, data) --RequireBothContexts\n---Register a category.\n---@param id string\n---@param data EpipStatCategory\n---@param index? integer Order in the stats tab relative to other categories.\nfunction EpipStats.RegisterCategory(id, data, index) --RequireBothContexts\n---Add a stat to a category.\n---@param statID string\n---@param categoryID string\n---@param index? integer\nfunction EpipStats.AddStatToCategory(statID, categoryID, index) --RequireBothContexts\n</code></pre>"},{"location":"Epip/StatsTab/#objects","title":"Objects","text":"<pre><code>---@class EpipStats\n---@field CATEGORIES table&lt;string, EpipStatCategory&gt; Category definitions.\n---@field CATEGORIES_ORDER string[]\n---@field STATS table&lt;string, EpipStat&gt;\n---@field MISSING_REGEN_CAP number TODO move\n---@field STAT_VALUE_TAG string Pattern for stat tags.\n---@field STAT_VALUE_TAG_PREFIX string\n---@field TOOLTIP_TALENT number TODO remove\n---@field TOOLTIP_TALENT_NAME string TODO remove\n---@class EpipStat\n---@field Name string\n---@field Description string Fallback description in case a formatted Tooltip isn't set.\n---@field Tooltip TooltipData\n---@field Footnote string Italic text after description, in new paragraph.\n---@field Suffix string Suffix for value display.\n---@field Prefix string Prefix for value display.\n---@field Boolean boolean Boolean stats show no value label.\n---@field MaxCharges string If specified, this stat will display as \"{Value}/{Value of MaxCharges stat}\"\n---@field IgnoreForHiding boolean If true, this stat will not be considered as added when determining if a Hidden category should display.\n---@class EpipStatCategory\n---@field Header string Name of the collapsable stat.\n---@field Name string Name of the category in the tooltip.\n---@field Behaviour EpipStatCategoryBehaviour Controls how default-value stats are shown. GreyOut greys out their label and value, hidden hides them - and the whole category - if no stats are owned.\n---@field Stats string[] Stats displayed in the category, ordered.\n</code></pre>"},{"location":"Features/AnimationCancelling/","title":"Animation Cancelling","text":""},{"location":"Features/AnimationCancelling/#animation-cancelling","title":"Animation Cancelling","text":"<p>Animation Cancelling is a feature that greatly speeds up combat by ending the player's skill-casting animations once their effects apply. You may enable it from the \"General\" settings tab.</p> <p></p> <p>This is particularly helpful for summon skills, which consist mostly of end-lag.</p> <p>Unlike previous implementations, Epip's Animation Cancelling works properly with many skill types that were previously problematic, such as multi-projectile or jump skills. Additionally, the setting applies per-player, rather than globally.</p> <p>This feature is currently only available for player characters. For enemies, use EE's Faster AI Spells mod.</p>"},{"location":"Features/Camera/","title":"Camera","text":""},{"location":"Features/Camera/#camera","title":"Camera","text":"<p>The Epip settings menu features a dedicated tab for customizing camera properties such as the zoom, angle, and field of view.</p> <p></p> <p> </p>Example of the maximum zoom out level."},{"location":"Features/Camera/#angles","title":"Angles","text":"<p>For each camera mode, the game accepts two angles: one used when zoomed in as much as possible, and the second used when the camera is zoomed out as much as possible.</p> <p>Any zoom level inbetween the minimum and maximum will have its angle resolved through linear interpolation.</p> <p></p> <p>These angles are actually position offsets applied to the camera, with the values being multiplied by the zoom level. This means that raising \"Angle value 2\" will result in the camera being higher up.</p> <p>However, the game camera always points towards the ground or the focused character, and as such, raising the Y level also means it will point more towards the ground.</p> <p> </p>Example of an angle with a low Y (angle value 2)"},{"location":"Features/HotbarGroups/","title":"Hotbar Groups","text":""},{"location":"Features/HotbarGroups/#hotbar-groups","title":"Hotbar Groups","text":"<p>Hotbar Groups allow you to create detached grids of hotbar slots of any size and freely position them on the screen. The skills and items dragged into these groups are shared across characters, making them ideal for consumables and utility skills that you may have on multiple characters.</p> <p>Right-click the regular hotbar and select \"Create Hotbar Group\" to get started. There is no limit on the amount of hotbar groups you can have.</p> <p></p> <p>Hotbar Groups may be dragged around using the brown handle on the sides. The relative position of the groups on the screen is saved across sessions.</p> <p>Right-click a group to bring up a context menu where you can change the group's UI layer (positioning it below or above other UIs), resize the grid of the group, or delete it. Special thanks goes to Cathe for implementing group resizing!</p> <p></p> <p>The possibility to create non-shared groups will be available in the future.</p>"},{"location":"Features/HotbarGroups/#demonstration","title":"Demonstration","text":""},{"location":"Features/QuickFind/","title":"Quick Find","text":""},{"location":"Features/QuickFind/#quick-find","title":"Quick Find","text":"<p>Quick Find is a new UI that displays a filtered view of the party inventory. You may use it to efficiently search for equipment, consumables and other items through a plethora of filter options.</p> <p>You may directly use or drag items from the UI. There's no need to organize your inventory when you can find what you need in the blink of an eye!</p> <p>Quick Find is opened using Left Ctrl+F by default. You may also right-click an equipped item and select the \"Quick Swap...\" option to bring up the UI with filters configured to show items that go in the selected item slot.</p> <p></p> <p>The following filter options are available:</p> <ul> <li>Equipment<ul> <li>Item slot</li> <li>Rarity (including Artifact)</li> <li>Weapon &amp; armor type (ex. bow, dagger, heavy armor...)</li> <li>Culled items (EE)</li> <li>Equipped items</li> <li>Stat boost: you may do a text search for bonuses such as +Warfare</li> </ul> </li> <li>Consumables<ul> <li>Potions</li> <li>Grenades &amp; scrolls</li> <li>Food &amp; drinks</li> </ul> </li> <li>Skillbooks<ul> <li>Skillbooks with unlearnt skills</li> <li>Ability school</li> </ul> </li> </ul> <p>The UI may be dragged by the top part, and will keep its position within the same session when re-opened.</p> <p></p>"},{"location":"Features/TooltipAdjustments/","title":"Tooltip Adjustments","text":""},{"location":"Features/TooltipAdjustments/#tooltip-adjustments","title":"Tooltip Adjustments","text":"<p>Numerous fixes and additions have been made to tooltips to improve their clarity. Some of these may be toggled off from the Tooltips tab in the settings menu.</p>"},{"location":"Features/TooltipAdjustments/#general","title":"General","text":"<ul> <li>Delay for simple tooltips appearing is customizable in the settings menu.</li> <li>Skill tooltips now account for effects that increase or decrease AP costs.</li> <li>Status tooltips show who applied the status (if anyone), as well as whether the status comes from an equipped item.</li> <li>Deltamods that previously did not show clearly in tooltips (+range, +elemental damage) now have blue labels in tooltips, like others.</li> <li>Holding shift will cause skill tooltips to display damage multipliers instead. Does not work for all skills.</li> <li>Removed the skull icon introduced by GB5 that appeared on negative status effects (unlikely to have been intentional).</li> <li>Added a keybind to scroll tooltips, useful for 3-socket items whose tooltips often overflow the screen.</li> <li>Books that have been read and keys that have been used now have a green label in their tooltip.</li> <li>Long item tooltips will be top-anchored, helping with the issue of being unable to compare items while wielding a heavily upgraded item.</li> <li>Fixed cone and zone-type skill tooltips saying that their range is boosted by Astrologer's Gaze (Far-out Man in vanilla), as they are not actually affected.</li> <li>Surface tooltips now show their owner - the character from who the surface scales from.</li> <li>Surface tooltips now render on top of the hotbar.</li> <li>In developer mode, statuses and skills show their IDs in their tooltips. A debug keybind exists to copy these identifiers to the clipboard.</li> <li>Active Defense statuses now show their charges and max charges.</li> <li>Holding shift in combat displays partial AP costs for movement.</li> </ul>"},{"location":"Features/TooltipAdjustments/#ee-specific","title":"EE-specific","text":"<ul> <li>\"Stat Adjustments\" in tooltips are now merged into one line.</li> <li>Added a label for items that have been Masterworked.</li> <li>While infusing a spell or holding shift, skill tooltips now highlight Source Infusions you don't meet the requirements for. Holding shift also displays your relevant ability score in the tooltip.</li> <li>Most statuses that deal damage now show the calculated damage, rather than showing \"(before modifiers)\".</li> <li>Tooltips for randomly generated EE items now show a \"quality\" label, which indicates how good the damage/armor rolls were for that item. A 100% quality indicates the best roll, possibly only on divine items.</li> <li>The word \"Set: \" has been removed from tooltips due to confusion and redundancy.</li> <li>The damage tooltip in the character sheet has been made less confusing by removing the mention of damage from gear and dummied out LW values. Additionally, it now makes it clear that the weapon abilities grant multiplicative damage increases.</li> <li>Artifacts display with a special rarity and item color, hand-picked by the EE devs. This change has been made available in the base EE mod as well. Additionally, artifact runes now show a \"Cannot equip.\" warning for slots that they are incompatible with.</li> <li>Added a hint in the quest rewards screen which explains that deltamods are only generated after picking the item.</li> <li>EE rune crafting materials now have a hint explaining their usage.</li> <li>Surface tooltips now have a hint for their damage scaling.</li> </ul>"},{"location":"Features/TooltipAdjustments/#deltamods-display","title":"Deltamods Display","text":"<p>Holding shift while looking at equipment tooltips will display information about their EE gear modifiers, such as their tier. This display will be improved in the future to be more user-friendly.</p> <p>For information on how deltamods work in EE, consult this site as well as this sheet.</p> <p></p>"},{"location":"Features/UI/","title":"UI Improvements","text":""},{"location":"Features/UI/#ui-improvements","title":"UI improvements","text":"<p>Epip contains a plethora of functional and cosmetic improvements over the base game UI. Big thanks to Elric for the new art assets used!</p>"},{"location":"Features/UI/#target-status-bar","title":"Target Status Bar","text":""},{"location":"Features/UI/#resistance-and-bh-display","title":"Resistance and B/H Display","text":"<p>The health bar at the top of the screen now shows character's resistances as well as their Battered and Harried stacks in EE. The B/H icons will light up if the target has enough of them to suffer a Tier 3 status, and will blink when the duration of the stacks is 1 turn or fewer. Actual B/H statuses are now hidden to reduce clutter.</p> <p></p> <p>Holding Shift will replace the resistances display with the character's current AP, Source and Initiative - very handy for planning and foreseeing enemy turns. Additionally, it will lower the opacity of status effects on the health bar.</p> <p></p>"},{"location":"Features/UI/#flags-display","title":"Flags Display","text":"<p>The \"Display Common Flags\" setting enables showing additional miscellaneous information under the bar while shift is held, including:</p> <ul> <li>Whether Comeback Kid is available</li> <li>Whether Attack of Opportunity is available</li> <li>Whether the character is flagged as incapable of joining combat</li> <li>The character's AI archetype (ranger, rogue, etc.)</li> </ul> <p></p> <p>These flags are not shown if the character doesn't have them.</p>"},{"location":"Features/UI/#level-display","title":"Level Display","text":"<p>An option to customize the position of targeted character level display was added. By default it's displayed in alternate status bar mode (while Shift is held). </p> Showcase <p>Accessible through Options -&gt; Epip settings -&gt; General -&gt; Character Level Display.</p> Hidden:             After Name:         Below Health Bar:   When holding Shift:"},{"location":"Features/UI/#aggro-display","title":"Aggro Display","text":"<p>An option to display aggro-related information was added. It shows current Taunt source, if one exists, as well as whether a character is Preferred, Unpreferred or Ignored by enemies. You can adjust whether this info is shown in the default or alternative health bar display. Disabled by default. </p> Showcase Accessible through Options -&gt; Epip settings -&gt; General -&gt; Show Aggro Information.  Preferred:    Unpreferred:  Ignored:      Taunted:      Aggro tags explanation <p>AI chooses its targets based on a number of parameters, such as target's effective HP, how easy it is to get to the target and so on. Its behavior is also influenced by aggro tags.</p><p>This information is only relevant for Epic Encounters 2.</p> <ul> <li>No tag: AI has no preference on whether to choose this character as the primary attack target or not. However, AI will actively try to hit this character with AOE attacks. Most characters will not have any aggro tag by default.</li> <li>Preferred: AI will actively try to make this character its primary attack target. This aggro tag is manually provided to some important NPCs and is not normally obtainable during gameplay.</li> <li>Unpreferred: AI will try not to make this character its primary target. However, AI will still actively try to AOE this character. This tag is usually acquired by using Subjugated status, and is also manually provided to some characters, mostly summons.</li> <li>Ignored: AI will try to act as if this character does not exist.</li> <li>Taunted: this AI will consider the source of Taunt a Preferred target.</li> </ul>"},{"location":"Features/UI/#treasure-display","title":"Treasure Display","text":"<p>An option has been added to display noteworthy EE item drops of enemies and containers on their health bar. For characters, this only shows while holding shift. Changes and special cases from Derpy's Tweaks are supported. Accessible through Epip Settings -&gt; General -&gt; Character Level Display, disabled by default.  </p> <p></p>"},{"location":"Features/UI/#player-status-bar","title":"Player Status Bar","text":"<p>The player health bar now shows its values at all times (you needn't hover over it anymore), and the Physical/Magic Armor text was removed to improve readability. Additionally, the AP display now features dividers every 4 AP, making it easier to see at a quick glance how much AP you've got left. Your maximum SP is also shown at all times. Further minor graphical tweaks were made, such as properly centering AP/SP displays and adding a dropshadow to AP bar to improve its readability.  </p> <p></p>"},{"location":"Features/UI/#player-portraits","title":"Player Portraits","text":"<p>The status bar on your characters now wraps onto a second row once there are more than 6 statuses, preventing it from obscuring the middle of the screen during intense fights. Summon portraits no longer show statuses and are shrunk while the status bar is wrapping. In the settings you may also enable a Battered/Harried display on these portraits.  </p> <p></p> <p>You can right-click your portraits to open a context menu where you can hide the status bar and summons, as well as access the Debug Cheats if you're in developer mode.  </p> <p></p> Other settings Options -&gt; Epip settings -&gt; Player portraits Display B/H on player portraits<p>Display nice, big B/H indicators right over player portaits.</p><p>Disabled by default.</p> Status Opacity in Combat       <p>Make statuses less visible.</p><p>Hovering over statuses will always show them at full opacity.</p> <p></p>"},{"location":"Features/UI/#character-sheet","title":"Character Sheet","text":"<p>The character sheet now shows physical and piercing resistances.</p> <p></p> <p>The tags tab is replaced with a brand new \"Keywords and misc.\" tab. It's full of useful information, such as:</p> <ul> <li>Remaining reaction charges.</li> <li>Currently equipped Artifacts, with descriptions.</li> <li>Active keyword activators and mutators, with descriptions.</li> <li>Your combat stats. It's not perfect, but it's a good reference.</li> <li>Other miscellaneous other info, e.g. your passive regeneration rates.</li> </ul> <p></p>"},{"location":"Features/UI/#new-uis","title":"New UIs","text":"<p>Numerous new UIs have been added for various purposes. Some of these have dedicated pages on them under the \"Major Features\" section.</p>"},{"location":"Features/UI/#bh-overheads","title":"BH Overheads","text":"<p>A \"Show B/H\" keybind exists that will display Battered &amp; Harried of nearby characters in combat while held. Stacks that meet the tier 3 requirement will be shown with higher opacity.</p> <p></p>"},{"location":"Features/UI/#rewards-ui","title":"Rewards UI","text":"<p>An option has been added to allow viewing the character sheet while within the quest rewards screen, allowing you to compare rewards to your party's currently equipped items. Located in Options -&gt; Epip settings -&gt; Inventory -&gt; Show Character Sheet in Reward UI. Disabled by default.  </p> <p></p>"},{"location":"Features/VanillaFixes/","title":"Vanilla Fixes","text":""},{"location":"Features/VanillaFixes/#fixes-to-vanilla-issues","title":"Fixes to vanilla issues","text":"<p>Epip contains fixes to certain vanilla issues, mostly client-related.</p> <ul> <li>When summons die or are newly-spawned in combat, control will be automatically switched back to the summoner - you don't have to manually do so.</li> <li>You can now walk into corpses in combat without looting them; you can hold shift if you need to pillage them mid-fight, or disable this in the settings menu.</li> <li>Fixed undead characters not displaying overhead text for armor restoration.</li> <li>Fixed overhead text blocking clicks to the world (supposedly a DefEd regression).</li> <li>Fixed being unable to use items when under the effects of increased AP costs, if you didn't have <code>normal_use_cost + 2 * cost_penalty</code> AP. Essentially, the game was applying this AP cost penalty twice on the client.</li> </ul> <p>Tooltip-related fixes are on the Tooltip Adjustments page.</p>"},{"location":"Features/Vanity/","title":"Vanity","text":""},{"location":"Features/Vanity/#vanity","title":"Vanity","text":"<p>Satisfy all of your cosplay needs with an easy to use, non-intrusive vanity system. Unlike some other implementations, this has absolutely no gameplay side effects. It even works with Gift Bag 5 armor sets! Access its menu by right-clicking any of your equipped items and choosing the \"Vanity...\" option.  </p> <p></p> <p>From here you will have access to a number of tabs packed with customization features.  </p> <p></p>"},{"location":"Features/Vanity/#transmog-tab","title":"Transmog Tab","text":"<p>Equipment tab lets you seamlessly transmogrify the appearance of your weapons and armors. The item you've used to access this tab is its focus, indicated by the dropdown list at the top. To select another item to tinker with you can use right-click -&gt; Vanity... on it or said dropdown list.  </p> <p></p>"},{"location":"Features/Vanity/#basics","title":"Basics","text":"<p>Transmog options consist of vanilla armor variants and options added by cosmetic mods. Support is included for \"Majora's Project Fashion Sins\", \"Rendal's NPC Armors\" and \"Visitors from Cyseal\" mods. Using transmog is as easy as clicking on your desired option, no extra items or materials required. This change is purely cosmetic and has no effect on gameplay! Your equipment will not lose its stats, modifiers nor set effects. Yes, it works with Gift Bag 5 armor sets. </p> <p> </p> <p>If you think we've missed some of vanilla variants or want to see support for more third-party mods - feel free to tell us.</p>"},{"location":"Features/Vanity/#autotransmog","title":"Autotransmog","text":"<p>Found your perfect look? Want to keep it for the rest of the game? \"Lock Appearance\" option is here for you. When it's ticked newly equipped gear will be automatically transmogrified to match your previous look.  </p> <p></p> <p>This option is saved per-slot. Automatic transmogrification will only happen if you don't have Vanity menu open. </p>"},{"location":"Features/Vanity/#visibility","title":"Visibility","text":"<p>Want to go for more outlandish look? Make your equipment invisible with a press of a button! We trust you to use this option responsibly and only hide your shields and/or weapons for the coolness factor instead of making your characters walk around butt-naked. </p> <p></p>"},{"location":"Features/Vanity/#icon-options","title":"Icon Options","text":"<p>For the sake of making inventory management easier, you can make transmog (both manual and automatic) preserve the equipment's current icon. This option is saved per-slot.</p> <p></p> <p>Additionally, you may change the icon of an item through a new Icon Picker UI.</p> <p></p>"},{"location":"Features/Vanity/#elemental-effects","title":"Elemental Effects","text":"<p>Weapons with elemental damage normally get glowing visual effect applied to them. Don't like it? You can turn it off.  </p> <p></p>"},{"location":"Features/Vanity/#outfits-tab","title":"Outfits Tab","text":"<p>Have you mastered the art of drip? Have you found your ultimate image? Never wanna wear anything else ever again? Save your entire get-up and use it across playthroughs with a few clicks.  </p> <p></p> <p>Saved outfits are grouped by intended race and gender, but can be applied to any character.  </p> <p>Adding a new outfit to your wardrobe is as simple as clicking  and entering a name.</p> <p></p>"},{"location":"Features/Vanity/#dyes-tab","title":"Dyes Tab","text":"<p>Feeling blue today? Maybe red? Or are you cool and it's time for purple? Worry not! All your coloring needs can be satisfied in the Dyes tab!  </p> <p></p>"},{"location":"Features/Vanity/#basics_1","title":"Basics","text":"<p>Equipment is divided in up to 3 color zones. You can choose your favorite colors for each of them using means provided:  </p> <ul> <li>Sliders - the more user-friendly option, drag a bunch of sliders around to adjust RGB values in [0; 255] range. You don't even have to understand how RGB works - a handy preview of a resulting color is always displayed for your convenience.  </li> <li>Hex - if you think you're cool you can always straight-up enter your desired hex code. Whether you conjure them in your mind through otherwordly communion or just look them up in Google - not our problem.  </li> </ul> <p>Once done - press  to see the fruits of your labor.</p> <p>Important - not all equipment can be dyed and not all dyeable equipment will have all 3 color zones. We are not to be blamed for this, blame Larian instead.</p>"},{"location":"Features/Vanity/#sharing","title":"Sharing","text":"<p>Found the coolest color combination ever? Wanna share it with your friend? There are several ways to go about this:</p> <ul> <li>Copy/paste - see these ? Up means \"copy\", down means \"paste\".</li> <li>Import/export -  puts a single string representing all 3 color zones into your clipboard, kinda like this #FF0000-#00FF00-#0000FF.  scans your clipboard and if it contains the string in correct format - inputs color codes into their zones.  </li> </ul>"},{"location":"Features/Vanity/#lock-sliders","title":"Lock Sliders","text":"<p>By default color sliders will automatically adjust to match currently focused equipment piece whenever you change it. However by ticking  you can prevent this. This can be useful for applying one dye to multiple equipment pieces.  </p>"},{"location":"Features/Vanity/#saving-dyes-and-built-ins","title":"Saving Dyes and Built-ins","text":"<p>You can save your favorite dyes to reuse them later by pressing  and entering a name.  </p> <p></p> <p>Saved dyes will appear under \"Custom Dyes\" collapsing list. There also are a few built-in dyes for you to use or take inspiration from.  </p> <p></p>"},{"location":"Features/Vanity/#auras-tab","title":"Auras Tab","text":"<p>All these drip options were not enough for you? Want to make your presence even more noticeable? Apply permanent visual effects to your character in Auras tab.  </p> <p></p> <p>As simple as it gets - choose your attachment point, choose auras to use with it.</p> <p>This feature is in rather experimental stage. It works as intended, but has seen little adoption by players (to our knowledge). Any useful feedback is welcome. </p>"},{"location":"Info/faq/","title":"FAQ","text":""},{"location":"Info/faq/#faq","title":"FAQ","text":""},{"location":"Info/faq/#where-do-i-discuss-the-mod","title":"Where do I discuss the mod?","text":"<p>The Epic Encounters discord and their feedback/bugs channels are the right places. The #epipeline channel there can also be used for development-related discussion.</p> <p>There is no \"Pip discord\"; its existence is a myth fabricated by a certain Subnautica fan.</p>"},{"location":"Info/faq/#whats-this-talk-about-a-gameplay-mod","title":"What's this talk about a gameplay mod?","text":"<p>Initially, Epip started out as a gameplay mod after development of EE went on hiatus, before becoming a UI &amp; QoL mod. Gameplay changes from that era stayed in the mod for a long time due to their acceptance, but ultimately had to be split off into a separate mod for portability reasons.</p> <p>The gameplay mod is available here, and its changes are documented in this document. You may also get it through Mel's auto-updater.</p> <p>There are no plans to work on any further gameplay changes. Check out Derpy's mod for a different take on EE balancing.</p>"},{"location":"Info/faq/#what-mods-does-epip-work-with","title":"What mods does Epip work with?","text":"<p>Due to the nature of UI modding and the scope of the project, any other mods that alter UI will likely see problems.</p> <p>The following Larian UIs currently have their .swf overwritten in Epip:</p> <ul> <li>Context Menu</li> <li>Enemy Health Bar</li> <li>Hotbar (planned to be removed)</li> <li>OptionsInput (planned to be removed)</li> <li>Overhead</li> <li>PlayerInfo (planned to be removed)</li> <li>Status Console</li> <li>Character Sheet (planned to be removed)</li> <li>Combat Log (planned to be removed)</li> <li>Panel Select</li> </ul> <p>And the following have overlay UIs made for them, meaning problems will likely only arise with graphical mods to them:</p> <ul> <li>Character Sheet (for Vanity)</li> <li>Save/Load</li> </ul> <p>Advancements in UI modding and our expertise have made it possible to remove a lot of .swf overrides throughout the years, but there remain older Epip UI changes that have not yet received the rewrites required to get rid of their overrides.</p> <p>There's only so much that can be done in regards to Larian UI moddability however, and thus conflicts between UI mods will likely remain a problem forever. Epip does have a solution for the problem of custom UI moddability, however.</p> <p>Don't ask other modders to add support for Epip.</p>"},{"location":"Info/faq/#can-i-donate","title":"Can I donate?","text":"<p>I (Pip) don't take donations because they create pressure to deliver updates on a somewhat regular basis, which I physically and mentally cannot do. You can instead buy this game I worked on. It's a pretty good one within its genre too. Just keep in mind that I also worked on the UIs for it, for better or for worse.</p> <p>If it makes you feel less inclined to want to donate, keep in mind any donations would've gone towards questionable investments such as fursuits or lolita fashion.</p>"},{"location":"Info/faq/#can-i-help","title":"Can I help?","text":"<p>Of course; Epip is at this point a huge project and any form of help is appreciated. Here's a list of things one could do:</p> <ul> <li>Provide feedback on existing features, as well as UX and UI design (infamously and ironically not our forte, according to many)</li> <li>Report bugs</li> <li>Help with localizations at our translation spreadsheet<ul> <li>All languages are welcome, including ones the game doesn't normally support.</li> </ul> </li> <li>Improve documentation - the very website you're reading right now!<ul> <li>This includes writing dedicated pages for features, or improving the documentation of the code - either by improving annotations in the source code or providing more details/usage examples on the website pages.</li> </ul> </li> <li>Improve existing features, fix issues with the code (functional or stylistic), or work on entirely new ones. The repository for the mod is here.<ul> <li>Setting up a local clone for DOS mods is not very intuitive; I recommend asking Pip or Cathe in #epipeline for a walkthrough</li> <li>Brand new features, as well as large additions should be first discussed in #epipeline to make sure they are appropriate for the mod - see the \"what not to add\" list down below.</li> </ul> </li> <li>Visually redesign UIs and create dedicated art assets (there's only so many times we can call upon the help of Elric-sama)</li> </ul> <p>In any case, you may discuss plans in #epipeline.</p>"},{"location":"Info/faq/#i-only-like-x-can-you-make-a-separate-mod-for-it","title":"I only like X, can you make a separate mod for it?","text":"<p>No, because it's a logistics nightmare. The time spent maintaining separate repositories, writing separate changelogs, and pushing separate builds would waste a ridiculous amount of time that could've been spent working on the mod itself, as well as making things more confusing for the existing (and new) users, which have never had much concern for the mod's scope.</p> <p>The vast majority of features in Epip are optional and opt-in; the few that aren't, are the way they are because nobody has ever complained about them existing. If you feel like something needs a toggle, feel free to let us know.</p>"},{"location":"Info/faq/#did-you-steal-the-improved-hotbar-mod","title":"Did you steal the Improved Hotbar mod?","text":"<p>The Improved Hotbar mod comes from Epip; it existed to allow that particular feature to be used outside of EE before Epip dropped it as a hard dependency, which was a lengthy process.</p> <p>Since Epip is now usable without EE, the standalone hotbar mod is obsolete and will not receive any further updates, possibly being removed from the workshop sometime in the future.</p>"},{"location":"Info/faq/#will-there-be-controller-support","title":"Will there be controller support?","text":"<p>Controller support for UI mods largely requires all the work to be done twice; this is an immense time commitment for a single developer. As much as I (Pip) enjoy the controller support in DOS games, it is unreasonable to fully support it at the time - it's time that could be spent making the mod better.</p> <p>Since v1066, mouse control is enabled while playing with a controller. This allows you to use certain custom Epip UIs such as Quick Find or the Codex - though critical features such as the settings menu remain unavailable.</p> <p>Plans exist to add proper controller navigation to EE UIs and certain custom Epip UIs, however it is not a priority and is unlikely to happen in 2023.</p>"},{"location":"Info/faq/#will-there-be-a-workshop-release","title":"Will there be a workshop release?","text":"<p>Plans exist for this, but are being held back by a lack of workshop art assets as well as Extender v60 still being in development; for a workshop release we would like to use v1066 at the very least.</p>"},{"location":"Info/faq/#can-you-add-x","title":"Can you add X?","text":"<p>Though it's easy to think that Epip is an all-in-one mod where anything goes, there are moderately strict guidelines for features that are either inappropriate or out of scope, listed as follows.</p> <ul> <li>Features only relevant to vanilla: Epip primarily targets EE, as it is what the team enjoys playing (and Epip wouldn't exist without it). Note that this does not exclude features or integrations with other noteworthy overhauls such as Conflux.</li> <li>Features that encourage tedious or degenerate playstyles: an example being macroing spells to prebuff more efficiently; such features lead the users to habits that ultimately make the game less enjoyable - this makes no sense in a QoL mod.</li> <li>Cheats or developer features outside of developer mode: the simple reason being that making such cheats accessible encourages users to mess with game balance before they understand it. Keeping such features locked behind a simple json edit or the creation of a mod ensures users have to at least think twice before making any questionable changes.</li> <li>Fixes or workarounds for other mods: not our responsibility. Features such as the world tooltip improvements or vanity exist because we were able to improve upon the concepts of the original works, not because there was anything fundamentally broken about them.</li> <li>Server-side systems: Epip is primarily a client QoL mod. Any server-side systems exist out of pure necessity, and EE Core already offers a phenomenal gameplay-oriented library that I do not think I (Pip) could improve much on. Wrappers around EE systems are for this same reason minimal.</li> <li>In-game tutorials: Epip is meant to be as non-intrusive as possible; the user should be able to explore features at their own pace and use only the ones they want. In-game tutorials go against this idea and are disrespectful to the people that read what mods do before they install them.</li> </ul>"},{"location":"Info/faq/#what-does-epip-mean","title":"What does \"Epip\" mean?","text":"<p>Unknown.</p> <p>Some community members have pointed out that \"Epip\" spelled backwards is \"Pipe\", however the lore implications of this have not been studied.</p>"},{"location":"Maintenance/","title":"Index","text":""},{"location":"Maintenance/#maintenance","title":"Maintenance","text":"<p>The maintenance section contains information for managing the various aspects of deployment of the mod.</p> <p>The purpose of these notes is to facilitate running the project when/if Pip is gone. They are of no use if you only use Epip as a dependency.</p>"},{"location":"Maintenance/IDESetup/","title":"IDE Setup","text":""},{"location":"Maintenance/IDESetup/#ide-setup","title":"IDE Setup","text":"<p>The project is developed in VS Code using the SumnekoLua extension for annotating types. At the time of writing (2023) it's the best Lua extension by a long shot, so I'd say don't waste time trying others. Any PRs are expected to use it, annotating types &amp; methods and avoiding diagnostic warnings (the backlog of those from old code is large enough as it is).</p>"},{"location":"Maintenance/IDESetup/#sumnekolua-settings","title":"SumnekoLua settings","text":"<p>The following extension settings are used, mainly changing the severity of some diagnostics to better highlight code oversights and remove warnings from some needlessly strict type-checking.</p> <pre><code>\"Lua.completion.autoRequire\": false,\n\"Lua.type.castNumberToInteger\": true,\n\"Lua.hint.setType\": true,\n\"Lua.diagnostics.severity\": {\n\"cast-local-type\": \"Hint\",\n\"trailing-space\": \"Hint\",\n\"redefined-local\": \"Warning\",\n\"need-check-nil\": \"Error\",\n\"deprecated\": \"Information\",\n\"duplicate-set-field\": \"Information\",\n\"assign-type-mismatch\": \"Information\",\n\"redundant-return-value\": \"Warning\",\n\"unbalanced-assignments\": \"Error!\",\n\"redundant-value\": \"Error!\",\n\"code-after-break\": \"Error!\",\n\"param-type-mismatch\": \"Information\"\n},\n\"Lua.diagnostics.groupSeverity\": {\n\"unused\": \"Warning\",\n\"ambiguity\": \"Warning\"\n},\n\"Lua.diagnostics.disable\": [\n\"trailing-space\",\n\"need-check-nil\"\n],\n\"Lua.type.weakNilCheck\": true,\n\"Lua.diagnostics.workspaceRate\": 30,\n\"Lua.workspace.maxPreload\": 50000,\n\"Lua.workspace.preloadFileSize\": 5000,\n\"Lua.diagnostics.globals\": [\n\"LibStub\"\n],\n\"Lua.workspace.ignoreDir\": [\n\".vscode\",\n\"Story/RawFiles/Lua/Utilities/LibDeflate.lua\"\n],\n\"Lua.doc.protectedName\": [\n\"__[A-Z]*\",\n\"__[a-z]*\"\n],\n\"Lua.hover.expandAlias\": false,\n\"Lua.type.weakUnionCheck\": true,\n\"Lua.doc.privateName\": [\n\"_[a-z]*\",\n\"_[A-Z]*\"\n]\n</code></pre> <p>LibStub global is used to remove a warning from LibDeflate. The private &amp; protected patterns are used to automatically set the visibility of fields based on Epip's naming conventions: <code>_</code> prefix for private, <code>__</code> prefix for protected.</p>"},{"location":"Maintenance/IDESetup/#ahk-script","title":"AHK Script","text":"<p>An Autohotkey script is used to speed up switching windows and resetting Lua. It's hotkeys are the following:</p> <ul> <li>Ctrl+M5: focus game window</li> <li>Ctrl+M4: focus console window</li> <li>Ctrl+R: reset Lua and focus game. This also creates the aliases <code>epip = Mods.EpipEncounters</code> and <code>ui = epip.Client.UI</code> in the console chunk.</li> <li>Shift+M5: focus VS Code</li> </ul> <pre><code>ConsoleWindowClass := \"ConsoleWindowClass\"\nGameWindowClass := \"SDL_app\"\nConsoleWindow := \"D:OS2 Script Extender Debug Console\"\n^r::LuaReset()\n+XButton2::FocusVSC()\n^XButton1::FocusConsole()\n^XButton2::FocusGame()\nLuaReset()\n{\nglobal ConsoleWindow\nSetKeyDelay, 10\nWinGet, PID, PID, %GameWindow%\nControlSend, , {enter}reset{enter}, %ConsoleWindow%\nFocusGame()\nControlSend, , epip = Mods.EpipEncounters{enter}, %ConsoleWindow%\nControlSend, , ui = epip.Client.UI{enter}exit{enter}, %ConsoleWindow%\n}\nFocusGame()\n{\nglobal GameWindowClass\nWinActivate, ahk_class %GameWindowClass%\n}\nFocusConsole()\n{\nglobal ConsoleWindowClass\nWinActivate, ahk_class %ConsoleWindowClass%\n}\nFocusVSC()\n{\nWinGet, PID, PID, ahk_exe Code.exe\nWinActivate, ahk_pid %PID%\n}\n</code></pre>"},{"location":"Maintenance/IDESetup/#theme","title":"Theme","text":"<p>Pip's theme is Noctis Bordo (from the Noctis extension) using the following overrides for token styles:</p> <pre><code>{\n\"editor.tokenColorCustomizations\": {\n\"textMateRules\": [\n{\n\"scope\": \"storage.type.annotation.lua\",\n\"settings\": {\n\"foreground\": \"#df769b\",\n\"fontStyle\": \"bold\"\n}\n},\n{\n\"scope\": \"variable.other.lua\",\n\"settings\": {\n\"foreground\": \"#cbbec2\",\n}\n},\n{\n\"scope\": \"support.type.lua\",\n\"settings\": {\n\"foreground\": \"#8b747c\",\n}\n},\n{\n\"scope\": \"support.constant.lua\",\n\"settings\": {\n\"foreground\": \"#87a3b4\",\n}\n},\n{\n\"scope\": \"entity.other.property.lua\",\n\"settings\": {\n\"foreground\": \"#c4c4c4\",\n\"fontStyle\": \"\",\n}\n},\n]\n}\n}\n</code></pre> <p>Obviously you needn't use the same one. This detail is for posterity only.</p>"},{"location":"Maintenance/ProjectSetup/","title":"Project Setup","text":""},{"location":"Maintenance/ProjectSetup/#project-setup","title":"Project Setup","text":"<p>Cloning DOS2 mods is not very intuitive due to the file structure, making symbolic links necessary if you want to have multiple repositories. The steps for a clean clone are:</p> <ol> <li>Clone Epip into a directory of choice outside of the game folder</li> <li>Setup symlinks so that <code>DefEd/Data/Public/EpipEncounters_7d32cb52-1cfd-4526-9b84-db4867bf9356</code> points to the <code>Public/EpipEncounters_7d32cb52-1cfd-4526-9b84-db4867bf9356</code> folder in the repository; likewise for the <code>Mods</code> and <code>Projects</code> folders.</li> <li>Optional: unpack a release Epip pak and extract its contents into your repository, without overriding any files. This will get you files that are gitignored, such as Generic textures and some Python scripts.</li> </ol>"},{"location":"Maintenance/StyleConventions/","title":"Code Style & Conventions","text":""},{"location":"Maintenance/StyleConventions/#code-style-conventions","title":"Code Style &amp; Conventions","text":"<p>TODO</p> <p>In the case of Generic UIs, often instances are extended with new fields and functions without defining them as a separate class. This is done to reduce the amount of class annotations, as generally they are not needed for simple extensions; the extension can tell those new fields are valid for that particular set only. It is only necessary to declare a class to override the Events table.</p>"},{"location":"Maintenance/StyleConventions/#class-definitions","title":"Class Definitions","text":"<p>Variables are defined in the class definition instead of the table if:</p> <ul> <li>They are not set by default, but are not nil-able once the class is fully initialized; this is for example the case for Generic elements that are supposed to always exist for a UI, but aren't instanced until the UI is accessed for the first time</li> </ul> <p>If a variable is nil-able, it may be defined in the table, especially if it has nil as the default value and is private - but this rule isn't followed as strictly.</p> <p>When using constants within instance methods, it's better to refer to them using <code>self.CONSTANT</code> as that allows for overriding them on a per-instance basis. Of course, in certain cases that constant might be checked before another script has any chance to alter it.</p>"},{"location":"Maintenance/documentation/","title":"Documentation","text":""},{"location":"Maintenance/documentation/#documentation","title":"Documentation","text":"<p>The documentation of functions, classes and other symbols in this site is automatically generated from LuaDoc annotations within the mod, using the <code>update_docs.py</code> script.</p> <p>The script parses the lua files in the Bootstrap scripts and searches line-by-line for annotations. Once these are gathered, the markdown files of the documentation site are searched for special html tags and the output of the doc script is inserted between them accordingly.</p> <p>For example, this tag inserts the classes, methods and events of MyLib between the doc opening and closing tags. If there was already content inbetween these tags, it is replaced; you should thus not modify the output. </p><pre><code>&lt;doc  class=\"MyLib\"&gt;\n\nnil\n&lt;/doc&gt;\n</code></pre> <p>The scripts gathers annotations using two structures: \"Symbols\" and \"Metadata\". A symbol represents an actual symbol within the code, for example a function or a class. Each symbol may be composed of various metadata. As an example, function symbols capture comments and parameter annotations (<code>---@param</code>) as their metadata.</p>"},{"location":"Maintenance/keybinds/","title":"Keybinds Reference","text":""},{"location":"Maintenance/keybinds/#default-keybinds","title":"Default Keybinds","text":"<p>Below is a reference of the default keybinds, useful to avoid conflicts when defining new ones.</p>"},{"location":"Maintenance/keybinds/#epip","title":"Epip","text":"<p>Actions with no default bindings are omitted.</p> Action Default Binding 1 EpipEncounters_Debug_CopyIdentifier LCtrl + C EpipEncounters_Debug_OpenDebugMenu LCtrl + B EpipEncounters_Debug_Generic LCtrl + E EpipEncounters_Debug_CopyPosition LShift + T EpipEncounters_DebugCheats_OpenUI G EpipEncounters_QuickFind LCtrl + F EpipEncounters_ScrollTooltip Middle Click EpipEncounters_QuickExamine V EpipEncounters_Housing_RaiseFurniture LCtrl + Mouse Wheel Y+ EpipEncounters_Housing_LowerFurniture LCtrl + Mouse Wheel Y- EpipEncounters_Fishing_OpenCollectionLog LShift + F (Feature_Codex) Open LCtrl + G"},{"location":"Maintenance/keybinds/#vanilla","title":"Vanilla","text":"<p>Vanilla default bindings are specified in <code>\\PlayerProfiles\\Default</code> within <code>Engine.pak</code>. This table only contains the ones bindable ingame, omitting the GM mode ones.</p> <p>Debug bindings (from <code>keyboard_debug.json</code>) are also omitted as they are non-functional in the release build.</p> Input Event ID Default Binding 1 Default Binding 2 Camera Left Left A Camera Right Right D Camera Forward Up W Camera Backward Down S Camera Center Home Camera Rotate Left Delete Camera Rotate Right End Camera Zoom In Page Up Mouse Wheel Y+ Camera Zoom Out Page Down Mouse Wheel Y- Toggle Camera Rotate Middle Click Toggle Tactical Camera O Cancel Action Escape Right Click Context Menu Right Click Cycle Characters Next ] Cycle Characters Previous [ Force-Attack LCtrl Tactical Highlights ` Interact Left Click Ping \\ Queue RShift Rotate Item Left Mouse Wheel Y- Rotate Item Right Mouse Wheel Y+ Show World Tooltips LAlt Skip Video Escape Sheathe/Unsheathe Tab Toggle Input Mode LCtrl + LShift + Q Select Character 1 F1 Select Character 2 F2 Select Character 3 F3 Select Character 4 F4 Hotbar Slot 0 0 Numpad 0 Hotbar Slot 1 1 Numpad 1 Hotbar Slot 11 Minus Hotbar Slot 12 Equals Quick Load F8 Quick Save F5 Chat Return Show Sneak Cones LShift Split Item Stack LShift RShift Hotbar Actions Bar X Toggle Inventory + Character Sheet I Toggle Crafting G Toggle Equipment E Toggle Pause Menu Escape Toggle Inventory B Toggle Journal L Toggle Map M Toggle Party Management Y Toggle Recipes H Toggle UI Visibility F10 Toggle Skillbook K Toggle Sneak C Toggle Stats* UI Cancel Escape UI End Turn Space Hotbar Next Row R Hotbar Previous Row F Take All Space <p>* intended to be an examine keybind, however it is non-functional, though it is even mentioned in loading screen tips. Epip's examine keybind is implemented by spoofing inputs and UI calls necessary to open the examine UI from the context menu (the only known way).</p>"},{"location":"Maintenance/localization/","title":"Localization","text":""},{"location":"Maintenance/localization/#updating-localization","title":"Updating localization","text":"<p>Localization is done through the system provided by the Text library. However, python scripts are used to convert to and from the json format to a spreadsheet.</p> <p>To update localization:</p> <ol> <li>Download the google sheet</li> <li>Run <code>generate_epip_localization_json.py</code> to update the current localization with data from the sheet</li> <li>Generate new json with new/modified strings via <code>!generatelocalizationtemplates</code> command ingame</li> <li>Run <code>generate_epip_localization_sheets.py</code> to update the sheet</li> <li>Update the google sheet; the most efficient way to do this is to import all sheets from the new sheet, then copy-paste them into the old ones; this will keep formatting and frozen ranges intact</li> </ol> <p>The repository only contains the core scripts to do this, the particular ones mentioned before (which run the core script for each language in Epip) can be obtained from unpacking (or asking Pip if they're still alive).</p>"},{"location":"Tutorials/testing/","title":"Testing","text":"<p>Testing and debugging mods in-game can be made a lot easier with the extender.</p>"},{"location":"Tutorials/testing/#script-extender-console","title":"Script Extender Console","text":"<p>Enabled by setting <code>CreateConsole</code> to <code>true</code> in <code>OsirisExtenderSettings.json</code>, the extender console logs messages from the extender, as well as lua scripting and osiris DebugBreaks.</p> <p>The console can also be used to run lua code (and therefore osiris as well). Pressing enter in the console window will enter the lua console, in server context by default. Typing <code>server</code>/<code>client</code> switches between the lua contexts.</p>"},{"location":"Tutorials/testing/#running-osiris","title":"Running Osiris","text":"<p>Calls, events and queries from the base game can be called directly, executing right away:</p> <pre><code>print(CharacterGetHostCharacter())\n</code></pre> <p>Note that for queries, no out parameters are specified; they are instead returned as variables. Lua supports multiple returns per call, and the print function will print them all in order. User queries return true for success and false for failure - you have to lookup the return DBs yourself.</p> <p>For custom symbols, you must add an <code>Osi.</code> prefix (the Osi table is used to resolve custom osiris symbols, whereas the Larian ones are in the global table/scope):</p> <pre><code>Osi.PROC_AMER_GEN_OpenQueuedMessageBox(CharacterGetHostCharacter(), \"Test\")\n</code></pre> <p>DBs can be interacted with in all the usual manners:</p> <ul> <li>Queried with <code>Osi.DB_MyDB:Get(param1, param2, ...)</code>. Use <code>nil</code> for placeholders/wildcards.</li> <li>Set by calling the symbol: <code>Osi.DB_MyDB(myValue1, myValue2)</code></li> <li>Deleted with the delete function: <code>Osi.DB_MyDB:Delete(param1, param2, ...)</code>. Once again, <code>nil</code> can be used as a wildcard.</li> </ul> <p>Querying DBs returns a list of all the valid tuples. In the console, the <code>Ext.Dump()</code> function can be used to print values as json. A useful shorthand for the function is <code>_D()</code>:</p> <p></p> <p>As of v56, all extender objects can be dumped as well, revealing their mapped properties and methods:</p> <p></p> <p>The <code>_C()</code> function is a shorthand for returning the currently active character, available on both client and server.</p> <pre><code>S &gt;&gt; print(_C())\nesv::Character (00007FF4C7E13200)\n</code></pre> <p>Note that this returns an extender character object (<code>esv::Character</code>), not the GUID. The GUID of most objects is mapped to the <code>.MyGuid</code> property, and it's what you have to use for osiris:</p> <p></p> <p>The boolean type is automatically converted to <code>0</code>/<code>1</code> when used in a call, but queries will still return integers.</p> <p>On the client context, <code>_E()</code> returns the character currently being examined in the examine UI.</p>"},{"location":"Tutorials/testing/#epip-helpers","title":"Epip Helpers","text":"<p>Epip has some easy-to-use features to make testing ingame easier, if <code>DeveloperMode</code> is set to <code>true</code> in <code>OsirisExtenderSettings.json</code>.</p> <p>The most important of these is the Force Story Patching setting in the mod's settings menu. It will cause story compilation and patching to occur on any session load, making it far more convenient to test script changes ingame. This and other debug settings are always at the top of the menu, only visible in developer mode.</p> <p>The other useful, non-UI-related tool is the cheat context menu, accessed by right-clicking a character in the world or a player portrait on the left:</p> <p></p> <p>The \"Copy GUID to clipboard\" option is self-explanatory. \"Teleport to object\" teleports the character to another character, item, or trigger, by its GUID. You can combine these two options to quickly teleport party members to eachother.</p> <p>\"Pipmode\" grants immortality, instantly-refreshing cooldowns, as well as infinite AP and SP. The options following it allow you to grant EE scripted stats to the character, with +/- buttons. Holding the \"Show sneak cones\" key (shift by default) adds/removes 10 points at a time. The longer menus can be scrolled with the mouse wheel, though it doesn't look intuitive at the moment. You may also add SpecialLogic and spells through a popup box:</p> <p></p> <p>Lastly, the \"Items...\" submenu allows you to spawn item templates, generate treasure loot onto yourself, as well as quickly spawning in all artifacts and runes (can take a while to have it all generate!).</p>"},{"location":"Tutorials/testing/#macros","title":"Macros","text":"<p>I have a simple AutoHotkey script for modding, with the following macros:</p> <ul> <li><code>Ctrl+M4</code>: focuses the console. M4 is the mouse side button that performs the 'back' function.</li> <li><code>Ctrl+M5</code>: focuses the game.</li> <li><code>Shift+M5</code>: focuses VS Code.</li> <li><code>Ctrl+R</code>: resets lua scripts (types <code>reset</code> in the console), sets some Epip tables to be available from the global context in the client console, then focuses the game.</li> </ul> <pre><code>ConsoleWindowClass := \"ConsoleWindowClass\"\nGameWindowClass := \"SDL_app\"\nConsoleWindow := \"D:OS2 Script Extender Debug Console\"\n^r::LuaReset()\n+XButton2::FocusVSC()\n^XButton1::FocusConsole()\n^XButton2::FocusGame()\nLuaReset()\n{\nglobal ConsoleWindow\nSetKeyDelay, 10\nWinGet, PID, PID, %GameWindow%\nControlSend, , {enter}reset{enter}, %ConsoleWindow%\nControlSend, , client{enter}, %ConsoleWindow%\nFocusGame()\nControlSend, , epip = Mods.EpipEncounters{enter}, %ConsoleWindow%\nControlSend, , ui = epip.Client.UI{enter}exit{enter}, %ConsoleWindow%\n}\nFocusGame()\n{\nglobal GameWindowClass\nWinActivate, ahk_class %GameWindowClass%\n}\nFocusConsole()\n{\nglobal ConsoleWindowClass\nWinActivate, ahk_class %ConsoleWindowClass%\n}\nFocusVSC()\n{\nWinGet, PID, PID, ahk_exe Code.exe\nWinActivate, ahk_pid %PID%\n}\n</code></pre>"},{"location":"Tutorials/Lua/","title":"Index","text":""},{"location":"Tutorials/Lua/#lua-tutorial","title":"Lua Tutorial","text":"<p>The following is an Extender-focused lua tutorial. It is intended to teach you how to use lua with the Script Extender assuming no prior knowledge of the language, just programming basics (variables, control structures, classes etc.)</p>"},{"location":"Tutorials/Lua/#introduction","title":"Introduction","text":"<p>Lua is an interpreted, functional, dynamically-typed language with possibility for prototype-based object-oriented programming. It is intended to be embedded within other applications (in this case, within the extender/game), offering high-level scripting.</p> <p>In the context of the Script Extender, it offers new forms of interaction with the game by allowing read/write access to the internal game object classes, as well as additional events to listen for.</p>"},{"location":"Tutorials/Lua/#setup","title":"Setup","text":"<p>Lua scripts are stored within the <code>Mods/MyMod-GUID/Story/RawFiles/Lua</code> folder and are loaded if the mod is active. Prior to creating lua scripts, you must enable the functionality by configuring a <code>OsiToolsConfig.json</code> file within the <code>Mods/MyMod-GUID</code> folder. The basic configuration is the following: </p><pre><code>{\n    \"RequiredExtensionVersion\": 56,\n    \"ModTable\": \"MyMod\",\n    \"FeatureFlags\": [\n        \"OsirisExtensions\",\n        \"Lua\",\n        \"Preprocessor\"\n    ]\n}\n</code></pre> <p>Fields: - <code>RequiredExtensionVersion</code>: determines the minimum Script Extender version that the mod requires. Set this to the current version as of the time of your mod's creation, and increment it as you start using features from later versions. An error message box will be shown to users if they try to use your mod with an outdated Script Extender. - <code>ModTable</code>: determines the lua table that your mod's variables will be put into. Set this to a unique identifier. We'll get to its use later. - <code>FeatureFlags</code>: determines which features of the extender your mod requires; <code>OsirisExtensions</code> and <code>Preprocessor</code> are optional, but helpful if intend to you complement your lua scripting with Story scripting.</p> <p>After you've setup the config file, you're ready to create your first lua script. When the game loads mods, the extender will automatically load the <code>BootstrapClient.lua</code> and <code>BootstrapServer.lua</code> scripts within the <code>RawFiles/Lua/</code> folder, if they exist. These are the first scripts to be loaded, and the scripts from which you will import any additional ones.</p> <p>The reasoning behind there being 2 different bootstrap scripts is that internally, the game is split into 2 \"contexts\": - Server: the part of the game that runs nearly all the logic (ex. damage calculations, Story scripting) and lets players connect to it. - Client: the game application that connects to the server, displays the game state and allows user interaction. In human words, the game window. Each game instance is one client (players in splitscreen use the same client).</p> <p>As the 2 contexts server different purposes, they differ in the information that is accessible in each. For example, the user interface (character sheet, inventory, etc.) only exists for clients, while Story scripting only runs on the server. As such, lua scripting is also split between Client and Server scripting so you can cleanly separate your functionality based on context.</p>"},{"location":"Tutorials/Lua/#lua-basics","title":"Lua Basics","text":""},{"location":"Tutorials/Lua/#variables","title":"Variables","text":"<p>Lua is an interpreted, dynamically-typed language. This means there is no need to compile it, the raw <code>.lua</code> file is loaded by the extender and interpreted line-by-line. Being dynamically-typed means that variables do not need to be declared with a type, and instead can be assigned and reassigned freely to any value, as is the case in Python for example.</p> <p>Variables are declared and assigned as the following (semicolons at the end of lines are optional): </p><pre><code>local myVar = 1\n</code></pre> The <code>local</code> keyword is optional, and restricts the variable to the current context (the function/file, more precisely a \"chunk\"). Non-local variables are global. <p>The following types exist in lua: - <code>nil</code> (null) - <code>number</code> - <code>integer</code> (in latest versions) - <code>string</code> - <code>function</code> - <code>table</code> - <code>userdata</code> (garbage-collected values also accessible from C) - <code>lightuserdata</code> (C pointers)</p> <p>The concept of the first few should be familiar, while the latter are more lua-specific and we'll cover them later, for now focusing instead on functions and tables.</p>"},{"location":"Tutorials/Lua/#functions","title":"Functions","text":"<p>Functions can be defined in multiple ways, the simplest one being: </p><pre><code>function MyFunc(param1, param2)\n-- Code here!\nend\n</code></pre> <p>Note that comments in lua start with 2 dashes (<code>--</code>).</p> <p>Functions can be given the local modifier as well, and any number of arguments, with no type specification.</p> <p>It is important to note that as lua is not a class-based language, there is no overloading. Creating a new <code>function MyFunc</code> after the first one will override that function no matter if its signature is different. Additionally, since functions are types, assigning <code>MyFunc = something</code> will also override the function!</p> <p>Lua functions can also be called with any amount of parameters, regardless of definition - we'll go into more detail on that quirk later.</p> <p>Functions and tables are passed by reference. (TODO remark that this does not mean you can \"alter\" them outside their context)</p>"},{"location":"Tutorials/Lua/#tables","title":"Tables","text":"<p>Tables are lua's take on objects. If you've done JavaScript or other prototype-based languages, they will be easy to understand.</p> <p>A table-type variable is defined, in its simplest form, like this: </p><pre><code>local myTable = {}\n</code></pre> <p>Tables are the basic, extendable object in lua. You may set and retrieve values on them by indexing them:</p> <pre><code>myTable[\"key1\"] = 1\n-- This also works (if no spaces or special characters)\nmyTable.key2 = 2\nprint(myTable.key1)\nprint(myTable[\"key2\"])\n</code></pre>"},{"location":"Tutorials/Lua/#working-with-the-extender","title":"Working with the Extender","text":""},{"location":"Tutorials/Lua/#events","title":"Events","text":"<p>So far the tutorial has introduced lua basics, but with no explanation on how we'll be interfacing with the game with it.</p> <p>Lua scripting in the extender is primarily event-driven, as is Story scripting. You register listener functions for built-in events to react to things occurring in the game.</p> <p>TODO</p>"}]}