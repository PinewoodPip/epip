{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Epip Encounters Epip Encounters is an add-on mod for Epic Encounters 2 which introduces numerous Quality of Life changes as well as UI improvements. Special thanks to: Ameranth for programming help as well as the amazing moddability of EE Derpy Moa for motivation and initial ideas Norbyte for the Script Extender and it's fantastic UI features Elric for his help with designing and drawing new UIs Download Requires Norbyte's Script Extender . Load after both EE Core and EE Origins. Only English is supported. Text related to gameplay changes will not show up in other languages. Mods that also modify UI are largely incompatible. \"No More Dragging\" and its expanded container version is compatible, for now. Latest stable version, v1043 Features Health Bar The health bar at the top of the screen now shows a character\u2019s resistances as well as their Battered and Harried stacks. The B/H icons will light up if the target has enough of them to suffer a Tier 3 status, and will blink when the duration of the stacks is 1 turn or fewer. The actual B/H statuses are now hidden in this UI to reduce clutter. Credits to Elric for the new art assets used! Holding the \"show sneak cones\" button (shift by default) will replace the resistances display with the character\u2019s current AP, Source and Initiative - very handy for planning and foreseeing enemy turns. Additionally, it will lower the opacity of status effects on the health bar. The health bar above the hotbar now shows its values at all times (you needn't hover over it anymore), and the Physical/Magic Armor text is removed to improve readability. Character Sheets Your physical and piercing resistances are now shown on the character sheet. The tags tab is replaced with a brand new \"Keywords and misc.\" tab. You can use it to quickly reference your keyword activators and mutators, as well as reaction charges remaining. The examine menu now shows Critical Chance, and can be configured to open on the sides of the screen rather than the middle. Tooltip Improvements Item Tooltips The damage stat tooltip in the character sheet now distinguishes the multiplicative bonuses from weapon abilities, and the obsolete Lone Wolf texts are removed. \"Stat Adjustments\" from EE scripting are merged into a single line in tooltips. Long item tooltips will try to fit the screen better, eliminating the issue of being unable to compare items while wielding a heavily upgraded item. Artifacts display with a special rarity and item color, hand-picked by the EE devs. This change has been made available in the base EE mod as well. Additionally, artifact runes now show a \"Cannot equip.\" warning for slots that they are incompatible with. Pieces of equipment with randomly-rolled stats now display a \"Quality\" rating, indicating how well their base damage or armor rolled. A 100% Quality rating is exclusive to Divine items. Their tooltips now also show if they have been Masterworked. The prefix \"Set:\" from modifiers is removed to lessen confusion. The weapon range modifier is now clearly shown amongst the others, and the range at the bottom distinguishes the base weapon range and the added bonus. Skill Tooltips While preparing an infusion or holding the shift key, skill tooltips will highlight unmet Source Infusion requirements in red. Holding the shift key will also display the damage multiplier of skills. Effects that alter the AP costs of skills globally will be reflected appropriately in tooltips. Status Tooltips Tooltips for damaging statuses now display the damage they will deal approximately, rather than showing the base damage before any modifiers. Context Menus Epip Encounters adds fancy new context menu tech that powers numerous QoL features. You can Dismantle, Extract Runes and Dye items directly from item context menus. Destructive actions require shift+clicking to confirm for items that are equipped. Containers with equipment in them get a \"Mass Dismantle\" option, letting you rapidly dismantle unwanted gear. A vanity feature is also included. Equipment can also be transmogrified from context menus into any obtainable item visual in the game. The available visuals are sorted into categories and filtered down to show only the ones compatible with your character's race and gender. Outfits can be saved and loaded across different profiles, and support for Majora's Project Fashion Sins is included, offering possibly the most convenient way so far to enjoy its ridiculous amount of assets. A cheat context menu is also available for characters if developer mode is enabled. It may also be accessed from the player portraits's context menu. It includes numerous handy functions, including teleports, copying GUIDs to clipboard, adding EE stats, spawning templates/loot tables, a godmode, and more. Player Portraits The status bar on your characters now wraps onto a second row once there are more than 6 statuses, preventing it from obscuring the middle of the screen during intense fights. Summon portraits no longer show statuses and are shrunk while the status bar is wrapping. You can right-click your portraits to open a context menu where you can hide the status bar and summons, as well as access the Debug Cheats if you're in developer mode. In the settings, you may also enable a Battered/Harried display on these portraits. Hotbar Epip Encounters expands the hotbar to allow multiple rows of slots and customizable buttons in the bottom left area. To add/remove rows, click the small +/- icons to the right of the buttons area. You can cycle each row independently through all 5 rows of slots that the game allows. You can have up to 5 rows visible. You can use the regular hotkeys (F/R) to cycle the bottom bar. Holding shift (Toggle Sneak Cones) while using them will cycle the second row from the bottom instead. The buttons next to the portrait are now customizable; when your hotbar is unlocked, you can drag and drop to rearrange them. Additionally, mods can add their own \"actions\" there, and there are a few new built-in ones. You can press the middle mouse button to unbind them. Right click one of those buttons or click the ^ button to bring up a \"drawer\" with all the actions that you can drag and drop onto your actions bar. You can also click them to use them directly from there. These buttons can be used with keyboard hotkeys; to do so, you must assign keys to them from the game\u2019s input options menu. They are labelled \"Hotbar Custom Hotkey #N\" there. By default, if you have 2+ rows of hotbar slots, you will also have a second row of these customizable buttons. You can disable this from the settings menu. Epip Encounters implements multiple handy new actions, in addition to some vanilla functions: Source Infuse & Meditate Toggle Minimap Resting (using a bedroll from anywhere in your party inventory - no need to find one for everyone!) Toggle Party Link (instantaneous, no animation!) Respec (if Portable Respec Mirror mod is installed) Access Cheat Commander (with the EE version of the mod) The purpose of the action bar is to provide a centralized place for modders to add shortcuts/hotkeys to their interfaces or features, eliminating the need for interactable books that clutter your inventory and freeing up space on the hotbar. Settings Epip Encounters implements an in-game settings menu to toggle or customize certain features. Noteworthy settings are: Immersive Meditation: hides the minimap and hotbar while you're using the EE interfaces. Skill-casting Notifications: allows you to disable the \"Enemy has cast Skill\" toasts. Auto-identify items: automatically identifies new items found, using the party's highest Loremaster score. Can also be configured to ignore Loremaster entirely. Fog of war: the dark shroud in unexplored areas can be turned off. If turned back on, your \"exploration progress\" is preserved. The size and duration of overhead text and damage can be adjusted. For developers: options for logging of UI calls/invokes, and forcing story patching. Miscellaneous Changes Notifications from characters casting skills in combat are repositioned to show above the hotbar, so as not to obscure the enemy health bars. They can also be disabled in the settings.","title":"Home"},{"location":"#epip-encounters","text":"Epip Encounters is an add-on mod for Epic Encounters 2 which introduces numerous Quality of Life changes as well as UI improvements. Special thanks to: Ameranth for programming help as well as the amazing moddability of EE Derpy Moa for motivation and initial ideas Norbyte for the Script Extender and it's fantastic UI features Elric for his help with designing and drawing new UIs","title":"Epip Encounters"},{"location":"#download","text":"Requires Norbyte's Script Extender . Load after both EE Core and EE Origins. Only English is supported. Text related to gameplay changes will not show up in other languages. Mods that also modify UI are largely incompatible. \"No More Dragging\" and its expanded container version is compatible, for now. Latest stable version, v1043","title":"Download"},{"location":"#features","text":"","title":"Features"},{"location":"#health-bar","text":"The health bar at the top of the screen now shows a character\u2019s resistances as well as their Battered and Harried stacks. The B/H icons will light up if the target has enough of them to suffer a Tier 3 status, and will blink when the duration of the stacks is 1 turn or fewer. The actual B/H statuses are now hidden in this UI to reduce clutter. Credits to Elric for the new art assets used! Holding the \"show sneak cones\" button (shift by default) will replace the resistances display with the character\u2019s current AP, Source and Initiative - very handy for planning and foreseeing enemy turns. Additionally, it will lower the opacity of status effects on the health bar. The health bar above the hotbar now shows its values at all times (you needn't hover over it anymore), and the Physical/Magic Armor text is removed to improve readability.","title":"Health Bar"},{"location":"#character-sheets","text":"Your physical and piercing resistances are now shown on the character sheet. The tags tab is replaced with a brand new \"Keywords and misc.\" tab. You can use it to quickly reference your keyword activators and mutators, as well as reaction charges remaining. The examine menu now shows Critical Chance, and can be configured to open on the sides of the screen rather than the middle.","title":"Character Sheets"},{"location":"#tooltip-improvements","text":"","title":"Tooltip Improvements"},{"location":"#item-tooltips","text":"The damage stat tooltip in the character sheet now distinguishes the multiplicative bonuses from weapon abilities, and the obsolete Lone Wolf texts are removed. \"Stat Adjustments\" from EE scripting are merged into a single line in tooltips. Long item tooltips will try to fit the screen better, eliminating the issue of being unable to compare items while wielding a heavily upgraded item. Artifacts display with a special rarity and item color, hand-picked by the EE devs. This change has been made available in the base EE mod as well. Additionally, artifact runes now show a \"Cannot equip.\" warning for slots that they are incompatible with. Pieces of equipment with randomly-rolled stats now display a \"Quality\" rating, indicating how well their base damage or armor rolled. A 100% Quality rating is exclusive to Divine items. Their tooltips now also show if they have been Masterworked. The prefix \"Set:\" from modifiers is removed to lessen confusion. The weapon range modifier is now clearly shown amongst the others, and the range at the bottom distinguishes the base weapon range and the added bonus.","title":"Item Tooltips"},{"location":"#skill-tooltips","text":"While preparing an infusion or holding the shift key, skill tooltips will highlight unmet Source Infusion requirements in red. Holding the shift key will also display the damage multiplier of skills. Effects that alter the AP costs of skills globally will be reflected appropriately in tooltips.","title":"Skill Tooltips"},{"location":"#status-tooltips","text":"Tooltips for damaging statuses now display the damage they will deal approximately, rather than showing the base damage before any modifiers.","title":"Status Tooltips"},{"location":"#context-menus","text":"Epip Encounters adds fancy new context menu tech that powers numerous QoL features. You can Dismantle, Extract Runes and Dye items directly from item context menus. Destructive actions require shift+clicking to confirm for items that are equipped. Containers with equipment in them get a \"Mass Dismantle\" option, letting you rapidly dismantle unwanted gear. A vanity feature is also included. Equipment can also be transmogrified from context menus into any obtainable item visual in the game. The available visuals are sorted into categories and filtered down to show only the ones compatible with your character's race and gender. Outfits can be saved and loaded across different profiles, and support for Majora's Project Fashion Sins is included, offering possibly the most convenient way so far to enjoy its ridiculous amount of assets. A cheat context menu is also available for characters if developer mode is enabled. It may also be accessed from the player portraits's context menu. It includes numerous handy functions, including teleports, copying GUIDs to clipboard, adding EE stats, spawning templates/loot tables, a godmode, and more.","title":"Context Menus"},{"location":"#player-portraits","text":"The status bar on your characters now wraps onto a second row once there are more than 6 statuses, preventing it from obscuring the middle of the screen during intense fights. Summon portraits no longer show statuses and are shrunk while the status bar is wrapping. You can right-click your portraits to open a context menu where you can hide the status bar and summons, as well as access the Debug Cheats if you're in developer mode. In the settings, you may also enable a Battered/Harried display on these portraits.","title":"Player Portraits"},{"location":"#hotbar","text":"Epip Encounters expands the hotbar to allow multiple rows of slots and customizable buttons in the bottom left area. To add/remove rows, click the small +/- icons to the right of the buttons area. You can cycle each row independently through all 5 rows of slots that the game allows. You can have up to 5 rows visible. You can use the regular hotkeys (F/R) to cycle the bottom bar. Holding shift (Toggle Sneak Cones) while using them will cycle the second row from the bottom instead. The buttons next to the portrait are now customizable; when your hotbar is unlocked, you can drag and drop to rearrange them. Additionally, mods can add their own \"actions\" there, and there are a few new built-in ones. You can press the middle mouse button to unbind them. Right click one of those buttons or click the ^ button to bring up a \"drawer\" with all the actions that you can drag and drop onto your actions bar. You can also click them to use them directly from there. These buttons can be used with keyboard hotkeys; to do so, you must assign keys to them from the game\u2019s input options menu. They are labelled \"Hotbar Custom Hotkey #N\" there. By default, if you have 2+ rows of hotbar slots, you will also have a second row of these customizable buttons. You can disable this from the settings menu. Epip Encounters implements multiple handy new actions, in addition to some vanilla functions: Source Infuse & Meditate Toggle Minimap Resting (using a bedroll from anywhere in your party inventory - no need to find one for everyone!) Toggle Party Link (instantaneous, no animation!) Respec (if Portable Respec Mirror mod is installed) Access Cheat Commander (with the EE version of the mod) The purpose of the action bar is to provide a centralized place for modders to add shortcuts/hotkeys to their interfaces or features, eliminating the need for interactable books that clutter your inventory and freeing up space on the hotbar.","title":"Hotbar"},{"location":"#settings","text":"Epip Encounters implements an in-game settings menu to toggle or customize certain features. Noteworthy settings are: Immersive Meditation: hides the minimap and hotbar while you're using the EE interfaces. Skill-casting Notifications: allows you to disable the \"Enemy has cast Skill\" toasts. Auto-identify items: automatically identifies new items found, using the party's highest Loremaster score. Can also be configured to ignore Loremaster entirely. Fog of war: the dark shroud in unexplored areas can be turned off. If turned back on, your \"exploration progress\" is preserved. The size and duration of overhead text and damage can be adjusted. For developers: options for logging of UI calls/invokes, and forcing story patching.","title":"Settings"},{"location":"#miscellaneous-changes","text":"Notifications from characters casting skills in combat are repositioned to show above the hotbar, so as not to obscure the enemy health bars. They can also be disabled in the settings.","title":"Miscellaneous Changes"},{"location":"docs/","text":"Documentation The features of Epip Encounters are built on top of a lot of trial-and-error research and work on client-side scripting and UI modding. Since late 2021, the focus of development has shifted to making the internals of the mod available as libraries, aiming to provide utility, better maintainability, extendability and easy manipulation of UIs from lua. This change will be a long process. There are still many features of the mod that remain to be rewritten to the new standards and methodology, or extended to provide functionality beyond what the current mod needs. Anything that is documented here is considered stable and unlikely to change drastically - any changes to these calls/systems will be mentioned in future patch notes. The definitions here are auto-generated from EmmyLua annotations within the scripts (using update_docs.py found in the mod). Functions are tagged through @meta to denote tags like \"Client-only\", \"EE-only\". Declaring these at the top of the file tags all functions in the file. Introduction The mod's root table contains the following tables: Epip : stores references to \"Features\" and metadata related to the mod. Game : contains libraries for querying information of characters, items and other contexts relating to the game. Client : contains client-specific calls as well as tables offering UI-specific calls, events and hooks. Utilities : contains utility methods useful across many contexts. The scripting in Epip Encounters focuses on event-driven programming. Aside from functions, systems and features tend to implement events and hooks which allow other scripts to react to them being raised. Event listeners allow you to react to events sent from scripts. They can receive parameters and are executed in the order that they were registered. -- Listen for the shift key being pressed/unpressed. Client.Input:RegisterListener(\"SneakConesToggled\", function(pressed) print(\"Sneak cones toggled: \" .. pressed) end) Hooks are similar to event listeners, but are used to modify values calculated within functions. Their purpose is to allow scripts to alter the logic or output of functions. A hook is always passed a \"default value\" as its first parameter, which will be used if no listeners choose to act upon the event. Any script can implement events/hooks, and it's easy to add \"parameters\" to registering listeners as well, to filter their execution conditonally. -- Set opacity for Battered/Harried stack backgrounds in the health bar based on if the amount if enough to inflict a T3. Client.UI.EnemyHealthBar:RegisterHook(\"GetStackOpacity\", function(opacity, stack, amount) local threshold = Game.Character.GetStacksNeededToInflictTier3(Client.GetCharacter()) if amount >= threshold then opacity = 1 elseif amount == 0 then opacity = 0.5 else opacity = 0.75 end return opacity end) Hooks are not limited to changing primitives, they are often also used in UI scripts to allow for manipulation of the data that the engine is passing it, parsed into handy tables. The following example adds Critical Chance to the Examine UI. -- Add Critical Chance to the examine menu when its data is being updated. Client.UI.Examine:RegisterHook(\"Update\", function(examineData) local char = Client.UI.Examine.GetCharacter() -- Only do this for characters being examined if char then local critEntry = { id = 9, label = \"Critical Chance\", iconID = Client.UI.Examine.ICONS.CRITICAL_CHANCE, value = string.format(\"%d%%\", char.Stats.CriticalChance), type = Client.UI.Examine.ENTRY_TYPES.STAT, } -- Insert crit chance after damage local damageElement,damageIndex,damageCategory = examineData:GetElement(4, 6) examineData:InsertElement(damageCategory.id, critEntry, damageIndex + 1) end return examineData end) Aliases The following EmmyLua aliases are defined (in EpipIdeHelpers.lua ): ---@alias Entity EclCharacter | EsvCharacter | EclItem | EsvItem ---@alias Character EsvCharacter | EclCharacter ---@alias Item EclItem | EsvItem ---@alias EquipSlot \"Helmet\" | \"Breast\" | \"Leggings\" | \"Weapon\" | \"Shield\" | \"Ring\" | \"Belt\" | \"Boots\" | \"Gloves\" | \"Amulet\" | \"Ring\" | \"Ring2\" | \"Horns\" | \"Overhead\" ---@alias EquipmentSubType \"Platemail\" | \"Robes\" | \"Leather\" | \"Belt\" | \"Ring\" | \"Amulet\" | \"Shield\" | \"Dagger\" | \"Sword\" | \"Axe\" | \"Mace\" | \"Sword\" | \"Spear\" | \"Staff\" | \"Bow\" | \"Crossbow\" | \"Wand\" ---@alias StackType \"Battered\" | \"B\" | \"Harried\" | \"H\" ---@alias Gender \"Male\" | \"Female\" ---@alias Race \"Human\" | \"Elf\" | \"Dwarf\" | \"Lizard\" ---@alias Keyword \"ViolentStrike\" | \"VitalityVoid\" | \"Predator\" | \"Elementalist\" | \"Prosperity\" | \"Paucity\" | \"IncarnateChampion\" | \"Defiance\" | \"Occultist\" | \"Disintegrate\" | \"Wither\" | \"Centurion\" | \"Abeyance\" | \"Benevolence\" | \"Presence\" | \"Ward\" | \"Celestial\" | \"Purity\" | \"VolatileArmor\" | \"Voracity\" ---@alias KeywordBoonType \"Activator\" | \"Mutator\" -- For doc generation; does not actually work in IDE ---@class Event ---@class Hook --------------------------------------------- -- UI --------------------------------------------- ---@alias MessageBoxType \"Message\" | \"Input\" --------------------------------------------- -- GAME.TOOLTIP --------------------------------------------- ---@class TooltipData ---@field Data table[] ---@param data table[] ---@return TooltipData function TooltipData:Create(data) end ---@param type string ---@return table function TooltipData:GetElement(type) end ---@param type string ---@return table[] function TooltipData:GetElements(type) end ---@param type string function TooltipData:RemoveElements(type) end ---@param type string function TooltipData:RemoveElement(type) end ---@param ele table function TooltipData:AppendElement(ele) end ---@param ele table ---@param appendAfter table function TooltipData:AppendElementAfter(ele, appendAfter) end","title":"Introduction"},{"location":"docs/#documentation","text":"The features of Epip Encounters are built on top of a lot of trial-and-error research and work on client-side scripting and UI modding. Since late 2021, the focus of development has shifted to making the internals of the mod available as libraries, aiming to provide utility, better maintainability, extendability and easy manipulation of UIs from lua. This change will be a long process. There are still many features of the mod that remain to be rewritten to the new standards and methodology, or extended to provide functionality beyond what the current mod needs. Anything that is documented here is considered stable and unlikely to change drastically - any changes to these calls/systems will be mentioned in future patch notes. The definitions here are auto-generated from EmmyLua annotations within the scripts (using update_docs.py found in the mod). Functions are tagged through @meta to denote tags like \"Client-only\", \"EE-only\". Declaring these at the top of the file tags all functions in the file.","title":"Documentation"},{"location":"docs/#introduction","text":"The mod's root table contains the following tables: Epip : stores references to \"Features\" and metadata related to the mod. Game : contains libraries for querying information of characters, items and other contexts relating to the game. Client : contains client-specific calls as well as tables offering UI-specific calls, events and hooks. Utilities : contains utility methods useful across many contexts. The scripting in Epip Encounters focuses on event-driven programming. Aside from functions, systems and features tend to implement events and hooks which allow other scripts to react to them being raised. Event listeners allow you to react to events sent from scripts. They can receive parameters and are executed in the order that they were registered. -- Listen for the shift key being pressed/unpressed. Client.Input:RegisterListener(\"SneakConesToggled\", function(pressed) print(\"Sneak cones toggled: \" .. pressed) end) Hooks are similar to event listeners, but are used to modify values calculated within functions. Their purpose is to allow scripts to alter the logic or output of functions. A hook is always passed a \"default value\" as its first parameter, which will be used if no listeners choose to act upon the event. Any script can implement events/hooks, and it's easy to add \"parameters\" to registering listeners as well, to filter their execution conditonally. -- Set opacity for Battered/Harried stack backgrounds in the health bar based on if the amount if enough to inflict a T3. Client.UI.EnemyHealthBar:RegisterHook(\"GetStackOpacity\", function(opacity, stack, amount) local threshold = Game.Character.GetStacksNeededToInflictTier3(Client.GetCharacter()) if amount >= threshold then opacity = 1 elseif amount == 0 then opacity = 0.5 else opacity = 0.75 end return opacity end) Hooks are not limited to changing primitives, they are often also used in UI scripts to allow for manipulation of the data that the engine is passing it, parsed into handy tables. The following example adds Critical Chance to the Examine UI. -- Add Critical Chance to the examine menu when its data is being updated. Client.UI.Examine:RegisterHook(\"Update\", function(examineData) local char = Client.UI.Examine.GetCharacter() -- Only do this for characters being examined if char then local critEntry = { id = 9, label = \"Critical Chance\", iconID = Client.UI.Examine.ICONS.CRITICAL_CHANCE, value = string.format(\"%d%%\", char.Stats.CriticalChance), type = Client.UI.Examine.ENTRY_TYPES.STAT, } -- Insert crit chance after damage local damageElement,damageIndex,damageCategory = examineData:GetElement(4, 6) examineData:InsertElement(damageCategory.id, critEntry, damageIndex + 1) end return examineData end)","title":"Introduction"},{"location":"docs/#aliases","text":"The following EmmyLua aliases are defined (in EpipIdeHelpers.lua ): ---@alias Entity EclCharacter | EsvCharacter | EclItem | EsvItem ---@alias Character EsvCharacter | EclCharacter ---@alias Item EclItem | EsvItem ---@alias EquipSlot \"Helmet\" | \"Breast\" | \"Leggings\" | \"Weapon\" | \"Shield\" | \"Ring\" | \"Belt\" | \"Boots\" | \"Gloves\" | \"Amulet\" | \"Ring\" | \"Ring2\" | \"Horns\" | \"Overhead\" ---@alias EquipmentSubType \"Platemail\" | \"Robes\" | \"Leather\" | \"Belt\" | \"Ring\" | \"Amulet\" | \"Shield\" | \"Dagger\" | \"Sword\" | \"Axe\" | \"Mace\" | \"Sword\" | \"Spear\" | \"Staff\" | \"Bow\" | \"Crossbow\" | \"Wand\" ---@alias StackType \"Battered\" | \"B\" | \"Harried\" | \"H\" ---@alias Gender \"Male\" | \"Female\" ---@alias Race \"Human\" | \"Elf\" | \"Dwarf\" | \"Lizard\" ---@alias Keyword \"ViolentStrike\" | \"VitalityVoid\" | \"Predator\" | \"Elementalist\" | \"Prosperity\" | \"Paucity\" | \"IncarnateChampion\" | \"Defiance\" | \"Occultist\" | \"Disintegrate\" | \"Wither\" | \"Centurion\" | \"Abeyance\" | \"Benevolence\" | \"Presence\" | \"Ward\" | \"Celestial\" | \"Purity\" | \"VolatileArmor\" | \"Voracity\" ---@alias KeywordBoonType \"Activator\" | \"Mutator\" -- For doc generation; does not actually work in IDE ---@class Event ---@class Hook --------------------------------------------- -- UI --------------------------------------------- ---@alias MessageBoxType \"Message\" | \"Input\" --------------------------------------------- -- GAME.TOOLTIP --------------------------------------------- ---@class TooltipData ---@field Data table[] ---@param data table[] ---@return TooltipData function TooltipData:Create(data) end ---@param type string ---@return table function TooltipData:GetElement(type) end ---@param type string ---@return table[] function TooltipData:GetElements(type) end ---@param type string function TooltipData:RemoveElements(type) end ---@param type string function TooltipData:RemoveElement(type) end ---@param ele table function TooltipData:AppendElement(ele) end ---@param ele table ---@param appendAfter table function TooltipData:AppendElementAfter(ele, appendAfter) end","title":"Aliases"},{"location":"patchnotes/","text":"Changelog v1044 (upcoming) Requires v56 of the extender. Download here . (26/1/22) 26/1/22: birthday patch :flashed: Fixed \u201cTeleport to\u201d not working on anything other than characters; it now works with items and triggers as well Fixed shields not showing all transmog options Fixed more inconsistency issues with context menus on world characters Transmog menu now works properly for characters that have had their race/gender changed Added an option to show B/H next to player portraits while unsheathed Fixed tooltips of damaging statuses for real Added an option to force story patching on every load Physical/pierce resistances in character sheet now get colored blue/red like how the normal resistances would Holding shift now fades out statuses on the enemy health bar Temporary solution for scrolling context menus that would leave the screen, with the mouse wheel Added something awesome to Fort Joy Technical stuff so it doesn\u2019t look like I\u2019m doing nothing: Added utility methods for initializing \u201cFeatures\u201d You can now specify required filesystem overrides and mods for features, with them automatically disabling themselves if these are missing Removed GetCharacterDodge function Rewrote character sheet resistances script Rewrote script for enemy health bar Moved Majora\u2019s compatibility to its own script Added Game.Character library for character-related stuff Moved a lot of old calls to Client Started work on a library that allows the creation of UIs purely in lua (no swf/actionscript editing) 14/1/22: Re-enabled custom icons on the UIs that previously used them, as the extender issues with them have been fixed. Added a transmog context menu, can be enabled in settings. Appears on equipment with visuals, including weapons. Submenus display categorized root templates, filtered down to only the ones compatible with your current race/gender/alive/undead. Supports Majora\u2019s Fashion Sins. Can save/load outfits, along with their dyes. Saved outfits are in EPIP_VanityOutfits.json Warning: artifacts and armor set items will not currently work properly when transmogrified. Also, Majora\u2019s tabs tend to overflow the screen. Fixed status tooltips in v56 Fixed extract runes context menu option consuming gold instead of splinters Numerous miscellaneous internal changes 27/12/21: Updated to v56 of the extender. Current issues (with the extender): Anything related to status tooltip editing does not work as Game.Tooltip is borked UIs with custom icons (hotbar, toolip) stop displaying vanilla icons after the first session. Custom icons are disabled for now so as to keep both the hotbar and console usable Removed the old console cheats Full rewrite of the stats tab; it should be a lot more reliable now (especially in multiplayer) and survives lua resets Stats and categories are now defined in Epip.Features.StatsTab. Fixed context menu not working on chained characters, and added it to summon portraits (maybe) fixed summon portrait display issues Custom talents now display in the examine menu Organizational changes to tooltip adjustments script torturerSkillOverrides was moved to Data.Game.TORTURER_SKILL_OVERRIDES statusToSkill was moved to Data.Game.DAMAGING_STATUS_SKILLS v1043 (19/12/21) Added critical chance to the examine menu, below damage Added an option to set the default position of the Examine menu (middle, left, or right of the screen) Fixed health bar appearing in character creation Added a new context menu option to dismantle all equipment within a container. Only shows up when there's equipment within a container. Dismantling through the context menu now requires shift-clicking for any equipped item Fixed right-clicking containers bringing up debugging cheats for the character you previously had selected Organizational changes to various UI scripts and older features, as preparations for the grand debut of the Epip modding docs Reuploaded on 22/12/21 with the following fixes: More organizational changes (moving Data.UI to Client.UI.Data) Fixed immunities in examine showing up in the wrong place Undid some recent changes that lead to playerInfo summon display breaking Reuploaded on 23/12/21 to remove some testing text in character creation, as well as to (maybe?) fix an issue with combat HUD disappearing in new games. v1042 (14/12/21) Added an option to hide hotbar hotkeys text Added an \"Immersive Meditation\" setting which disables hotbar and minimap UIs while in Amer UIs Added shortened names for the remaining numpad keys (multiply, add, minus, etc.) Added an auto-identify setting, with 2 modes: always, and only with enough Loremaster. This will instantly identify items when they are generated Item tooltips no longer overflow through the top of the screen, making it easier to see the damage stats on items with 3 filled sockets Dismantling from the context menu now requires shift-clicking for items with runes inside (as a way to mark them as 'important' and avoid misclicks related to a certain new feature) Added a context menu option to items to dye them (requires the dyes to be in the party's inventory) Added a context menu to player portraits to hide statuses and summons (not saved between reloads for now) Added a context menu option to extract runes from items Added a debug menu with cheats for characters, available in the extender's developer mode Accessed by right-clicking a character in the world, or a player portrait in the left portraits UI Allows you to add all sorts of stats, spells, SpecialLogic, spawn items, treasure tables, toggle godmode, and more The new context menu tech is quite extensive, and can be toggled off in the settings in case any serious issues arise Finesse recovery now works for pay X skills, and sucker punch You can add more exceptions to DB_PIP_WeaponBasedFinesse_Whitelist((STRING)_Skill) Fixed overhead dialogue durations being wrong when they were changed away from the default value Overhead sizes are now always default in Amer UIs Fixed origins gaining epic enemies perks for real this time Fixed description of Clouded Memory Fixed map visibility setting not working after exiting respec Fixed being able to toggle minimap within character creation Fixed weapon range deltamod tooltip showing up on unidentified items Fixed wrong health bar B/H display on dead characters The dismantle context menu option should no longer get permanently stuck in case of unidentified shenanigans Added a 20% tax to dismantling items from context menus, used to amortize the development costs of the new menus as well as to fund future development of the mod just kidding v1041 (23/10/21) Added a slider for status overhead duration Fixed damage overheads for items not working with the new size settings Fixed the talents tab being selected after exiting mirror Fixed character sheet not updating the first time it is opened after a respec Fixed decimal stat adjustments being lost while merging them into one tooltip Fixed character creation talent points display when changing presets Fixed 1st hotbar not being clickable after a lua reset Fixed hotbar cooldown/active overlays when joining mid-session This should also have fixed the issue with loading a save during a summon turn Origins should no longer get Epic Enemies buffs Possibly fixed unidentified items showing the weapon range deltamods in the tooltip v1040 (19/10/21) Added some client APIs for the message box UI and overhead texts (Client.UI.MessageBox and Client.UI.Overheads) Added settings for overhead sizes Added a setting to bring back the vanilla combat log button (on by default) Fixed talents not being hidden properly in the character creation UI (which includes the mirror, it's the same UI) Fixed EE stats tab not working for new companions until a reload Fixed sliders in the options menu being saved with +1 step than what you've set them to v1039 (17/10/21) Fixed SI tooltip highlighting not working for a few schools Fixed wrong earth damage color in shift-tooltips v1038 (16/10/21) Added a hotbar hotkey to use the skill/item on the very last slot of your hotbar (right-most in 5th row) Can use this to make a Source Vamp hotkey, for example Weapon range deltamods now show up like regular deltamods on the tooltip, and the weapon range display is split up to show both base and extra range Holding the show cones button (shift by default) will display skill damage as their multipliers When infusing or when the shift key is held, unmet SI requirements will be displayed in red text Possibly fixed the \"auto-unlock inventories\" feature Artifact items now show quality Added an option to log all UI ExternalInterface calls and invokes to the console, visible in the settings menu if the extender developer mode is enabled Started slowly organizing code into sensical libraries; anything in the extended Game table should be reliable and will likely not change names Let me know if something that used to work before broke all of a sudden Fixed an error in the console when hovering over armor whose subtype could not be determined (ex. the starting tattered equipment) Character Creation UI now implements machine learning and blockchain technology to notify you of possible typos in your character names Added a WIP custom talents feature. See EpipTalents.lua for usage example. You can also hide any non-racial talent. Shortcomings: They will only display on kb+m. No controller UI support yet. They do not show up in the examine UI yet. Requirements are not rechecked while moving ability/attribute points around in the mirror; upon exiting, you will still lose any talents you cannot sustain Can't bind them to deltamods Rarely, the mirror UI might show you having fewer talent points than you do - this should fix itself if you exit the mirror and go back in (if someone has a save where this happens consistently, let me know) As a result of the talent UI changes, the bug with unequipping walk-it-off should be fixed v1037 (2/10/21) Fixed right-most zeros getting culled in stat adjustment tooltips Added a new setting to disable fog of war (server-wide, host-only, non-destructive; can be reverted) Minor visual bug: re-enabling FoW will cause the world to go black until you unpause v1036 (1/10/21) Changed the Damage tooltip in character sheet to be less confusing Removed the obsolete \"From LW: -0%\" tooltip text from character sheet Removed the word \"Set:\" from deltamods Added an option to auto-unlock inventories in multiplayer upon loading a save. This setting is per player. Fixed negative stat adjustments not being grouped together in tooltips Equipment now shows a \"Quality\" rating in tooltips, which denotes how good its damage/armor roll was. An item with 100% Quality has the best roll (only possible for Divines) Trickster's Repertoire now grants invisibility+sneaking until the start of your first turn, and only causes you to sneak starting from your second round. Additionally, at the start of your turns, you always unsneak. Changed wording for the Hothead tooltip Fixed error spam in console upon reload, and reorganized some code Added a lifesteal stat to the stats tab (will update upon changing Necromancy points, or in combat) Finished support for preset descriptions in character creation, override CharacterCreation.characterCreationPresetDescriptions in CharacterCreationUI.lua to set them v1035 (12/09/21) Replaced the config json file with an ingame settings menu, available from the game's normal \"Gameplay settings\" tab Unidentified artifacts now show their rarity as artifact, and use the custom color Proteans and Artifact runes now also use the Artifact color, and slots that they cannot be put on have a warning message Fixed Trickster's Repertoire breaking sneaking from other effects that cause you to sneak Fixed hotbar initialization message (again) v1032 (05/09/21) Small patch with some QoL for dyes and a fix for a Finesse issue. Dyeing equipped items will now re-quip them automatically Changed the finesse recovery for weapon-based skills to fix an issue with delayed procs if multiple things used its logic Removed the option to show enemy lvl in healthbar (still buggy!) v1030 (30/08/21) Monthly patch to appease our ever-so-hungry Derpy overlord. Hotbar slot keys now work as expected - ex. pressing \"4\" will use the fourth skill on the bottom bar, regardless of the row it's set to Hotbar actions now show their keybinding, if they have one Vanilla actions (ex. open journal) will always show the vanilla keybind instead of the custom one (it will still work, though) Re-enabled the keyboard hotkeys for hotbar actions by default. If you had these disabled previously (or if you're using the mod for the first time), its keys will be unbound upon loading in Changed the default hotbar bindings to swap ping with combat log Added a hotbar action for Portable Respec Mirror, if its mod is loaded Resting from the hotbar now uses the item rather than resting directly (should work with other bedroll mods now) Added a toggle for the minimap onto the hotbar You can no longer rearrange hotbar actions while the hotbar is locked (except within the skills panel) Added a faint blinking animation to the health bar when B/H have 1 turn or less remaining Added an option to show level next to character name in the top healthbar (on by default) You can now unbind hotbar action buttons with middle-click Added handling for when hotbar actions are removed from a save (ex. disabling a mod that adds them) Brittle status now shows its calculated damage like DoTs Masterworked items now show a warning in the tooltip Changed Splintered Arrow icon Fixed Escapist being a huntsman skill Fix protruding hotbar texture on the bottom bar Fixed Trickster's Repertoire removing AP in consecutive turns Trickster's Repertoire no longer activates while playing dead Fixed artifact names not using the new color (oops) Moved the casting notification slightly up so multiline ones don't overlap the health bar Fixed dragging items onto the world not working if the hotbar was enabled Fixed the add/remove rows button being available on summons after opening the pause menu You can no longer use hotbar action hotkeys in dialogues (or other occasions where the UI is entirely hidden), when there is a UI element focused, or when the game is paused Fixed name of hotbar slot 6 binding in the input menu Fixed Slowed 3 AP penalty stacking v1029 (06/08/21) Moved the casting notifications to where your health bar is, and added a toggle for them in the settings (defaults to enabled) Toggle party link hotbar hotkey is now instant (no casting animation) Added a one-row layout to the hotbar actions bar, which is automatically used when you only have one row of skill slots active You can control the behaviour with the new hotbarHotkeysLayout setting: \"auto\" is the behaviour described above, \"single\" makes it always use the 1-row layout, \"dual\" forces it to always be two rows (like how it was before) Keyboard hotkeys remain functional at all times, even if the buttons are hidden Fixed \"c\" displaying on the hotbar button you're dragging DoT statuses now show their calculated damage The display fluctuates for a bit after a skill cast, might redo this entirely later to not rely on the engine damage formula Centurion Battlestomp can now only be cast if the target is at <10m, and does not consume the ranged charge Tried banishing the \"Enemy Turn\" message again v1027, v1028 (30/07/21 and 31/07/21) This patch contains numerous fixes and the first part of the rework of hotbar hotkeys. Happy birthday Derpy! Replaced the tutorials tab in the journal with a patch notes tab See EpipPatchNotes.lua for an example on how to use this in your own mod. Artifact tooltips now show \"Artifact\" as rarity rather than Unique Hotbar Updates Added customizable hotbar action hotkeys/buttons. Drag and drop to rearrange/assign them, right click to bring up a list of all actions. Mods can add their own actions very easily; see HotbarActions.lua for an example. To use them with keyboard keys, assign the \"Hotbar Hotkey #\" keys from the game's controls menu. Rebinding them will be easier in the future. You must also enable them within the config file. This rework is a work-in-progress, both in terms of functionality and art; in the future there will also be a 1-row layout. The multihotbar is now enabled by default. Set \"disableHotbar\" to true in the config file to disable it. (the old setting now does nothing) Deprecated the Infusion and Meditate hotkeys; please use the hotbar version of them from now on. Summons can no longer add hotbar rows All the custom elements should now hide during dialogues Fixed jankiness when using low resolutions Fixes Fixed player status bar sometimes clipping through portraits and appearing to the left of them Fixed stat adjustments tooltip not working properly on resists Fixed stat adjustments tooltip eating up all other boosts Fixed boss frame in the enemy health bar UI. It should work consistently now Leper rune now should properly grant the talent when it's socketed into an equipped item Fixed being able to infuse out-of-turn with the hotkey (rest in peace gigabrain infused reaction builds) Possibly disabled turn notifications on the hotbar health bar Known issues \"Actions\" drawer (attack/sneak/sheathe) does not work well along with the default keyboard hotkey, and the menu is not repositioned Buttons on the hotbar don't yet light up like they do in vanilla Order of actions in drawer is random Some hotbar buttons do not have state animations yet The title in the patch notes menu will not be the right color the first time after a reload Earlier changelogs are available on the old google doc. Man, v1026 was quite the breakthrough!","title":"Patch Notes"},{"location":"patchnotes/#changelog","text":"","title":"Changelog"},{"location":"patchnotes/#v1044-upcoming","text":"Requires v56 of the extender. Download here . (26/1/22)","title":"v1044 (upcoming)"},{"location":"patchnotes/#26122-birthday-patch-flashed","text":"Fixed \u201cTeleport to\u201d not working on anything other than characters; it now works with items and triggers as well Fixed shields not showing all transmog options Fixed more inconsistency issues with context menus on world characters Transmog menu now works properly for characters that have had their race/gender changed Added an option to show B/H next to player portraits while unsheathed Fixed tooltips of damaging statuses for real Added an option to force story patching on every load Physical/pierce resistances in character sheet now get colored blue/red like how the normal resistances would Holding shift now fades out statuses on the enemy health bar Temporary solution for scrolling context menus that would leave the screen, with the mouse wheel Added something awesome to Fort Joy","title":"26/1/22: birthday patch :flashed:"},{"location":"patchnotes/#technical-stuff-so-it-doesnt-look-like-im-doing-nothing","text":"Added utility methods for initializing \u201cFeatures\u201d You can now specify required filesystem overrides and mods for features, with them automatically disabling themselves if these are missing Removed GetCharacterDodge function Rewrote character sheet resistances script Rewrote script for enemy health bar Moved Majora\u2019s compatibility to its own script Added Game.Character library for character-related stuff Moved a lot of old calls to Client Started work on a library that allows the creation of UIs purely in lua (no swf/actionscript editing)","title":"Technical stuff so it doesn\u2019t look like I\u2019m doing nothing:"},{"location":"patchnotes/#14122","text":"Re-enabled custom icons on the UIs that previously used them, as the extender issues with them have been fixed. Added a transmog context menu, can be enabled in settings. Appears on equipment with visuals, including weapons. Submenus display categorized root templates, filtered down to only the ones compatible with your current race/gender/alive/undead. Supports Majora\u2019s Fashion Sins. Can save/load outfits, along with their dyes. Saved outfits are in EPIP_VanityOutfits.json Warning: artifacts and armor set items will not currently work properly when transmogrified. Also, Majora\u2019s tabs tend to overflow the screen. Fixed status tooltips in v56 Fixed extract runes context menu option consuming gold instead of splinters Numerous miscellaneous internal changes","title":"14/1/22:"},{"location":"patchnotes/#271221","text":"Updated to v56 of the extender. Current issues (with the extender): Anything related to status tooltip editing does not work as Game.Tooltip is borked UIs with custom icons (hotbar, toolip) stop displaying vanilla icons after the first session. Custom icons are disabled for now so as to keep both the hotbar and console usable Removed the old console cheats Full rewrite of the stats tab; it should be a lot more reliable now (especially in multiplayer) and survives lua resets Stats and categories are now defined in Epip.Features.StatsTab. Fixed context menu not working on chained characters, and added it to summon portraits (maybe) fixed summon portrait display issues Custom talents now display in the examine menu Organizational changes to tooltip adjustments script torturerSkillOverrides was moved to Data.Game.TORTURER_SKILL_OVERRIDES statusToSkill was moved to Data.Game.DAMAGING_STATUS_SKILLS","title":"27/12/21:"},{"location":"patchnotes/#v1043-191221","text":"Added critical chance to the examine menu, below damage Added an option to set the default position of the Examine menu (middle, left, or right of the screen) Fixed health bar appearing in character creation Added a new context menu option to dismantle all equipment within a container. Only shows up when there's equipment within a container. Dismantling through the context menu now requires shift-clicking for any equipped item Fixed right-clicking containers bringing up debugging cheats for the character you previously had selected Organizational changes to various UI scripts and older features, as preparations for the grand debut of the Epip modding docs Reuploaded on 22/12/21 with the following fixes: More organizational changes (moving Data.UI to Client.UI.Data) Fixed immunities in examine showing up in the wrong place Undid some recent changes that lead to playerInfo summon display breaking Reuploaded on 23/12/21 to remove some testing text in character creation, as well as to (maybe?) fix an issue with combat HUD disappearing in new games.","title":"v1043 (19/12/21)"},{"location":"patchnotes/#v1042-141221","text":"Added an option to hide hotbar hotkeys text Added an \"Immersive Meditation\" setting which disables hotbar and minimap UIs while in Amer UIs Added shortened names for the remaining numpad keys (multiply, add, minus, etc.) Added an auto-identify setting, with 2 modes: always, and only with enough Loremaster. This will instantly identify items when they are generated Item tooltips no longer overflow through the top of the screen, making it easier to see the damage stats on items with 3 filled sockets Dismantling from the context menu now requires shift-clicking for items with runes inside (as a way to mark them as 'important' and avoid misclicks related to a certain new feature) Added a context menu option to items to dye them (requires the dyes to be in the party's inventory) Added a context menu to player portraits to hide statuses and summons (not saved between reloads for now) Added a context menu option to extract runes from items Added a debug menu with cheats for characters, available in the extender's developer mode Accessed by right-clicking a character in the world, or a player portrait in the left portraits UI Allows you to add all sorts of stats, spells, SpecialLogic, spawn items, treasure tables, toggle godmode, and more The new context menu tech is quite extensive, and can be toggled off in the settings in case any serious issues arise Finesse recovery now works for pay X skills, and sucker punch You can add more exceptions to DB_PIP_WeaponBasedFinesse_Whitelist((STRING)_Skill) Fixed overhead dialogue durations being wrong when they were changed away from the default value Overhead sizes are now always default in Amer UIs Fixed origins gaining epic enemies perks for real this time Fixed description of Clouded Memory Fixed map visibility setting not working after exiting respec Fixed being able to toggle minimap within character creation Fixed weapon range deltamod tooltip showing up on unidentified items Fixed wrong health bar B/H display on dead characters The dismantle context menu option should no longer get permanently stuck in case of unidentified shenanigans Added a 20% tax to dismantling items from context menus, used to amortize the development costs of the new menus as well as to fund future development of the mod just kidding","title":"v1042 (14/12/21)"},{"location":"patchnotes/#v1041-231021","text":"Added a slider for status overhead duration Fixed damage overheads for items not working with the new size settings Fixed the talents tab being selected after exiting mirror Fixed character sheet not updating the first time it is opened after a respec Fixed decimal stat adjustments being lost while merging them into one tooltip Fixed character creation talent points display when changing presets Fixed 1st hotbar not being clickable after a lua reset Fixed hotbar cooldown/active overlays when joining mid-session This should also have fixed the issue with loading a save during a summon turn Origins should no longer get Epic Enemies buffs Possibly fixed unidentified items showing the weapon range deltamods in the tooltip","title":"v1041 (23/10/21)"},{"location":"patchnotes/#v1040-191021","text":"Added some client APIs for the message box UI and overhead texts (Client.UI.MessageBox and Client.UI.Overheads) Added settings for overhead sizes Added a setting to bring back the vanilla combat log button (on by default) Fixed talents not being hidden properly in the character creation UI (which includes the mirror, it's the same UI) Fixed EE stats tab not working for new companions until a reload Fixed sliders in the options menu being saved with +1 step than what you've set them to","title":"v1040 (19/10/21)"},{"location":"patchnotes/#v1039-171021","text":"Fixed SI tooltip highlighting not working for a few schools Fixed wrong earth damage color in shift-tooltips","title":"v1039 (17/10/21)"},{"location":"patchnotes/#v1038-161021","text":"Added a hotbar hotkey to use the skill/item on the very last slot of your hotbar (right-most in 5th row) Can use this to make a Source Vamp hotkey, for example Weapon range deltamods now show up like regular deltamods on the tooltip, and the weapon range display is split up to show both base and extra range Holding the show cones button (shift by default) will display skill damage as their multipliers When infusing or when the shift key is held, unmet SI requirements will be displayed in red text Possibly fixed the \"auto-unlock inventories\" feature Artifact items now show quality Added an option to log all UI ExternalInterface calls and invokes to the console, visible in the settings menu if the extender developer mode is enabled Started slowly organizing code into sensical libraries; anything in the extended Game table should be reliable and will likely not change names Let me know if something that used to work before broke all of a sudden Fixed an error in the console when hovering over armor whose subtype could not be determined (ex. the starting tattered equipment) Character Creation UI now implements machine learning and blockchain technology to notify you of possible typos in your character names Added a WIP custom talents feature. See EpipTalents.lua for usage example. You can also hide any non-racial talent. Shortcomings: They will only display on kb+m. No controller UI support yet. They do not show up in the examine UI yet. Requirements are not rechecked while moving ability/attribute points around in the mirror; upon exiting, you will still lose any talents you cannot sustain Can't bind them to deltamods Rarely, the mirror UI might show you having fewer talent points than you do - this should fix itself if you exit the mirror and go back in (if someone has a save where this happens consistently, let me know) As a result of the talent UI changes, the bug with unequipping walk-it-off should be fixed","title":"v1038 (16/10/21)"},{"location":"patchnotes/#v1037-21021","text":"Fixed right-most zeros getting culled in stat adjustment tooltips Added a new setting to disable fog of war (server-wide, host-only, non-destructive; can be reverted) Minor visual bug: re-enabling FoW will cause the world to go black until you unpause","title":"v1037 (2/10/21)"},{"location":"patchnotes/#v1036-11021","text":"Changed the Damage tooltip in character sheet to be less confusing Removed the obsolete \"From LW: -0%\" tooltip text from character sheet Removed the word \"Set:\" from deltamods Added an option to auto-unlock inventories in multiplayer upon loading a save. This setting is per player. Fixed negative stat adjustments not being grouped together in tooltips Equipment now shows a \"Quality\" rating in tooltips, which denotes how good its damage/armor roll was. An item with 100% Quality has the best roll (only possible for Divines) Trickster's Repertoire now grants invisibility+sneaking until the start of your first turn, and only causes you to sneak starting from your second round. Additionally, at the start of your turns, you always unsneak. Changed wording for the Hothead tooltip Fixed error spam in console upon reload, and reorganized some code Added a lifesteal stat to the stats tab (will update upon changing Necromancy points, or in combat) Finished support for preset descriptions in character creation, override CharacterCreation.characterCreationPresetDescriptions in CharacterCreationUI.lua to set them","title":"v1036 (1/10/21)"},{"location":"patchnotes/#v1035-120921","text":"Replaced the config json file with an ingame settings menu, available from the game's normal \"Gameplay settings\" tab Unidentified artifacts now show their rarity as artifact, and use the custom color Proteans and Artifact runes now also use the Artifact color, and slots that they cannot be put on have a warning message Fixed Trickster's Repertoire breaking sneaking from other effects that cause you to sneak Fixed hotbar initialization message (again)","title":"v1035 (12/09/21)"},{"location":"patchnotes/#v1032-050921","text":"Small patch with some QoL for dyes and a fix for a Finesse issue. Dyeing equipped items will now re-quip them automatically Changed the finesse recovery for weapon-based skills to fix an issue with delayed procs if multiple things used its logic Removed the option to show enemy lvl in healthbar (still buggy!)","title":"v1032 (05/09/21)"},{"location":"patchnotes/#v1030-300821","text":"Monthly patch to appease our ever-so-hungry Derpy overlord. Hotbar slot keys now work as expected - ex. pressing \"4\" will use the fourth skill on the bottom bar, regardless of the row it's set to Hotbar actions now show their keybinding, if they have one Vanilla actions (ex. open journal) will always show the vanilla keybind instead of the custom one (it will still work, though) Re-enabled the keyboard hotkeys for hotbar actions by default. If you had these disabled previously (or if you're using the mod for the first time), its keys will be unbound upon loading in Changed the default hotbar bindings to swap ping with combat log Added a hotbar action for Portable Respec Mirror, if its mod is loaded Resting from the hotbar now uses the item rather than resting directly (should work with other bedroll mods now) Added a toggle for the minimap onto the hotbar You can no longer rearrange hotbar actions while the hotbar is locked (except within the skills panel) Added a faint blinking animation to the health bar when B/H have 1 turn or less remaining Added an option to show level next to character name in the top healthbar (on by default) You can now unbind hotbar action buttons with middle-click Added handling for when hotbar actions are removed from a save (ex. disabling a mod that adds them) Brittle status now shows its calculated damage like DoTs Masterworked items now show a warning in the tooltip Changed Splintered Arrow icon Fixed Escapist being a huntsman skill Fix protruding hotbar texture on the bottom bar Fixed Trickster's Repertoire removing AP in consecutive turns Trickster's Repertoire no longer activates while playing dead Fixed artifact names not using the new color (oops) Moved the casting notification slightly up so multiline ones don't overlap the health bar Fixed dragging items onto the world not working if the hotbar was enabled Fixed the add/remove rows button being available on summons after opening the pause menu You can no longer use hotbar action hotkeys in dialogues (or other occasions where the UI is entirely hidden), when there is a UI element focused, or when the game is paused Fixed name of hotbar slot 6 binding in the input menu Fixed Slowed 3 AP penalty stacking","title":"v1030 (30/08/21)"},{"location":"patchnotes/#v1029-060821","text":"Moved the casting notifications to where your health bar is, and added a toggle for them in the settings (defaults to enabled) Toggle party link hotbar hotkey is now instant (no casting animation) Added a one-row layout to the hotbar actions bar, which is automatically used when you only have one row of skill slots active You can control the behaviour with the new hotbarHotkeysLayout setting: \"auto\" is the behaviour described above, \"single\" makes it always use the 1-row layout, \"dual\" forces it to always be two rows (like how it was before) Keyboard hotkeys remain functional at all times, even if the buttons are hidden Fixed \"c\" displaying on the hotbar button you're dragging DoT statuses now show their calculated damage The display fluctuates for a bit after a skill cast, might redo this entirely later to not rely on the engine damage formula Centurion Battlestomp can now only be cast if the target is at <10m, and does not consume the ranged charge Tried banishing the \"Enemy Turn\" message again","title":"v1029 (06/08/21)"},{"location":"patchnotes/#v1027-v1028-300721-and-310721","text":"This patch contains numerous fixes and the first part of the rework of hotbar hotkeys. Happy birthday Derpy! Replaced the tutorials tab in the journal with a patch notes tab See EpipPatchNotes.lua for an example on how to use this in your own mod. Artifact tooltips now show \"Artifact\" as rarity rather than Unique Hotbar Updates Added customizable hotbar action hotkeys/buttons. Drag and drop to rearrange/assign them, right click to bring up a list of all actions. Mods can add their own actions very easily; see HotbarActions.lua for an example. To use them with keyboard keys, assign the \"Hotbar Hotkey #\" keys from the game's controls menu. Rebinding them will be easier in the future. You must also enable them within the config file. This rework is a work-in-progress, both in terms of functionality and art; in the future there will also be a 1-row layout. The multihotbar is now enabled by default. Set \"disableHotbar\" to true in the config file to disable it. (the old setting now does nothing) Deprecated the Infusion and Meditate hotkeys; please use the hotbar version of them from now on. Summons can no longer add hotbar rows All the custom elements should now hide during dialogues Fixed jankiness when using low resolutions Fixes Fixed player status bar sometimes clipping through portraits and appearing to the left of them Fixed stat adjustments tooltip not working properly on resists Fixed stat adjustments tooltip eating up all other boosts Fixed boss frame in the enemy health bar UI. It should work consistently now Leper rune now should properly grant the talent when it's socketed into an equipped item Fixed being able to infuse out-of-turn with the hotkey (rest in peace gigabrain infused reaction builds) Possibly disabled turn notifications on the hotbar health bar Known issues \"Actions\" drawer (attack/sneak/sheathe) does not work well along with the default keyboard hotkey, and the menu is not repositioned Buttons on the hotbar don't yet light up like they do in vanilla Order of actions in drawer is random Some hotbar buttons do not have state animations yet The title in the patch notes menu will not be the right color the first time after a reload Earlier changelogs are available on the old google doc. Man, v1026 was quite the breakthrough!","title":"v1027, v1028 (30/07/21 and 31/07/21)"},{"location":"Client/","text":"Client The Client table contains client-specific calls as well as tables with APIs for UIs. It is only available on the Client context. The \"Client character\" here refers to the currently-controlled character on the client. Fields ---@class Client ---@field UI ClientUI ---@field Input ClientInput ---@field IS_HOST boolean Internal; do not set! Functions ---Get the Source Infusion level the client character is currently preparing. ---@return number Infusion level function Client.GetPreparedInfusionLevel() -- Client-only, EE-related ---Returns true if the client character is preparing a Source Infusion. ---@return boolean function Client.IsPreparingInfusion() -- Client-only, EE-related ---Returns true if the client is the host of the current session. ---Relies on GameMenu. ---@return boolean function Client.IsHost() -- Client-only ---Returns the currently-controlled character on the client. ---Checks StatusConsole, then CharacterCreation as a fallback. ---@return EclCharacter function Client.GetCharacter() -- Client-only --- Copies text to the clipboard. ---Some characters, like newlines, will be trimmed out as per the vanilla scripting on the swf. ---Relies on MessageBox. ---@param text string function Client.CopyToClipboard(text) -- Client-only","title":"Root"},{"location":"Client/#client","text":"The Client table contains client-specific calls as well as tables with APIs for UIs. It is only available on the Client context. The \"Client character\" here refers to the currently-controlled character on the client.","title":"Client"},{"location":"Client/#fields","text":"---@class Client ---@field UI ClientUI ---@field Input ClientInput ---@field IS_HOST boolean Internal; do not set!","title":"Fields"},{"location":"Client/#functions","text":"---Get the Source Infusion level the client character is currently preparing. ---@return number Infusion level function Client.GetPreparedInfusionLevel() -- Client-only, EE-related ---Returns true if the client character is preparing a Source Infusion. ---@return boolean function Client.IsPreparingInfusion() -- Client-only, EE-related ---Returns true if the client is the host of the current session. ---Relies on GameMenu. ---@return boolean function Client.IsHost() -- Client-only ---Returns the currently-controlled character on the client. ---Checks StatusConsole, then CharacterCreation as a fallback. ---@return EclCharacter function Client.GetCharacter() -- Client-only --- Copies text to the clipboard. ---Some characters, like newlines, will be trimmed out as per the vanilla scripting on the swf. ---Relies on MessageBox. ---@param text string function Client.CopyToClipboard(text) -- Client-only","title":"Functions"},{"location":"Client/input/","text":"Input Client.Input contains input-related queries. Functions ---Returns true if the game is unpaused and there are no focused elements in Flash. ---@return boolean function Input.IsAcceptingInput() -- Client-only ---Returns true if the key bound to the event `id` is being held. ---Note that not all InputEvents support being held. ---@param id number Input event id. ---@return boolean function Input.KeyHeld(id) -- Client-only ---Returns whether a modifier key is being held. ---Set modifier keys with `Input.SetModifierKey`. ---Default is ToggleSneakCones. ---@param num number? Which modifier key to check. ---@return boolean function Input.IsHoldingModifierKey(num) -- Client-only ---Sets the InputEvent for a modifier key. ---You can declare as many modifier keys as you want, ---and query them with `Input.IsHoldingModifierKey()`. ---@param event number The InputEvent. ---@param num number Which modifier key to set. function Input.SetModifierKey(event, num) -- Client-only","title":"Input"},{"location":"Client/input/#input","text":"Client.Input contains input-related queries.","title":"Input"},{"location":"Client/input/#functions","text":"---Returns true if the game is unpaused and there are no focused elements in Flash. ---@return boolean function Input.IsAcceptingInput() -- Client-only ---Returns true if the key bound to the event `id` is being held. ---Note that not all InputEvents support being held. ---@param id number Input event id. ---@return boolean function Input.KeyHeld(id) -- Client-only ---Returns whether a modifier key is being held. ---Set modifier keys with `Input.SetModifierKey`. ---Default is ToggleSneakCones. ---@param num number? Which modifier key to check. ---@return boolean function Input.IsHoldingModifierKey(num) -- Client-only ---Sets the InputEvent for a modifier key. ---You can declare as many modifier keys as you want, ---and query them with `Input.IsHoldingModifierKey()`. ---@param event number The InputEvent. ---@param num number Which modifier key to set. function Input.SetModifierKey(event, num) -- Client-only","title":"Functions"},{"location":"Client/UI/CharacterSheet/","text":"CharacterSheet Events ---@alias SecondaryStatGroup table<string, number> ---Hook to manipulate a secondary stats update. ---@hook SecondaryStatUpdate ---@param stats SecondaryStatBase[] ---@param char EclCharacter Functions ---Get the current character on the sheet. ---Defaults to client character if the sheet is uninitialized. ---@return EclCharacter function CharacterSheet.GetCharacter() -- Client-only ---@return SecondaryStatBase[] function CharacterSheet.DecodeSecondaryStats(ui) -- Client-only Fields ---@class CharacterSheetUI ---@field StatsTab CharacterSheetStatsTab ---@field SECONDARY_STAT_GROUPS table<string, number> IDs of secondarystat groups. StatsTab Client.UI.CharacterSheet.StatsTab handles the basic functionality of the custom stats tab. Collapsable categories and server-side querying of stats is implemented in Epip.Features.StatsTab . Events ---Fired when a stat is rendered. ---@event EntryAdded ---@param data StatsTabStat ---@param value number ---Fired before stats are (re-)rendered. ---@event PreRender ---Fired after a full render of the tab is complete. ---@event PostRender ---Fired when a stat element is created in Flash. ---@event EntryRendered ---@param element FlashMovieClip ---@param elementID string ---Fired when a stat is clicked. ---@event StatClicked ---@param elementID string ---Fired when a stat tooltip is being rendered. ---@event TooltipRendering ---@param statID string ---@param data StatsTabStat ---@param tooltip TooltipData The default tooltip, using Tooltip from the stat data, or Description as a fallback. ---Hook to change the calculated value of a stat. ---@hook GetStatValue ---@param value number ---@param data StatsTabStat ---@param char EclCharacter ---Hook to manipulate the string display of a stat's value. ---@hook FormatStatValue ---@param value number ---@param data StatsTabStat ---@param char EclCharacter ---Hook to manipulate the label display of a stat. ---@hook FormatLabel ---@param label string ---@param data StatsTabStat ---@param value number Functions ---Get the data table of a stat. ---@param id string ---@return StatsTabStat function StatsTab.GetStatData(id) -- Client-only ---Get the numerical value of a stat. Hookable. ---@param id string ---@param char EclCharacter ---@return number function StatsTab.GetStatValue(id, char) -- Client-only ---Get the text display for a stat's value. ---@param id string The stat ID. ---@param value number The value to format. ---@return string|number function StatsTab.FormatStatValue(id, value) -- Client-only ---Render a stat onto the tab. ---@param id string function StatsTab.RenderStat(id) -- Client-only ---Call to perform a full re-render of the tab. ---TODO some SetDirty call to prevent infinite loops with multiple modules calling this? function StatsTab.RenderStats() -- Client-only ---Register a FormatStatValue hook for a specific stat. ---@param stat string ---@param handler function function StatsTab.RegisterStatValueFormatHook(stat, handler) -- Client-only ---Register a GetStatValue hook for a specific stat. ---@param stat string ---@param handler function function StatsTab.RegisterStatValueHook(stat, handler) -- Client-only Fields ---@class CharacterSheetUIStatsTab ---@field Stats table<string, StatsTabStat> ---@field StatsOrder string[] Order in which stats are rendered. ---@field TOOLTIP_TALENT_ID number Enum of the talent ID we hijack the tooltip of. ---@field TOOLTIP_TALENT_NAME string String ID of the talent we hijack the tooltip of. ---@field DEFAULT_STAT_VALUE number ---@field ignoreUpdate boolean Internal; do not set ---@field nextNumericalID number Internal; do not set","title":"CharacterSheet"},{"location":"Client/UI/CharacterSheet/#charactersheet","text":"","title":"CharacterSheet"},{"location":"Client/UI/CharacterSheet/#events","text":"---@alias SecondaryStatGroup table<string, number> ---Hook to manipulate a secondary stats update. ---@hook SecondaryStatUpdate ---@param stats SecondaryStatBase[] ---@param char EclCharacter","title":"Events"},{"location":"Client/UI/CharacterSheet/#functions","text":"---Get the current character on the sheet. ---Defaults to client character if the sheet is uninitialized. ---@return EclCharacter function CharacterSheet.GetCharacter() -- Client-only ---@return SecondaryStatBase[] function CharacterSheet.DecodeSecondaryStats(ui) -- Client-only","title":"Functions"},{"location":"Client/UI/CharacterSheet/#fields","text":"---@class CharacterSheetUI ---@field StatsTab CharacterSheetStatsTab ---@field SECONDARY_STAT_GROUPS table<string, number> IDs of secondarystat groups.","title":"Fields"},{"location":"Client/UI/CharacterSheet/#statstab","text":"Client.UI.CharacterSheet.StatsTab handles the basic functionality of the custom stats tab. Collapsable categories and server-side querying of stats is implemented in Epip.Features.StatsTab .","title":"StatsTab"},{"location":"Client/UI/CharacterSheet/#events_1","text":"---Fired when a stat is rendered. ---@event EntryAdded ---@param data StatsTabStat ---@param value number ---Fired before stats are (re-)rendered. ---@event PreRender ---Fired after a full render of the tab is complete. ---@event PostRender ---Fired when a stat element is created in Flash. ---@event EntryRendered ---@param element FlashMovieClip ---@param elementID string ---Fired when a stat is clicked. ---@event StatClicked ---@param elementID string ---Fired when a stat tooltip is being rendered. ---@event TooltipRendering ---@param statID string ---@param data StatsTabStat ---@param tooltip TooltipData The default tooltip, using Tooltip from the stat data, or Description as a fallback. ---Hook to change the calculated value of a stat. ---@hook GetStatValue ---@param value number ---@param data StatsTabStat ---@param char EclCharacter ---Hook to manipulate the string display of a stat's value. ---@hook FormatStatValue ---@param value number ---@param data StatsTabStat ---@param char EclCharacter ---Hook to manipulate the label display of a stat. ---@hook FormatLabel ---@param label string ---@param data StatsTabStat ---@param value number","title":"Events"},{"location":"Client/UI/CharacterSheet/#functions_1","text":"---Get the data table of a stat. ---@param id string ---@return StatsTabStat function StatsTab.GetStatData(id) -- Client-only ---Get the numerical value of a stat. Hookable. ---@param id string ---@param char EclCharacter ---@return number function StatsTab.GetStatValue(id, char) -- Client-only ---Get the text display for a stat's value. ---@param id string The stat ID. ---@param value number The value to format. ---@return string|number function StatsTab.FormatStatValue(id, value) -- Client-only ---Render a stat onto the tab. ---@param id string function StatsTab.RenderStat(id) -- Client-only ---Call to perform a full re-render of the tab. ---TODO some SetDirty call to prevent infinite loops with multiple modules calling this? function StatsTab.RenderStats() -- Client-only ---Register a FormatStatValue hook for a specific stat. ---@param stat string ---@param handler function function StatsTab.RegisterStatValueFormatHook(stat, handler) -- Client-only ---Register a GetStatValue hook for a specific stat. ---@param stat string ---@param handler function function StatsTab.RegisterStatValueHook(stat, handler) -- Client-only","title":"Functions"},{"location":"Client/UI/CharacterSheet/#fields_1","text":"---@class CharacterSheetUIStatsTab ---@field Stats table<string, StatsTabStat> ---@field StatsOrder string[] Order in which stats are rendered. ---@field TOOLTIP_TALENT_ID number Enum of the talent ID we hijack the tooltip of. ---@field TOOLTIP_TALENT_NAME string String ID of the talent we hijack the tooltip of. ---@field DEFAULT_STAT_VALUE number ---@field ignoreUpdate boolean Internal; do not set ---@field nextNumericalID number Internal; do not set","title":"Fields"},{"location":"Client/UI/Examine/","text":"Examine Hooks for the Examine UI. Fields ---@class ExamineUI ---@field CATEGORIES table<string, number> ---@field ENTRY_TYPES table<string, number> ---@field ICONS table<string, number> IDs for embedded icons. Events Subscribe with Client.UI.Examine:RegisterListener(event: string, handler: function) . ---Fired when the UI is opened. ---@event ExamineOpened ---@param categories ExamineData ---Hook to manipulate the update data. ---@hook Update ---@param data ExamineData Functions ---Get a category of entries by its id. ---@param id number function ExamineData:GetCategory(id) -- Client-only ---Inserts an element into a category at the specified index, appending by default. ---@param category id ---@param element table ---@param index? number function ExamineData:InsertElement(category, element, index) -- Client-only ---Returns the first element, its index and category, using the engine statID. ---@param category? number If nil, all categories are searched. ---@param statID number function ExamineData:GetElement(category, statID) -- Client-only ---Get the character currently being examined. ---@return EclCharacter function Examine.GetCharacter() -- Client-only","title":"Examine"},{"location":"Client/UI/Examine/#examine","text":"Hooks for the Examine UI.","title":"Examine"},{"location":"Client/UI/Examine/#fields","text":"---@class ExamineUI ---@field CATEGORIES table<string, number> ---@field ENTRY_TYPES table<string, number> ---@field ICONS table<string, number> IDs for embedded icons.","title":"Fields"},{"location":"Client/UI/Examine/#events","text":"Subscribe with Client.UI.Examine:RegisterListener(event: string, handler: function) . ---Fired when the UI is opened. ---@event ExamineOpened ---@param categories ExamineData ---Hook to manipulate the update data. ---@hook Update ---@param data ExamineData","title":"Events"},{"location":"Client/UI/Examine/#functions","text":"---Get a category of entries by its id. ---@param id number function ExamineData:GetCategory(id) -- Client-only ---Inserts an element into a category at the specified index, appending by default. ---@param category id ---@param element table ---@param index? number function ExamineData:InsertElement(category, element, index) -- Client-only ---Returns the first element, its index and category, using the engine statID. ---@param category? number If nil, all categories are searched. ---@param statID number function ExamineData:GetElement(category, statID) -- Client-only ---Get the character currently being examined. ---@return EclCharacter function Examine.GetCharacter() -- Client-only","title":"Functions"},{"location":"Client/UI/MessageBox/","text":"MessageBox Client.UI.MessageBox is used to send custom prompts (like with OpenMessageBox in Osiris). Events Subscribe with Client.UI.MessageBox:RegisterListener(event: string, handler: function) . You can subscribe to events coming from a specific message box with RegisterMessageListener() instead. ---Fired when a button is pressed on any custom message box. ---@event ButtonClicked ---@param id number Button ID. ---@param data MessageBoxData ---Fired when a message box with an input field is closed. ---@event InputSubmitted ---@param input string ---@param id number Button ID. ---@param data MessageBoxData Fields ---@class MessageBoxUI ---@field POPUP_TYPES table<string, number> ---@field currentCustomMessageBox MessageBoxData Internal; do not set! Functions ---Show a message box. ---@param data MessageBoxData function MessageBox.ShowMessageBox(data) -- Client-only ---Register an event listener for a message box with a specific ID. ---@param id string Message box ID. ---@param event string Event ID. See the regular events. ---@param handler function function MessageBox:RegisterMessageListener(id, event, handler) -- Client-only","title":"MessageBox"},{"location":"Client/UI/MessageBox/#messagebox","text":"Client.UI.MessageBox is used to send custom prompts (like with OpenMessageBox in Osiris).","title":"MessageBox"},{"location":"Client/UI/MessageBox/#events","text":"Subscribe with Client.UI.MessageBox:RegisterListener(event: string, handler: function) . You can subscribe to events coming from a specific message box with RegisterMessageListener() instead. ---Fired when a button is pressed on any custom message box. ---@event ButtonClicked ---@param id number Button ID. ---@param data MessageBoxData ---Fired when a message box with an input field is closed. ---@event InputSubmitted ---@param input string ---@param id number Button ID. ---@param data MessageBoxData","title":"Events"},{"location":"Client/UI/MessageBox/#fields","text":"---@class MessageBoxUI ---@field POPUP_TYPES table<string, number> ---@field currentCustomMessageBox MessageBoxData Internal; do not set!","title":"Fields"},{"location":"Client/UI/MessageBox/#functions","text":"---Show a message box. ---@param data MessageBoxData function MessageBox.ShowMessageBox(data) -- Client-only ---Register an event listener for a message box with a specific ID. ---@param id string Message box ID. ---@param event string Event ID. See the regular events. ---@param handler function function MessageBox:RegisterMessageListener(id, event, handler) -- Client-only","title":"Functions"},{"location":"Epip/","text":"Epip The Epip table stores Features and metadata related to the mod. (documentation pending)","title":"Root"},{"location":"Epip/#epip","text":"The Epip table stores Features and metadata related to the mod. (documentation pending)","title":"Epip"},{"location":"Epip/StatsTab/","text":"StatsTab Epip.Features.StatsTab implements collapsable categories for the Character Sheet stats tab, as well as Ascension node stats, server-side value calculations and synching, and all stats present in the mod by default. TODO document the rest of the system - Only Shared.lua is here atm. Functions ---@alias EpipStatCategoryBehaviour \"GreyOut\" | \"Hidden\" ---Registers a stat bound to an Ascension node. ---@param clusterId string ---@param nodeIndex number ---@param nodeSubIndex number ---@param keyword Keyword ---@param keywordType KeywordBoonType ---@param statData EpipStat Stat metadata. function EpipStats.AddNodeStat(clusterId, nodeIndex, nodeSubIndex, keyword, keywordType, statData) -- Must be called on both contexts","title":"StatsTab"},{"location":"Epip/StatsTab/#statstab","text":"Epip.Features.StatsTab implements collapsable categories for the Character Sheet stats tab, as well as Ascension node stats, server-side value calculations and synching, and all stats present in the mod by default. TODO document the rest of the system - Only Shared.lua is here atm.","title":"StatsTab"},{"location":"Epip/StatsTab/#functions","text":"---@alias EpipStatCategoryBehaviour \"GreyOut\" | \"Hidden\" ---Registers a stat bound to an Ascension node. ---@param clusterId string ---@param nodeIndex number ---@param nodeSubIndex number ---@param keyword Keyword ---@param keywordType KeywordBoonType ---@param statData EpipStat Stat metadata. function EpipStats.AddNodeStat(clusterId, nodeIndex, nodeSubIndex, keyword, keywordType, statData) -- Must be called on both contexts","title":"Functions"},{"location":"Game/","text":"Game The Game table contains multiple libraries focusing on querying data about the current game session, such as information from characters and items. The Game.Math and Game.Tooltip tables from the Extender remain. Game.Tooltip.TooltipHooks.GetCompareItem is edited to fix an issue with item comparisons passing the wrong EclItem (issue) . Additionally, tooltips are now re-rendered whenever the Toggle Sneak Cones key is pressed/unpressed, to allow it to be used as a \"modifier\" for conditional tooltip rendering. Fields ---@class Game ---@field Items GameItems ---@field Net GameNet ---@field EDITOR_VERSION string The current version of the game editor.","title":"Root"},{"location":"Game/#game","text":"The Game table contains multiple libraries focusing on querying data about the current game session, such as information from characters and items. The Game.Math and Game.Tooltip tables from the Extender remain. Game.Tooltip.TooltipHooks.GetCompareItem is edited to fix an issue with item comparisons passing the wrong EclItem (issue) . Additionally, tooltips are now re-rendered whenever the Toggle Sneak Cones key is pressed/unpressed, to allow it to be used as a \"modifier\" for conditional tooltip rendering.","title":"Game"},{"location":"Game/#fields","text":"---@class Game ---@field Items GameItems ---@field Net GameNet ---@field EDITOR_VERSION string The current version of the game editor.","title":"Fields"},{"location":"Game/Character/","text":"Character The Game.Character table contains functions for querying info of characters. Most functions expect you to pass Character as the first parameter (alias for EclCharacter and EsvCharacter ). Functions ---Returns the current stacks on char, as well as lifetime. Queries the related status effects. ---@param char Character ---@param type StackType ---@return number,number Stack count, duration left (as seconds) function Character.GetStacks(char, type) -- EE-related ---Get the infusion level that char is currently preparing (how many times they've cast Source Infuse). ---@param char Character ---@return number Infusion count. function Character.GetPreparedInfusionLevel(char) -- EE-related ---Returns true if char is preparing a Source Infusion. ---@param char Character ---@return boolean function Character.IsPreparingInfusion(char) -- EE-related ---Get the stack amount this character needs to apply a T3 to someone else. ---**This only takes into account the bonus from infusing!** ---@param char Character ---@return number Stacks needed function Character.GetStacksNeededToInflictTier3(char) -- EE-related ---Returns true if char is a summon. ---@param char Character ---@return boolean function Character.IsSummon(char) ---Returns the gender of char. ---@param char Character ---@return Gender function Character.GetGender(char) ---Returns true if char is male. ---@param char Character ---@return boolean function Character.IsMale(char) ---Returns the current race of char. ---@param char Character ---@return Race function Character.GetRace(char) ---Returns the original race of a player char, before any transforms. ---@param char Character Must be tagged with \"REALLY_{Race}\" ---@return Race function Character.GetRealRace(char)","title":"Character"},{"location":"Game/Character/#character","text":"The Game.Character table contains functions for querying info of characters. Most functions expect you to pass Character as the first parameter (alias for EclCharacter and EsvCharacter ).","title":"Character"},{"location":"Game/Character/#functions","text":"---Returns the current stacks on char, as well as lifetime. Queries the related status effects. ---@param char Character ---@param type StackType ---@return number,number Stack count, duration left (as seconds) function Character.GetStacks(char, type) -- EE-related ---Get the infusion level that char is currently preparing (how many times they've cast Source Infuse). ---@param char Character ---@return number Infusion count. function Character.GetPreparedInfusionLevel(char) -- EE-related ---Returns true if char is preparing a Source Infusion. ---@param char Character ---@return boolean function Character.IsPreparingInfusion(char) -- EE-related ---Get the stack amount this character needs to apply a T3 to someone else. ---**This only takes into account the bonus from infusing!** ---@param char Character ---@return number Stacks needed function Character.GetStacksNeededToInflictTier3(char) -- EE-related ---Returns true if char is a summon. ---@param char Character ---@return boolean function Character.IsSummon(char) ---Returns the gender of char. ---@param char Character ---@return Gender function Character.GetGender(char) ---Returns true if char is male. ---@param char Character ---@return boolean function Character.IsMale(char) ---Returns the current race of char. ---@param char Character ---@return Race function Character.GetRace(char) ---Returns the original race of a player char, before any transforms. ---@param char Character Must be tagged with \"REALLY_{Race}\" ---@return Race function Character.GetRealRace(char)","title":"Functions"},{"location":"Game/Item/","text":"Item Contains queries related to items. Most functions expect you to pass Item as the first parameter (alias for EclItem and EsvItem ). Functions --- Count the amount of template instances (prefix + guid) in the client party's inventory. ---@param template string ---@return number function Game.Items.GetPartyTemplateCount(template) -- Client-only --- Count the items in an entity's inventory that match a predicate. --- Different from the server implementation, as item amounts cannot be queried on client from the item object. We rely on partyInventory UI instead. ---@param entity Entity ---@param predicate function ---@return number function Game.Items.CountItemsInInventory(entity, predicate) -- Client-only --- Count the items in an entity's inventory that match a predicate function. --- Predicate is passed ``EsvItem`` and should return true for items to be counted. ---@param entity Entity ---@param predicate function ---@return number function Game.Items.CountItemsInInventory(entity, predicate) -- Server-only --- Returns true if the item is an Artifact by checking the AMER_UNI tag. ---@param item Item ---@return boolean function Game.Items.IsArtifact(item) --- Gets the amount of Loremaster necessary to identify an item. --- Ignores whether the item is already identified. ---@param item Item ---@return number function Game.Items.GetIdentifyRequirement(item) --- Returns true if the item is an armor piece or a weapon. ---@param item Item ---@return boolean function Game.Items.IsEquipment(item) --- Returns true for dyeable items (equipment, except rings/amulet/belt). ---@param item Item ---@return boolean function Game.Items.IsDyeable(item) --- Alias for Item.Stats.ItemSlot ---@param item Item ---@return string function Game.Items.GetItemSlot(item) --- Like ItemSlot, but distinguishes armor subtypes --- Get subtype of item (ex. \"Dagger\" or \"Platemail\"). --- Returns ItemSlot for items with no subtypes ---@param item Item ---@return EquipmentSubType function Game.Items.GetEquipmentSubtype(item) --- Applies a dye to the item. ---@param item Item ---@param dye Dye ---@return boolean False if item is already dyed with the same dye, or if dye is ``nil``. function Game.Items.ApplyDye(item, dye) --- Returns the ID and data for the most recently-applied dye deltamod on the item. ---@param item Item ---@return string,Dye The dye ID and data table. function Game.Items.GetCurrentDye(item) --- Returns true if item is equipped by char. Assumes the item cannot be equipped into an unintended slot. Rings are checked for both slots. ---@param char Character ---@param item Item ---@return boolean function Game.Items.IsEquipped(char, item) --- Gets the stats object of the rune inserted at rune index ``index`` on item. ---@param item Item ---@param index number ---@return StatItem function Game.Items.GetRune(item, index) --- Returns a list of runes on the item. ---@param item Item ---@return table<number, StatItem> Empty slots are nil. function Game.Items.GetRunes(item) --- Returns true if item has any runes slotted. ---@param item Item ---@return boolean function Game.Items.HasRunes(item) --- Returns a list of the items in the entity's inventory that match an optional predicate function. --- Predicate is passed the EclItem/EsvItem and should return true for items to be included. ---@param entity Entity ---@param predicate function ---@return Item[] function Game.Items.GetItemsInInventory(entity, predicate)","title":"Item"},{"location":"Game/Item/#item","text":"Contains queries related to items. Most functions expect you to pass Item as the first parameter (alias for EclItem and EsvItem ).","title":"Item"},{"location":"Game/Item/#functions","text":"--- Count the amount of template instances (prefix + guid) in the client party's inventory. ---@param template string ---@return number function Game.Items.GetPartyTemplateCount(template) -- Client-only --- Count the items in an entity's inventory that match a predicate. --- Different from the server implementation, as item amounts cannot be queried on client from the item object. We rely on partyInventory UI instead. ---@param entity Entity ---@param predicate function ---@return number function Game.Items.CountItemsInInventory(entity, predicate) -- Client-only --- Count the items in an entity's inventory that match a predicate function. --- Predicate is passed ``EsvItem`` and should return true for items to be counted. ---@param entity Entity ---@param predicate function ---@return number function Game.Items.CountItemsInInventory(entity, predicate) -- Server-only --- Returns true if the item is an Artifact by checking the AMER_UNI tag. ---@param item Item ---@return boolean function Game.Items.IsArtifact(item) --- Gets the amount of Loremaster necessary to identify an item. --- Ignores whether the item is already identified. ---@param item Item ---@return number function Game.Items.GetIdentifyRequirement(item) --- Returns true if the item is an armor piece or a weapon. ---@param item Item ---@return boolean function Game.Items.IsEquipment(item) --- Returns true for dyeable items (equipment, except rings/amulet/belt). ---@param item Item ---@return boolean function Game.Items.IsDyeable(item) --- Alias for Item.Stats.ItemSlot ---@param item Item ---@return string function Game.Items.GetItemSlot(item) --- Like ItemSlot, but distinguishes armor subtypes --- Get subtype of item (ex. \"Dagger\" or \"Platemail\"). --- Returns ItemSlot for items with no subtypes ---@param item Item ---@return EquipmentSubType function Game.Items.GetEquipmentSubtype(item) --- Applies a dye to the item. ---@param item Item ---@param dye Dye ---@return boolean False if item is already dyed with the same dye, or if dye is ``nil``. function Game.Items.ApplyDye(item, dye) --- Returns the ID and data for the most recently-applied dye deltamod on the item. ---@param item Item ---@return string,Dye The dye ID and data table. function Game.Items.GetCurrentDye(item) --- Returns true if item is equipped by char. Assumes the item cannot be equipped into an unintended slot. Rings are checked for both slots. ---@param char Character ---@param item Item ---@return boolean function Game.Items.IsEquipped(char, item) --- Gets the stats object of the rune inserted at rune index ``index`` on item. ---@param item Item ---@param index number ---@return StatItem function Game.Items.GetRune(item, index) --- Returns a list of runes on the item. ---@param item Item ---@return table<number, StatItem> Empty slots are nil. function Game.Items.GetRunes(item) --- Returns true if item has any runes slotted. ---@param item Item ---@return boolean function Game.Items.HasRunes(item) --- Returns a list of the items in the entity's inventory that match an optional predicate function. --- Predicate is passed the EclItem/EsvItem and should return true for items to be included. ---@param entity Entity ---@param predicate function ---@return Item[] function Game.Items.GetItemsInInventory(entity, predicate)","title":"Functions"}]}