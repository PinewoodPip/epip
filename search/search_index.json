{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Epip Encounters \u00b6 Epip Encounters is a UI and QoL mod targeting Epic Encounters 2 , though it may also be used without it. Download \u00b6 Language warning Only English is fully supported, however crowdsourced translations are underway. Localization is only possible thanks to the members of our community. If you want to help with it - feel free to contribute at our translation spreadsheet . Standalone usage warning If you have the Improved Hotbar mod, you must disable it to use Epip . All of its functions are already in Epip (+ like 9 months worth of updates that the workshop mod never got). See the front page and the changelog if you're new to Epip. Gameplay mod info If you're using Derpy's EE2 Tweaks, you will likely want to grab the gameplay mod as well. Derpy's mod is intended to be used with it. Requires Norbyte's Script Extender . Load after both EE Core and EE Origins, if you have them. The stable version is months behind the beta one. Consider using the beta instead to avoid running into issues that were fixed long ago. As of 5/8/23 extender v60 is in a stable state; there are no known issues with it. Latest stable version, v1065 . (07/05/23) See the patchnotes page for patchnotes. Special thanks to: Ameranth for programming help as well as the amazing moddability of EE Derpy Moa for motivation and initial ideas Norbyte for the Script Extender and it's fantastic UI features Elric for his help with designing and drawing new UIs Cathe for contributing to the feature showcases on this website, and some code and proof-reading too Translators: Cathe & JoienReid: Russian Ferocidade: Brazilian Portuguese Ainsky: Simplified Chinese Features \u00b6 Below is a non-exhaustive list of features; I suggested browsing the latest patchnotes to get up to speed with latest additions. UI \u00b6 Target Status Bar \u00b6 Health bar shown at the top of the screen has been reworked to look better and include more information. More details here . Player Portraits \u00b6 Player portraits display has also received some love, most notably - the list of statuses will now wrap onto a second row to prevent it from obscuring most of your screen. More details here . Epip makes dozens of other UI changes to improve your experience. You can read about the rest of them here . Hotbar \u00b6 Epip offers a heavily improved Hotbar UI, featuring multiple bars, custom \"action\" buttons in the bottom left, and numerous functions to make hotbar management easier. To add/remove rows, click the small +/- icons to the right of the buttons area. You can cycle each row independently through all 5 rows of slots that the game allows. You can have up to 5 rows visible. You can use the regular hotkeys (F/R by default) to cycle the bottom bar. Holding shift while using them will cycle the second row from the bottom instead. Holding Ctrl will cycle the 3rd row, while holding alt will cycle the 4th one. The buttons next to the portrait are now customizable; when your hotbar is unlocked, you can drag and drop to rearrange them. Additionally, mods can add their own \"actions\" there, and there are a few new built-in ones. You can press the middle mouse button to unbind them. Right click one of those buttons or click the ^ button to bring up a \"drawer\" with all the actions that you can drag and drop onto your actions bar. You can also click them to use them directly from there. These buttons can be used with keyboard hotkeys; to do so, you must assign keys to them from Epip's input options menu. They are labelled \"Hotbar Action #N\" there. By default, if you have 2+ rows of hotbar slots, you will also have a second row of these customizable buttons. You can disable this from the settings menu. Epip Encounters implements multiple handy new actions, in addition to some vanilla functions: Source Infuse & Meditate Toggle Minimap Resting (using a bedroll from anywhere in your party inventory - no need to find one for everyone!) Toggle Party Link (instantaneous, no animation!) Respec (if Portable Respec Mirror mod is installed) The purpose of the action bar is to provide a centralized place for modders to add shortcuts/hotkeys to their interfaces or features, eliminating the need for interactable books that clutter your inventory and freeing up space on the hotbar. Right-click a row on the hotbar to bring up a context menu where you can \"push\" groups of slots around (great for inserting spells inbetween!), clear unmemorized spells, or save \"loadouts\" to restore your hotbars in later playthroughs. Additionally, all \"engine actions\" (except for flee) are available from the vanilla actions drawer. The hotbar improvements are also available as a standalone mod with no EE dependency. Settings Menu \u00b6 The settings menu has been expanded to allow mods to add their own settings. Epip includes its own tab full of options to customize its features. The input menu has received similar treatment, with custom keybindings becoming possible. You must first click the \"Controls\" tab before you can access custom keybinds added by Epip. Custom hotkeys include Meditate, Source Infuse, as well as binding the 12 \"action buttons\" from the Hotbar UI. Additionally, the difficulty can now be changed to/from tactician freely at any time. The side effects of this have not been studied well, but everything appears to work fine with the exception of already-initialized enemies having missing HP and consumables(?). Tooltip Adjustments \u00b6 Tooltips have received numerous fixes and improvements, displaying a lot of information in a clearer manner. You can read about them at their dedicated page . Inventory \u00b6 A setting has been added to enable infinite carry weight for all party members. You can also enable automatic identifying of items, optionally not requiring any Loremaster. Consumable items, like mushrooms and food, no longer require you to use them once for them to show their effects in the tooltip. Combat Log \u00b6 You may now filter out individual types of messages in the combat log by right-clicking it. Certain messages have been reworded for clarity and can now \"merge\" if they happen in quick succession, improving readability. You can also clear the log from the context menu. World Tooltips \u00b6 A keybind has been added to make world item tooltips toggleable, so you don't need to hold alt all the time. A setting also exists to disable these tooltips for empty containers and bodies, as well as to make clicking the tooltips open containers rather than pick them up. Additional settings exist to enable these tooltips for more item types, as well as to highlight certain types of items with a customizable color. Overhead Text and Notifications \u00b6 Settings have been added to shorten the duration of overhead text, and to change their size (as well as the size of damage numbers). Notifications from characters casting skills in combat are repositioned to show above the hotbar, so as not to obscure the enemy health bars. They can also be disabled in the settings. Additionally, you can change the duration of the area transition labels, or disable them entirely. Skillbook \u00b6 You can now unlearn skills by right-clicking them in the skillbook while out of combat. Innate skills cannot be unlearnt. Crafting \u00b6 The crafting UI now remembers your previous tab, instead of always defaulting to showing all items - this is helpful for using the Greatforge. Additionally, you can set the default tab of the UI in the settings menu. Gift Bags and mod incompatibilities \u00b6 Gift bag mods incompatible with EE are no longer selectable, to prevent regrets. Gift bags that work but for one reason or another are undesirable show a warning upon attempting to enable them. Common mods incompatible with EE or its add-ons now show a warning when you load into the game with them enabled. Quick Examine \u00b6 A \"Quick Examine\" panel can be opened with a custom hotkey (defaults to V ). This panel is mainly used to show the effects enemies have from the \"Epic Enemies\" feature, but it also displays the character's artifacts, useful to check your ally's effects in multiplayer. More information will be added to this panel in the future. Examine \u00b6 The Examine UI now shows Critical Chance, and can be configured to open on the sides of the screen instead of the center. Additionally, there is now a keybind to open the examine menu, and capitalization of the word \"Status efects\" has been made consistent with the rest of the UI. Ingame Patchnotes \u00b6 A new journal UI can be accessed from the Hotbar actions, or after updating the mod. It lists the patchnotes of Epip, and other mods can add information/patchnotes there freely as well. Updating the mod will also show a prompt to open the UI. Chat \u00b6 Chat commands are added, beginning with a slash (/). The following commands exist: /rp : shows a message over your current character's head. Great for role-playing. /emote : plays an animation for your current character. Use /help emote to see all emotes. /help : shows all commands, or help for a particular command. Save/Load UI \u00b6 An alphabetical sorting option as well as a search bar can be enabled in the options for the save/load UI. Ascension/Meditate \u00b6 Ascension \u00b6 You can now use the Esc key to go back to the previous page in the Ascension UI, or exit it if you're on the default page. An option exists to make this key always exit the UI. An \"Immersive Meditation\" setting can be enabled to hide the minimap and hotbar while within the EE UIs. Greatforge Context Menus \u00b6 Item context menus now have options to quickly dismantle items, as well as to remove their runes. Doing so still costs the usual amount of gold/splinters respectively. Containers with equipment in them get a \"Mass Dismantle\" option, letting you rapidly dismantle unwanted gear. Greatforge \u00b6 An option to add sockets to items (\"Drill Sockets\") has been added. This does not allow you to break the 2 socket limit for one-handed weaponry. The Empower option now properly scales armor values, however this will only take effect after a save+reload. Additionally, an option to rename items (\"Engrave\") has been added. This is purely cosmetic. Epic Enemies \u00b6 Epic Enemies is a randomizer feature enabled from the ingame settings menu. It bestows enemies with EE perks such as keyword activators/mutators, artifacts, and more. You can configure the relative chance of each effect being rolled on enemies. These effects will be applied to enemies when they enter combat. You may use the \"Quick Examine\" feature to view the perks that each enemy rolled; see its respective section in this site for more info. Vanity \u00b6 Easy to use cosmetic customization system, including armor transmogrification, custom RGB dyes, quick outfit swapping and auras. Wanna drip as hard as this? Learn more at the dedicated feature page . Miscellaneous Bug Fixes and Adjustments \u00b6 Certain client-side vanilla issues have been fixed. You may read about them at their dedicated page . For developers \u00b6 Epip is built using numerous libraries, making client-side scripting and UI modding easier. This site's documentation of them is heavily WIP. Every UI touched by Epip has a lua table with wrapper APIs to manipulate it. Additionally, multiple utility libraries are available: Client : contains queries relating to the client. Client.UI : holds all UI tables; too many to list individually, below are the most noteworthy ones. Client.UI.MessageBox : allows you to open your own message boxes, which may also prompt for user string input. Client.UI.ContextMenu : allows creating custom context menus, with numerous new types of elements and support for nested menus. Warning: it's a very old API and does not hold up to current standards. A rewrite is pending. Client.Flash : contains utility methods for handling Flash elements from lua. Client/Server.lua : allows registering osiris symbol listeners from the client. Osiris : provides a cleaner way of working with Osiris symbols: allows passing of extender entity objects in place of GUIDs, returning from user queries, and unpacking DB query results. Character , Item : libraries with numerous utility functions for the related entity types. Text : utility methods for working with text, featuring a super-versatile Format function for dealing with those pesky html font tags. Timer : self-explanatory. Also supports tick-based timers. Coroutine : improved coroutine table, with the ability to sleep coroutines, either for a certain amount of time or until a condition is met. Color , Vector : utilities for dealing with colors and vectors. Client.UI.Generic : allows for the creation of UIs using only lua. Work-in-progress (well, everything here is, in a way). Epip : main mod table, containing registered Features. Developer Features \u00b6 Debug Cheats \u00b6 If the extender developer mode is available, a cheats context menu is added to characters, with numerous handy functions like: Copying GUID to clipboard Teleporting Kill/resurrect Next-gen godmode (\"Pipmode\"), with infinite AP and 0 skill cooldowns Adding Flexstats, ExtendedStats, attributes/abilities, skills, statuses and more Spawning all artifacts, or specific treasure tables or templates Debug Display \u00b6 In developer mode, a UI widget with FPS, TPS and mod version info can be enabled from the settings. This widget can be dragged around. Debug Menu \u00b6 In developer mode, a menu with debugging options for Features can be opened using a keybind (defaults to LCtrl + F). You can use it to change logging levels, disable features, and run tests. Your logging/debug settings are persistent. AI Logging \u00b6 An option exists to log AI scoring to the console. Console Commands \u00b6 A few miscellaneous console commands are added: !bruteforceuitypes : client-side; attempts to find the TypeIDs of all UIs currently instanced, including custom ones !soundtest : client-side; plays all the sounds defined in the UI sounds lsx and shows their name. Useful for inspiration. !animtest : server-side; plays all human female animations on the currently controlled character. Cannot be interrupted once started! !worryaboutsuchsmallthings : tests the performance between EsvCharacter:HasTag() and Osi.IsTagged() !testactionhandles : tests string handles for \"actions\" from the Stats library.","title":"Home"},{"location":"#epip-encounters","text":"Epip Encounters is a UI and QoL mod targeting Epic Encounters 2 , though it may also be used without it.","title":"Epip Encounters"},{"location":"#download","text":"Language warning Only English is fully supported, however crowdsourced translations are underway. Localization is only possible thanks to the members of our community. If you want to help with it - feel free to contribute at our translation spreadsheet . Standalone usage warning If you have the Improved Hotbar mod, you must disable it to use Epip . All of its functions are already in Epip (+ like 9 months worth of updates that the workshop mod never got). See the front page and the changelog if you're new to Epip. Gameplay mod info If you're using Derpy's EE2 Tweaks, you will likely want to grab the gameplay mod as well. Derpy's mod is intended to be used with it. Requires Norbyte's Script Extender . Load after both EE Core and EE Origins, if you have them. The stable version is months behind the beta one. Consider using the beta instead to avoid running into issues that were fixed long ago. As of 5/8/23 extender v60 is in a stable state; there are no known issues with it. Latest stable version, v1065 . (07/05/23) See the patchnotes page for patchnotes. Special thanks to: Ameranth for programming help as well as the amazing moddability of EE Derpy Moa for motivation and initial ideas Norbyte for the Script Extender and it's fantastic UI features Elric for his help with designing and drawing new UIs Cathe for contributing to the feature showcases on this website, and some code and proof-reading too Translators: Cathe & JoienReid: Russian Ferocidade: Brazilian Portuguese Ainsky: Simplified Chinese","title":"Download"},{"location":"#features","text":"Below is a non-exhaustive list of features; I suggested browsing the latest patchnotes to get up to speed with latest additions.","title":"Features"},{"location":"#ui","text":"","title":"UI"},{"location":"#target-status-bar","text":"Health bar shown at the top of the screen has been reworked to look better and include more information. More details here .","title":"Target Status Bar"},{"location":"#player-portraits","text":"Player portraits display has also received some love, most notably - the list of statuses will now wrap onto a second row to prevent it from obscuring most of your screen. More details here . Epip makes dozens of other UI changes to improve your experience. You can read about the rest of them here .","title":"Player Portraits"},{"location":"#hotbar","text":"Epip offers a heavily improved Hotbar UI, featuring multiple bars, custom \"action\" buttons in the bottom left, and numerous functions to make hotbar management easier. To add/remove rows, click the small +/- icons to the right of the buttons area. You can cycle each row independently through all 5 rows of slots that the game allows. You can have up to 5 rows visible. You can use the regular hotkeys (F/R by default) to cycle the bottom bar. Holding shift while using them will cycle the second row from the bottom instead. Holding Ctrl will cycle the 3rd row, while holding alt will cycle the 4th one. The buttons next to the portrait are now customizable; when your hotbar is unlocked, you can drag and drop to rearrange them. Additionally, mods can add their own \"actions\" there, and there are a few new built-in ones. You can press the middle mouse button to unbind them. Right click one of those buttons or click the ^ button to bring up a \"drawer\" with all the actions that you can drag and drop onto your actions bar. You can also click them to use them directly from there. These buttons can be used with keyboard hotkeys; to do so, you must assign keys to them from Epip's input options menu. They are labelled \"Hotbar Action #N\" there. By default, if you have 2+ rows of hotbar slots, you will also have a second row of these customizable buttons. You can disable this from the settings menu. Epip Encounters implements multiple handy new actions, in addition to some vanilla functions: Source Infuse & Meditate Toggle Minimap Resting (using a bedroll from anywhere in your party inventory - no need to find one for everyone!) Toggle Party Link (instantaneous, no animation!) Respec (if Portable Respec Mirror mod is installed) The purpose of the action bar is to provide a centralized place for modders to add shortcuts/hotkeys to their interfaces or features, eliminating the need for interactable books that clutter your inventory and freeing up space on the hotbar. Right-click a row on the hotbar to bring up a context menu where you can \"push\" groups of slots around (great for inserting spells inbetween!), clear unmemorized spells, or save \"loadouts\" to restore your hotbars in later playthroughs. Additionally, all \"engine actions\" (except for flee) are available from the vanilla actions drawer. The hotbar improvements are also available as a standalone mod with no EE dependency.","title":"Hotbar"},{"location":"#settings-menu","text":"The settings menu has been expanded to allow mods to add their own settings. Epip includes its own tab full of options to customize its features. The input menu has received similar treatment, with custom keybindings becoming possible. You must first click the \"Controls\" tab before you can access custom keybinds added by Epip. Custom hotkeys include Meditate, Source Infuse, as well as binding the 12 \"action buttons\" from the Hotbar UI. Additionally, the difficulty can now be changed to/from tactician freely at any time. The side effects of this have not been studied well, but everything appears to work fine with the exception of already-initialized enemies having missing HP and consumables(?).","title":"Settings Menu"},{"location":"#tooltip-adjustments","text":"Tooltips have received numerous fixes and improvements, displaying a lot of information in a clearer manner. You can read about them at their dedicated page .","title":"Tooltip Adjustments"},{"location":"#inventory","text":"A setting has been added to enable infinite carry weight for all party members. You can also enable automatic identifying of items, optionally not requiring any Loremaster. Consumable items, like mushrooms and food, no longer require you to use them once for them to show their effects in the tooltip.","title":"Inventory"},{"location":"#combat-log","text":"You may now filter out individual types of messages in the combat log by right-clicking it. Certain messages have been reworded for clarity and can now \"merge\" if they happen in quick succession, improving readability. You can also clear the log from the context menu.","title":"Combat Log"},{"location":"#world-tooltips","text":"A keybind has been added to make world item tooltips toggleable, so you don't need to hold alt all the time. A setting also exists to disable these tooltips for empty containers and bodies, as well as to make clicking the tooltips open containers rather than pick them up. Additional settings exist to enable these tooltips for more item types, as well as to highlight certain types of items with a customizable color.","title":"World Tooltips"},{"location":"#overhead-text-and-notifications","text":"Settings have been added to shorten the duration of overhead text, and to change their size (as well as the size of damage numbers). Notifications from characters casting skills in combat are repositioned to show above the hotbar, so as not to obscure the enemy health bars. They can also be disabled in the settings. Additionally, you can change the duration of the area transition labels, or disable them entirely.","title":"Overhead Text and Notifications"},{"location":"#skillbook","text":"You can now unlearn skills by right-clicking them in the skillbook while out of combat. Innate skills cannot be unlearnt.","title":"Skillbook"},{"location":"#crafting","text":"The crafting UI now remembers your previous tab, instead of always defaulting to showing all items - this is helpful for using the Greatforge. Additionally, you can set the default tab of the UI in the settings menu.","title":"Crafting"},{"location":"#gift-bags-and-mod-incompatibilities","text":"Gift bag mods incompatible with EE are no longer selectable, to prevent regrets. Gift bags that work but for one reason or another are undesirable show a warning upon attempting to enable them. Common mods incompatible with EE or its add-ons now show a warning when you load into the game with them enabled.","title":"Gift Bags and mod incompatibilities"},{"location":"#quick-examine","text":"A \"Quick Examine\" panel can be opened with a custom hotkey (defaults to V ). This panel is mainly used to show the effects enemies have from the \"Epic Enemies\" feature, but it also displays the character's artifacts, useful to check your ally's effects in multiplayer. More information will be added to this panel in the future.","title":"Quick Examine"},{"location":"#examine","text":"The Examine UI now shows Critical Chance, and can be configured to open on the sides of the screen instead of the center. Additionally, there is now a keybind to open the examine menu, and capitalization of the word \"Status efects\" has been made consistent with the rest of the UI.","title":"Examine"},{"location":"#ingame-patchnotes","text":"A new journal UI can be accessed from the Hotbar actions, or after updating the mod. It lists the patchnotes of Epip, and other mods can add information/patchnotes there freely as well. Updating the mod will also show a prompt to open the UI.","title":"Ingame Patchnotes"},{"location":"#chat","text":"Chat commands are added, beginning with a slash (/). The following commands exist: /rp : shows a message over your current character's head. Great for role-playing. /emote : plays an animation for your current character. Use /help emote to see all emotes. /help : shows all commands, or help for a particular command.","title":"Chat"},{"location":"#saveload-ui","text":"An alphabetical sorting option as well as a search bar can be enabled in the options for the save/load UI.","title":"Save/Load UI"},{"location":"#ascensionmeditate","text":"","title":"Ascension/Meditate"},{"location":"#ascension","text":"You can now use the Esc key to go back to the previous page in the Ascension UI, or exit it if you're on the default page. An option exists to make this key always exit the UI. An \"Immersive Meditation\" setting can be enabled to hide the minimap and hotbar while within the EE UIs.","title":"Ascension"},{"location":"#greatforge-context-menus","text":"Item context menus now have options to quickly dismantle items, as well as to remove their runes. Doing so still costs the usual amount of gold/splinters respectively. Containers with equipment in them get a \"Mass Dismantle\" option, letting you rapidly dismantle unwanted gear.","title":"Greatforge Context Menus"},{"location":"#greatforge","text":"An option to add sockets to items (\"Drill Sockets\") has been added. This does not allow you to break the 2 socket limit for one-handed weaponry. The Empower option now properly scales armor values, however this will only take effect after a save+reload. Additionally, an option to rename items (\"Engrave\") has been added. This is purely cosmetic.","title":"Greatforge"},{"location":"#epic-enemies","text":"Epic Enemies is a randomizer feature enabled from the ingame settings menu. It bestows enemies with EE perks such as keyword activators/mutators, artifacts, and more. You can configure the relative chance of each effect being rolled on enemies. These effects will be applied to enemies when they enter combat. You may use the \"Quick Examine\" feature to view the perks that each enemy rolled; see its respective section in this site for more info.","title":"Epic Enemies"},{"location":"#vanity","text":"Easy to use cosmetic customization system, including armor transmogrification, custom RGB dyes, quick outfit swapping and auras. Wanna drip as hard as this? Learn more at the dedicated feature page .","title":"Vanity"},{"location":"#miscellaneous-bug-fixes-and-adjustments","text":"Certain client-side vanilla issues have been fixed. You may read about them at their dedicated page .","title":"Miscellaneous Bug Fixes and Adjustments"},{"location":"#for-developers","text":"Epip is built using numerous libraries, making client-side scripting and UI modding easier. This site's documentation of them is heavily WIP. Every UI touched by Epip has a lua table with wrapper APIs to manipulate it. Additionally, multiple utility libraries are available: Client : contains queries relating to the client. Client.UI : holds all UI tables; too many to list individually, below are the most noteworthy ones. Client.UI.MessageBox : allows you to open your own message boxes, which may also prompt for user string input. Client.UI.ContextMenu : allows creating custom context menus, with numerous new types of elements and support for nested menus. Warning: it's a very old API and does not hold up to current standards. A rewrite is pending. Client.Flash : contains utility methods for handling Flash elements from lua. Client/Server.lua : allows registering osiris symbol listeners from the client. Osiris : provides a cleaner way of working with Osiris symbols: allows passing of extender entity objects in place of GUIDs, returning from user queries, and unpacking DB query results. Character , Item : libraries with numerous utility functions for the related entity types. Text : utility methods for working with text, featuring a super-versatile Format function for dealing with those pesky html font tags. Timer : self-explanatory. Also supports tick-based timers. Coroutine : improved coroutine table, with the ability to sleep coroutines, either for a certain amount of time or until a condition is met. Color , Vector : utilities for dealing with colors and vectors. Client.UI.Generic : allows for the creation of UIs using only lua. Work-in-progress (well, everything here is, in a way). Epip : main mod table, containing registered Features.","title":"For developers"},{"location":"#developer-features","text":"","title":"Developer Features"},{"location":"#debug-cheats","text":"If the extender developer mode is available, a cheats context menu is added to characters, with numerous handy functions like: Copying GUID to clipboard Teleporting Kill/resurrect Next-gen godmode (\"Pipmode\"), with infinite AP and 0 skill cooldowns Adding Flexstats, ExtendedStats, attributes/abilities, skills, statuses and more Spawning all artifacts, or specific treasure tables or templates","title":"Debug Cheats"},{"location":"#debug-display","text":"In developer mode, a UI widget with FPS, TPS and mod version info can be enabled from the settings. This widget can be dragged around.","title":"Debug Display"},{"location":"#debug-menu","text":"In developer mode, a menu with debugging options for Features can be opened using a keybind (defaults to LCtrl + F). You can use it to change logging levels, disable features, and run tests. Your logging/debug settings are persistent.","title":"Debug Menu"},{"location":"#ai-logging","text":"An option exists to log AI scoring to the console.","title":"AI Logging"},{"location":"#console-commands","text":"A few miscellaneous console commands are added: !bruteforceuitypes : client-side; attempts to find the TypeIDs of all UIs currently instanced, including custom ones !soundtest : client-side; plays all the sounds defined in the UI sounds lsx and shows their name. Useful for inspiration. !animtest : server-side; plays all human female animations on the currently controlled character. Cannot be interrupted once started! !worryaboutsuchsmallthings : tests the performance between EsvCharacter:HasTag() and Osi.IsTagged() !testactionhandles : tests string handles for \"actions\" from the Stats library.","title":"Console Commands"},{"location":"beta/","text":"Extender devel version required Requires extender v60. Intended version: 4732ddc239fac2feeb1a5388a81e81a1920f7b7553dff0d3ac67b7c03916a9ff To get it, use the following ScriptExtenderUpdaterConfig.json : { \"UpdateChannel\": \"Devel\", \"TargetResourceDigest\": \"4732ddc239fac2feeb1a5388a81e81a1920f7b7553dff0d3ac67b7c03916a9ff\", \"TargetVersion\": \"60.0.0.0\", \"Debug\": true } v1066 (5/08/23 upload) \u00b6 Download here . Changes & additions \u00b6 Added a setting to show surface tooltips above the hotbar UI, enabled by default When creating Hotbar Groups, the labels in the UI now use a black text color Fixes \u00b6 Vanity: fixed transmogged armors showing up after the character's corpse was destroyed, which also lead to materials persisting on them Codex: fixed skills with a name that's not a string key being filtered out (ex. skills that had their name directly set in Lua) Fixed some artifacts having the wrong keywords declared in Epip (which affected Codex filtering), and added keywords to many artifacts which previously didn't have them Marked more scripts as EE-only You should no longer see giftbag warnings if EE is not enabled Technical stuff \u00b6 Minor annotation fixes for CombatLog Fixed some TooltipAdjustments TSKs being registered on the wrong library Added more DB methods to Osiris Updated the Osiris calls used by the StatsTab feature, hopefully removing all deprecation warnings Generic \u00b6 Added more textures and button styles Texture: width and height overrides can be specified separately (ex. can pass -1, 100 as params to SetTexture() ) Fixed field visibility of Stylable._Style (now protected), added GetStyles() Added the SlicedTexture prefab, which will replace TiledBackground and Divider . Only a few textures are built-in for it right now v1066 (29/07/23 upload) \u00b6 Punisher \u00b6 Added voice acting, available for a limited time only as it hurts my throat to do such an edgy voice all the time Custom Hotkeys \u00b6 The custom hotkeys system has been reworked. They are now accessed via a tab within the Epip settings menu, rather than the game's controls menu. This will offer them more flexibility in the future. You will have to reconfigure your previous bindings. Quick Find \u00b6 Added a rarity filter Added a setting to close the UI when you click something in the world The close button now plays a sound when clicked Considerably improved performance once again Other changes and additions \u00b6 The settings menu now has some margin on the leftmost labels of settings Slight performance improvements to the Codex Small (~5%) performance improvement to all Generic UIs (most custom Epip UIs) Fixes \u00b6 Fixed Portable Respec Mirror hotbar action not working Fixed the Alternative Statuses Display showing up in the respec screen Fixed tooltips not being hidden if you exit the settings menu with escape key Fixed sliders in the settings menu not being vertically centered Fixed being able to scroll too far in Quick Find and the Codex if you go from having a lot of slots to only having a few Fixed massive FPS drops in the Epip settings menu Technical stuff \u00b6 Added hooks to the Overhead UI Fixed cases of trying to fetch vanilla TSKs during module load Added vararg to all logging methods in Library/Feature Added Feature:__Initialize() as well as a hook for before/after it; this will be the intended moment to initialize feature fields from now on (for easier patching) Added RegisterAction() to HotbarActions to make it easier to use Extracted TSKs for HotbarActions Codex: added an interface for grid-like sections, reducing code duplication Moved some Generic classes to separate files, cleaned up annotations Fix a missing nil check in PersonalScripts Deprecated the REQUIRED_MODS field in Feature Added a Hook alias for Event; the previous Hook class is now LegacyHook Consolidated previous ViewportChanged events into a single one within Client Generic: Changed layout to fitVertical Added support for capturing input events (\"Iggy Events\") A more sophisticated system for creating navigation will be added in the future Added FormTextHolder prefab (for input settings menu) Added more width/height-related calls SetPositionRelativeToParent() now considers size overrides Fixed destroying children within containers for all remaining container types Previously only Grid had this consideration, where in practice it was the only place it mattered, as it set the visibility of elements it positioned - which it no longer does either Improved Text:GetTextSize() accuracy yet again - all cases of short text being cropped horizontally should now be solved Fixed annotations for exposed Element methods Marked listeners as private methods Removed obsolete events Containers now use GetWidth() / GetHeight() to fetch element sizes, meaning they not only respect size overrides (which they already did) but also overrides of the function itself Containers now override this to return the width/height of the visible content itself, rather than using the calculated flash values. This fixes the case of scrollbars being oversized v1066 (16/07/23 upload) \u00b6 This patch adds an Artifacts tab to the Codex. Artifacts that you own (either equipped or in the party inventory, as item or rune) are highlighted. You may filter artifacts by their slot, associated keywords, as well as tier, if you're using Derpy's Artifact Tiers. Other changes and additions \u00b6 Added Simplified Chinese localization by Ainsky There are certain issues with this translation, however we have not been able to contact the author yet. Please join the #epipeline channel on the EE discord if you authored this translation. Enabled mouse controls when using controller This enables you to use UIs that support mouse, such as custom Epip UIs, as well as some reused Larian KB+M UIs such as the player portraits This prevents the mouse from being hidden while idle when using controller (might become a setting later) Custom tooltips from Epip UIs now work while using controller BH Overheads now show for characters near the camera point, rather than near your selected character Significantly reduced stutter from BH Overheads Significantly reduced stutter for Epip UIs that use inventory-like slots The time to open Quick Find for the first time should be reduced by 30-35% The Skills Codex should see similar improvement Source Infuse and Meditate keybinds are now only shown if EE is enabled Fixes \u00b6 Fixed the tooltips for various world tooltip options misnaming the \"Enable tooltips for all items\" option Hotbar: fixed chain/unchain actions not working (beta issue) Fixed source infuse / meditate keybinds not working (beta issue) Examine Menu: fixed critical chance appearing in the wrong place for characters with many resistances Quick Examine: fixed resistances text getting cropped out if a character had too many of them Fixed the click sound for close buttons not playing in some custom UIs Fixed BH Overheads appearing over invisible enemies Fixed some sliders in the settings menu having their values cropped out until interacted with Fixed positioning of the \"Alternative Status Display\" when using controller Technical stuff \u00b6 ArtifactLib: added IsOwnedByParty() , HasKeyword() , and missing VolatileArmor keyword tags to artifacts Added Profiling library as well as Feature integration. No GUI exists for this yet, results can only be viewed through the console command Added EnabledFunctor property to event options, letting listeners only fire conditionally Feature has a method that returns such a functor which checks for :IsEnabled() Added ObjectPool data structure Fixed Text.Round() for negative values Added Meditate library (currently barebones, will aid in controller support later) Added SourceInfusion.RequestInfuse() Various annotation fixes, and purging of trailing whitespace Improved Character.GetStatusesFromItems() , now works with many more status sources (hopefully all) Fixed Combat.GetCombatID() on server Removed the extender IDE files from the project to fix issues with doc generation. In the future, Epip will get its own annotation generator to fix the many issues with the current one Improvements to the localization sheet (will be deployed the next time the sheet is updated): Outdated translations will have their cell marked in red background color Rows will be sorted by script and original text (alphabetically) Generic \u00b6 Added custom tooltip support to elements, and fixed not being to replace an existing tooltip Added Element:GetParent() and Element:GetChildren() Added an experimental VerticalList prefab that reimplements the basic VerticalList element functionality. Unfortunately the performance of this is at best tied with the element, but it can serve as an example of how to implement custom containers, should you need for example unusual element positioning. Manual Destroy() now makes table references unusable Fixed Destroy() not working properly for elements within VerticalList . The other containers will be fixed later. Fixed Text:GetTextSize() ; the flash textHeight property was highly inaccurate; it seemingly considered the height as if the text had one more line than it actually did Added Text:GetLineHeight() Added more textures and icons - make sure to redownload the assets folder if you're using the unpacked mod The Slot element now has certain features such as cooldown animations disabled until they are needed. This signficantly improves performance when creating many slots HotbarSlot prefab has been adjusted to support this v1066 (1/07/23 upload) \u00b6 This update adds the Codex UI, which will be an in-game knowledgebase for various topics. Currently it only features a Skills page that displays all player skills in the game, and allows for filtering and searching them. The default keybind for opening the Codex is LCtrl + G . This page also serves as an alternative to the skillbook; you can drag skills out of it to memorize them and assign them to your hotbar. In the future, you'll also be able to unmemorize and learn skills directly from it, if you have the skillbook. Quick Inventory \u00b6 Added wand, bow and crossbow filters, which were missing by oversight Added sorting for consumables; order is: Scrolls Grenades Arrows Potions Food Drinks Fixed searching for resistances not working properly Other Changes \u00b6 You can now change the layer of a hotbar group through their context menu Added a close button to the hotbar group creation/resize UIs Runes no longer show the confusing \"Set :\" prefix This was previously only done for equipment A setting to disable this tweak has also been added Fixes \u00b6 Fixed TSKs from the gameplay mod still being in Epip; you will need to redownload the gameplay mod if you use it Slots within Epip UIs now only play a dragging sound if the slot is not empty Fixed some tooltip adjustments not working on tooltips created within Epip UIs Fixed Ambidextrous checks (again) which might've lead to incorrect hotbar behaviour with potions and scrolls Fixed the Debug Cheats menu showing the wrong talents for characters that weren't the active client character Fixed performance issues from the stats tab when picking up items Technical Stuff \u00b6 Added a way to load lua scripts from a file defined in Osiris Data/Epip/PersonalScripts.json ; this can be used to load test/debug scripts without needing to include them within the mod. See the PersonalScripts feature. Removed various console commands as they are of no use other than personal Added Texture library, and support for its data structures for Generic Various annotation fixes and clean ups Added more methods to CombatLib and fixed GetTurnOrder() Moved Epip's Hotbar actions to a new feature Added GetClassDefinition() to OOP classes Choice settings's SetValue() now has validation Fixed registering TSKs with a StringKey Library:RegisterTranslatedString() now returns the TSK Fixed OOP.IsClass() throwing if the object was not a class Added the Elementable interface, which lets prefabs behave as if they were elements (\"inheriting\" Element's methods) Stats.Get() now allows type-capture Added UI:ToggleVisibility() Added some basic InputLib integration to Feature Added the SettingsWidgets feature, for rendering settings into Generic UIs as form elements Added the SkillbookTemplates feature, which lets you query item templates that have a SkillBook use action Fixed an error when hovering over a Status prefab whose status had expired Generic \u00b6 Added the Stylable interface, for defining styles for customizing prefab appearances Added the Button prefab, which will replace the Button and StateButton elements. Its major advantage is support for styling, as well as the extendability and maintainability that comes from it being implemented in lua rather than flash. Various fixes to the Texture element Added GetRawSize() to some elements Fixed return values when calling exposed flash functions from lua Reworked CloseButton prefab to use the Button prefab Added focus-related events to Text element Added lots of UI textures and icons for use with Generic; see the GenericUITextures feature Added the SearchBar prefab v1066 (18/06/23 upload) \u00b6 This version adds an option to replace the status bar by your character's portraits with a new custom UI - see \"Alternative status display\" in Player Portrait settings. This by default behaves mostly the same as the regular status bar, with the major exception being no animations for statuses being removed - they might be added if there is demand. The major advantage of this new UI is status sorting, which was thought to be too difficulty to implement in Larian's UI. Right-click a status to set its sorting priority. Statuses with a high priority show up in the leftmost position, while statuses with a low priority show up in the rightmost position. Statuses that are tied in priority show in order of application. You may use this to position important or informational statuses (ex. Source Generation duration or tiered statuses) in a consistent position. You may also filter out statuses in this context menu to hide them. Holding shift will temporarily disable this filter, letting you quickly check your hidden statuses and unhide them if necessary. You may also manage this filter within the settings menu. Other changes and additions \u00b6 Added a new hotkey that will show BH over the heads of nearby characters while held (\"Show B/H\" binding; unbound by default): Added an option to display common flags in the enemy health bar (\"Display common flags\" setting). It will display the following information (if applicable) while holding shift: Whether Comeback Kid is available Whether Attack of Opportunity is available Whether the character is flagged as incapable of joining combat The character's AI archetype (ranger, rogue, etc.) These flags are not shown if the character doesn't have them Holding shift while looking at equipment tooltips will now display information about their EE gear modifiers, such as their tier. This display will be improved in the future to be more user-friendly. Quick Find has received various improvements: Added a filter for Culled items Added a filter to hide equipped items The UI is now draggable (from the top area) The UI is now closed automatically when you drag an item into the Greatforge socket (which you can now do thanks to an extender fix) You can now manually set an icon for an item with Vanity Transmog using the new \"Set Icon\" button. The \"Keep Icon\" toggle remains and works alongside it. This uses a new \"Icon Picker\" UI. Other small changes \u00b6 Server-side animation cancelling now has special logic to handle some previously problematic skills Projectile, Jump, MultiStrike, ProjectileStrike and Target skills now have special logic to handle cases like multi-projectile/hit skills \"+X% Weapon Elemental Damage\" tooltip now works for any deltamod that adds damage, not just ones from EE Hotbar groups can now be resized through their context menu - you can thank Cathe for that Changed hotbar slot requirement evaluation to use a new extender call, which should also make it compatible with mods using custom requirements Added a Gloves filter to Quick Find, which was previously missing (thanks Cathe) Reordered slot filters in Quick Find; armor goes first, then weapons/shield, then jewelry (thanks Cathe) Fixed a vanilla bug where undead characters would not see any armor restoration numbers over their head Added the !rainbowoverlays console command Cleaned up some scripting for the default crafting filter; as a sideeffect you will have to reconfigure the setting Fixes: Fixed a regression that caused EE to add permanent stats when using their dyes You can use the !fixdyestats console command to remove these extra stats from your current active character; you'll need to run it once for each dye you applied Reminder that Epip has a far more customizable dyes feature in the Vanity UI Fixed EE dyes being usable from Vanity even if the party didn't have them Fixed hotbar group slots having wrong element layering and all blinking while using any skill Fixed some hotbar inaccuracies when using Ambidextrous Fixed node stats in the stats tab not disappearing after being removed. This fix is retroactive. Fixed Inconspicuous being hidden while not using Derpy's Tweaks Fixed \"Show loot drops in healthbar\" feature possibly not working correctly with Derpy's changes Fixed a hotbar error if you unbound the vanilla hotkeys for vanilla actions (inventory, journal, map, etc.) Fixed an error when dealing damage through moving items On the technical side: Added OverlayColorsBruteForcer feature, which as the name suggests helps with figuring out the usages of the 50 overlay colors in GlobalSwitches ColorLib now contains an enum of most overlay colors used by the game Fixed Character.GetSkillState() on server Added Damage library, currently only containing TSKs for damage types - will be used for hit/heal-related business later on Craft UI table now has the TSKs for item filters Ambidextrous check in Item.CanUse() should be more accurate now Added Tick event to GameStateLib Added BatteredHarried.IsDisplayStatus() , Stats.GetStatusName() , Color.Lerp() , DeltaMods.GetItemDeltaMods() and an item-only overload to Item.IsEquipped() Added SPIRIT_VISION icon to StatsLib SourceInfusionLib now holds Source Generation status IDs Fixed Stats.GetStatusIcon() for CONSUME statuses It's possible to now register TSKs post-init in features/libraries via :RegisterTranslatedString() Various annotation fixes, mostly to Stat entries Simplified Client.IsInDialogue() implementation UserVarsLib now supports default values for user and mod variables Item.GetPartyTemplateCount() now strips GUID prefixes Generic: Added CloseButton and DraggingArea prefabs IggyIcon:SetIcon() call is NOOP'd if there is no change in the icon setup (texture, width and height), which possibly increases performance in icon-heavy UIs Fixed Instance:Destroy() Status prefab now looks a lot closer to the statuses in Larian UIs IggyIcon:SetAlpha() now supports affectChildren parameter","title":"Beta Versions"},{"location":"beta/#v1066-50823-upload","text":"Download here .","title":"v1066 (5/08/23 upload)"},{"location":"beta/#changes-additions","text":"Added a setting to show surface tooltips above the hotbar UI, enabled by default When creating Hotbar Groups, the labels in the UI now use a black text color","title":"Changes &amp; additions"},{"location":"beta/#fixes","text":"Vanity: fixed transmogged armors showing up after the character's corpse was destroyed, which also lead to materials persisting on them Codex: fixed skills with a name that's not a string key being filtered out (ex. skills that had their name directly set in Lua) Fixed some artifacts having the wrong keywords declared in Epip (which affected Codex filtering), and added keywords to many artifacts which previously didn't have them Marked more scripts as EE-only You should no longer see giftbag warnings if EE is not enabled","title":"Fixes"},{"location":"beta/#technical-stuff","text":"Minor annotation fixes for CombatLog Fixed some TooltipAdjustments TSKs being registered on the wrong library Added more DB methods to Osiris Updated the Osiris calls used by the StatsTab feature, hopefully removing all deprecation warnings","title":"Technical stuff"},{"location":"beta/#generic","text":"Added more textures and button styles Texture: width and height overrides can be specified separately (ex. can pass -1, 100 as params to SetTexture() ) Fixed field visibility of Stylable._Style (now protected), added GetStyles() Added the SlicedTexture prefab, which will replace TiledBackground and Divider . Only a few textures are built-in for it right now","title":"Generic"},{"location":"beta/#v1066-290723-upload","text":"","title":"v1066 (29/07/23 upload)"},{"location":"beta/#punisher","text":"Added voice acting, available for a limited time only as it hurts my throat to do such an edgy voice all the time","title":"Punisher"},{"location":"beta/#custom-hotkeys","text":"The custom hotkeys system has been reworked. They are now accessed via a tab within the Epip settings menu, rather than the game's controls menu. This will offer them more flexibility in the future. You will have to reconfigure your previous bindings.","title":"Custom Hotkeys"},{"location":"beta/#quick-find","text":"Added a rarity filter Added a setting to close the UI when you click something in the world The close button now plays a sound when clicked Considerably improved performance once again","title":"Quick Find"},{"location":"beta/#other-changes-and-additions","text":"The settings menu now has some margin on the leftmost labels of settings Slight performance improvements to the Codex Small (~5%) performance improvement to all Generic UIs (most custom Epip UIs)","title":"Other changes and additions"},{"location":"beta/#fixes_1","text":"Fixed Portable Respec Mirror hotbar action not working Fixed the Alternative Statuses Display showing up in the respec screen Fixed tooltips not being hidden if you exit the settings menu with escape key Fixed sliders in the settings menu not being vertically centered Fixed being able to scroll too far in Quick Find and the Codex if you go from having a lot of slots to only having a few Fixed massive FPS drops in the Epip settings menu","title":"Fixes"},{"location":"beta/#technical-stuff_1","text":"Added hooks to the Overhead UI Fixed cases of trying to fetch vanilla TSKs during module load Added vararg to all logging methods in Library/Feature Added Feature:__Initialize() as well as a hook for before/after it; this will be the intended moment to initialize feature fields from now on (for easier patching) Added RegisterAction() to HotbarActions to make it easier to use Extracted TSKs for HotbarActions Codex: added an interface for grid-like sections, reducing code duplication Moved some Generic classes to separate files, cleaned up annotations Fix a missing nil check in PersonalScripts Deprecated the REQUIRED_MODS field in Feature Added a Hook alias for Event; the previous Hook class is now LegacyHook Consolidated previous ViewportChanged events into a single one within Client Generic: Changed layout to fitVertical Added support for capturing input events (\"Iggy Events\") A more sophisticated system for creating navigation will be added in the future Added FormTextHolder prefab (for input settings menu) Added more width/height-related calls SetPositionRelativeToParent() now considers size overrides Fixed destroying children within containers for all remaining container types Previously only Grid had this consideration, where in practice it was the only place it mattered, as it set the visibility of elements it positioned - which it no longer does either Improved Text:GetTextSize() accuracy yet again - all cases of short text being cropped horizontally should now be solved Fixed annotations for exposed Element methods Marked listeners as private methods Removed obsolete events Containers now use GetWidth() / GetHeight() to fetch element sizes, meaning they not only respect size overrides (which they already did) but also overrides of the function itself Containers now override this to return the width/height of the visible content itself, rather than using the calculated flash values. This fixes the case of scrollbars being oversized","title":"Technical stuff"},{"location":"beta/#v1066-160723-upload","text":"This patch adds an Artifacts tab to the Codex. Artifacts that you own (either equipped or in the party inventory, as item or rune) are highlighted. You may filter artifacts by their slot, associated keywords, as well as tier, if you're using Derpy's Artifact Tiers.","title":"v1066 (16/07/23 upload)"},{"location":"beta/#other-changes-and-additions_1","text":"Added Simplified Chinese localization by Ainsky There are certain issues with this translation, however we have not been able to contact the author yet. Please join the #epipeline channel on the EE discord if you authored this translation. Enabled mouse controls when using controller This enables you to use UIs that support mouse, such as custom Epip UIs, as well as some reused Larian KB+M UIs such as the player portraits This prevents the mouse from being hidden while idle when using controller (might become a setting later) Custom tooltips from Epip UIs now work while using controller BH Overheads now show for characters near the camera point, rather than near your selected character Significantly reduced stutter from BH Overheads Significantly reduced stutter for Epip UIs that use inventory-like slots The time to open Quick Find for the first time should be reduced by 30-35% The Skills Codex should see similar improvement Source Infuse and Meditate keybinds are now only shown if EE is enabled","title":"Other changes and additions"},{"location":"beta/#fixes_2","text":"Fixed the tooltips for various world tooltip options misnaming the \"Enable tooltips for all items\" option Hotbar: fixed chain/unchain actions not working (beta issue) Fixed source infuse / meditate keybinds not working (beta issue) Examine Menu: fixed critical chance appearing in the wrong place for characters with many resistances Quick Examine: fixed resistances text getting cropped out if a character had too many of them Fixed the click sound for close buttons not playing in some custom UIs Fixed BH Overheads appearing over invisible enemies Fixed some sliders in the settings menu having their values cropped out until interacted with Fixed positioning of the \"Alternative Status Display\" when using controller","title":"Fixes"},{"location":"beta/#technical-stuff_2","text":"ArtifactLib: added IsOwnedByParty() , HasKeyword() , and missing VolatileArmor keyword tags to artifacts Added Profiling library as well as Feature integration. No GUI exists for this yet, results can only be viewed through the console command Added EnabledFunctor property to event options, letting listeners only fire conditionally Feature has a method that returns such a functor which checks for :IsEnabled() Added ObjectPool data structure Fixed Text.Round() for negative values Added Meditate library (currently barebones, will aid in controller support later) Added SourceInfusion.RequestInfuse() Various annotation fixes, and purging of trailing whitespace Improved Character.GetStatusesFromItems() , now works with many more status sources (hopefully all) Fixed Combat.GetCombatID() on server Removed the extender IDE files from the project to fix issues with doc generation. In the future, Epip will get its own annotation generator to fix the many issues with the current one Improvements to the localization sheet (will be deployed the next time the sheet is updated): Outdated translations will have their cell marked in red background color Rows will be sorted by script and original text (alphabetically)","title":"Technical stuff"},{"location":"beta/#generic_1","text":"Added custom tooltip support to elements, and fixed not being to replace an existing tooltip Added Element:GetParent() and Element:GetChildren() Added an experimental VerticalList prefab that reimplements the basic VerticalList element functionality. Unfortunately the performance of this is at best tied with the element, but it can serve as an example of how to implement custom containers, should you need for example unusual element positioning. Manual Destroy() now makes table references unusable Fixed Destroy() not working properly for elements within VerticalList . The other containers will be fixed later. Fixed Text:GetTextSize() ; the flash textHeight property was highly inaccurate; it seemingly considered the height as if the text had one more line than it actually did Added Text:GetLineHeight() Added more textures and icons - make sure to redownload the assets folder if you're using the unpacked mod The Slot element now has certain features such as cooldown animations disabled until they are needed. This signficantly improves performance when creating many slots HotbarSlot prefab has been adjusted to support this","title":"Generic"},{"location":"beta/#v1066-10723-upload","text":"This update adds the Codex UI, which will be an in-game knowledgebase for various topics. Currently it only features a Skills page that displays all player skills in the game, and allows for filtering and searching them. The default keybind for opening the Codex is LCtrl + G . This page also serves as an alternative to the skillbook; you can drag skills out of it to memorize them and assign them to your hotbar. In the future, you'll also be able to unmemorize and learn skills directly from it, if you have the skillbook.","title":"v1066 (1/07/23 upload)"},{"location":"beta/#quick-inventory","text":"Added wand, bow and crossbow filters, which were missing by oversight Added sorting for consumables; order is: Scrolls Grenades Arrows Potions Food Drinks Fixed searching for resistances not working properly","title":"Quick Inventory"},{"location":"beta/#other-changes","text":"You can now change the layer of a hotbar group through their context menu Added a close button to the hotbar group creation/resize UIs Runes no longer show the confusing \"Set :\" prefix This was previously only done for equipment A setting to disable this tweak has also been added","title":"Other Changes"},{"location":"beta/#fixes_3","text":"Fixed TSKs from the gameplay mod still being in Epip; you will need to redownload the gameplay mod if you use it Slots within Epip UIs now only play a dragging sound if the slot is not empty Fixed some tooltip adjustments not working on tooltips created within Epip UIs Fixed Ambidextrous checks (again) which might've lead to incorrect hotbar behaviour with potions and scrolls Fixed the Debug Cheats menu showing the wrong talents for characters that weren't the active client character Fixed performance issues from the stats tab when picking up items","title":"Fixes"},{"location":"beta/#technical-stuff_3","text":"Added a way to load lua scripts from a file defined in Osiris Data/Epip/PersonalScripts.json ; this can be used to load test/debug scripts without needing to include them within the mod. See the PersonalScripts feature. Removed various console commands as they are of no use other than personal Added Texture library, and support for its data structures for Generic Various annotation fixes and clean ups Added more methods to CombatLib and fixed GetTurnOrder() Moved Epip's Hotbar actions to a new feature Added GetClassDefinition() to OOP classes Choice settings's SetValue() now has validation Fixed registering TSKs with a StringKey Library:RegisterTranslatedString() now returns the TSK Fixed OOP.IsClass() throwing if the object was not a class Added the Elementable interface, which lets prefabs behave as if they were elements (\"inheriting\" Element's methods) Stats.Get() now allows type-capture Added UI:ToggleVisibility() Added some basic InputLib integration to Feature Added the SettingsWidgets feature, for rendering settings into Generic UIs as form elements Added the SkillbookTemplates feature, which lets you query item templates that have a SkillBook use action Fixed an error when hovering over a Status prefab whose status had expired","title":"Technical Stuff"},{"location":"beta/#generic_2","text":"Added the Stylable interface, for defining styles for customizing prefab appearances Added the Button prefab, which will replace the Button and StateButton elements. Its major advantage is support for styling, as well as the extendability and maintainability that comes from it being implemented in lua rather than flash. Various fixes to the Texture element Added GetRawSize() to some elements Fixed return values when calling exposed flash functions from lua Reworked CloseButton prefab to use the Button prefab Added focus-related events to Text element Added lots of UI textures and icons for use with Generic; see the GenericUITextures feature Added the SearchBar prefab","title":"Generic"},{"location":"beta/#v1066-180623-upload","text":"This version adds an option to replace the status bar by your character's portraits with a new custom UI - see \"Alternative status display\" in Player Portrait settings. This by default behaves mostly the same as the regular status bar, with the major exception being no animations for statuses being removed - they might be added if there is demand. The major advantage of this new UI is status sorting, which was thought to be too difficulty to implement in Larian's UI. Right-click a status to set its sorting priority. Statuses with a high priority show up in the leftmost position, while statuses with a low priority show up in the rightmost position. Statuses that are tied in priority show in order of application. You may use this to position important or informational statuses (ex. Source Generation duration or tiered statuses) in a consistent position. You may also filter out statuses in this context menu to hide them. Holding shift will temporarily disable this filter, letting you quickly check your hidden statuses and unhide them if necessary. You may also manage this filter within the settings menu.","title":"v1066 (18/06/23 upload)"},{"location":"beta/#other-changes-and-additions_2","text":"Added a new hotkey that will show BH over the heads of nearby characters while held (\"Show B/H\" binding; unbound by default): Added an option to display common flags in the enemy health bar (\"Display common flags\" setting). It will display the following information (if applicable) while holding shift: Whether Comeback Kid is available Whether Attack of Opportunity is available Whether the character is flagged as incapable of joining combat The character's AI archetype (ranger, rogue, etc.) These flags are not shown if the character doesn't have them Holding shift while looking at equipment tooltips will now display information about their EE gear modifiers, such as their tier. This display will be improved in the future to be more user-friendly. Quick Find has received various improvements: Added a filter for Culled items Added a filter to hide equipped items The UI is now draggable (from the top area) The UI is now closed automatically when you drag an item into the Greatforge socket (which you can now do thanks to an extender fix) You can now manually set an icon for an item with Vanity Transmog using the new \"Set Icon\" button. The \"Keep Icon\" toggle remains and works alongside it. This uses a new \"Icon Picker\" UI.","title":"Other changes and additions"},{"location":"beta/#other-small-changes","text":"Server-side animation cancelling now has special logic to handle some previously problematic skills Projectile, Jump, MultiStrike, ProjectileStrike and Target skills now have special logic to handle cases like multi-projectile/hit skills \"+X% Weapon Elemental Damage\" tooltip now works for any deltamod that adds damage, not just ones from EE Hotbar groups can now be resized through their context menu - you can thank Cathe for that Changed hotbar slot requirement evaluation to use a new extender call, which should also make it compatible with mods using custom requirements Added a Gloves filter to Quick Find, which was previously missing (thanks Cathe) Reordered slot filters in Quick Find; armor goes first, then weapons/shield, then jewelry (thanks Cathe) Fixed a vanilla bug where undead characters would not see any armor restoration numbers over their head Added the !rainbowoverlays console command Cleaned up some scripting for the default crafting filter; as a sideeffect you will have to reconfigure the setting Fixes: Fixed a regression that caused EE to add permanent stats when using their dyes You can use the !fixdyestats console command to remove these extra stats from your current active character; you'll need to run it once for each dye you applied Reminder that Epip has a far more customizable dyes feature in the Vanity UI Fixed EE dyes being usable from Vanity even if the party didn't have them Fixed hotbar group slots having wrong element layering and all blinking while using any skill Fixed some hotbar inaccuracies when using Ambidextrous Fixed node stats in the stats tab not disappearing after being removed. This fix is retroactive. Fixed Inconspicuous being hidden while not using Derpy's Tweaks Fixed \"Show loot drops in healthbar\" feature possibly not working correctly with Derpy's changes Fixed a hotbar error if you unbound the vanilla hotkeys for vanilla actions (inventory, journal, map, etc.) Fixed an error when dealing damage through moving items On the technical side: Added OverlayColorsBruteForcer feature, which as the name suggests helps with figuring out the usages of the 50 overlay colors in GlobalSwitches ColorLib now contains an enum of most overlay colors used by the game Fixed Character.GetSkillState() on server Added Damage library, currently only containing TSKs for damage types - will be used for hit/heal-related business later on Craft UI table now has the TSKs for item filters Ambidextrous check in Item.CanUse() should be more accurate now Added Tick event to GameStateLib Added BatteredHarried.IsDisplayStatus() , Stats.GetStatusName() , Color.Lerp() , DeltaMods.GetItemDeltaMods() and an item-only overload to Item.IsEquipped() Added SPIRIT_VISION icon to StatsLib SourceInfusionLib now holds Source Generation status IDs Fixed Stats.GetStatusIcon() for CONSUME statuses It's possible to now register TSKs post-init in features/libraries via :RegisterTranslatedString() Various annotation fixes, mostly to Stat entries Simplified Client.IsInDialogue() implementation UserVarsLib now supports default values for user and mod variables Item.GetPartyTemplateCount() now strips GUID prefixes Generic: Added CloseButton and DraggingArea prefabs IggyIcon:SetIcon() call is NOOP'd if there is no change in the icon setup (texture, width and height), which possibly increases performance in icon-heavy UIs Fixed Instance:Destroy() Status prefab now looks a lot closer to the statuses in Larian UIs IggyIcon:SetAlpha() now supports affectChildren parameter","title":"Other small changes"},{"location":"docs/","text":"Documentation \u00b6 The features of Epip Encounters are built on top of a lot of trial-and-error research and work on client-side scripting and UI modding. Since late 2021, the focus of development has shifted to making the internals of the mod available as libraries, aiming to provide utility, better maintainability, extendability and easy manipulation of UIs from lua. The ultimate goal is to make the mod easy for someone else to continue working on after/if I depart - EE is an overhaul built to last and be tinkered with, and I would like to honor that in my own project. This change will be a long process. There are still many features of the mod that remain to be rewritten to the new standards and methodology, or extended to provide functionality beyond what the current mod needs. Anything that is documented here is considered stable and unlikely to change drastically - any changes to these calls/systems will be mentioned in future patch notes. The definitions here are auto-generated from EmmyLua annotations within the scripts (using update_docs.py found in the mod). Functions are tagged through @meta to denote tags like \"Client-only\", \"EE-only\". Declaring these at the top of the file tags all functions in the file. Introduction \u00b6 The mod's root table contains the following tables: Epip : stores references to \"Features\" and metadata related to the mod. Game : contains libraries for querying information of characters, items and other contexts relating to the game. Client : contains client-specific calls as well as tables offering UI-specific calls, events and hooks. Utilities : contains utility methods useful across many contexts. The scripting in Epip Encounters focuses on event-driven programming. Aside from functions, systems and features tend to implement events and hooks which allow other scripts to react to them being raised. Event listeners allow you to react to events sent from scripts. They can receive parameters and are executed in the order that they were registered. -- Listen for the shift key being pressed/unpressed. Client.Input:RegisterListener(\"SneakConesToggled\", function(pressed) print(\"Sneak cones toggled: \" .. pressed) end) Hooks are similar to event listeners, but are used to modify values calculated within functions. Their purpose is to allow scripts to alter the logic or output of functions. A hook is always passed a \"default value\" as its first parameter, which will be used if no listeners choose to act upon the event. Any script can implement events/hooks, and it's easy to add \"parameters\" to registering listeners as well, to filter their execution conditonally. -- Set opacity for Battered/Harried stack backgrounds in the health bar based on if the amount if enough to inflict a T3. Client.UI.EnemyHealthBar:RegisterHook(\"GetStackOpacity\", function(opacity, stack, amount) local threshold = Game.Character.GetStacksNeededToInflictTier3(Client.GetCharacter()) if amount >= threshold then opacity = 1 elseif amount == 0 then opacity = 0.5 else opacity = 0.75 end return opacity end) Hooks are not limited to changing primitives, they are often also used in UI scripts to allow for manipulation of the data that the engine is passing it, parsed into handy tables. The following example adds Critical Chance to the Examine UI. -- Add Critical Chance to the examine menu when its data is being updated. Client.UI.Examine:RegisterHook(\"Update\", function(examineData) local char = Client.UI.Examine.GetCharacter() -- Only do this for characters being examined if char then local critEntry = { id = 9, label = \"Critical Chance\", iconID = Client.UI.Examine.ICONS.CRITICAL_CHANCE, value = string.format(\"%d%%\", char.Stats.CriticalChance), type = Client.UI.Examine.ENTRY_TYPES.STAT, } -- Insert crit chance after damage local damageElement,damageIndex,damageCategory = examineData:GetElement(4, 6) examineData:InsertElement(damageCategory.id, critEntry, damageIndex + 1) end return examineData end) Aliases \u00b6 The following EmmyLua aliases are defined (in EpipIdeHelpers.lua ): ---@alias Entity EclCharacter | EsvCharacter | EclItem | EsvItem ---@alias Character EsvCharacter | EclCharacter ---@alias Item EclItem | EsvItem ---@alias EquipSlot \"Helmet\" | \"Breast\" | \"Leggings\" | \"Weapon\" | \"Shield\" | \"Ring\" | \"Belt\" | \"Boots\" | \"Gloves\" | \"Amulet\" | \"Ring\" | \"Ring2\" | \"Horns\" | \"Overhead\" ---@alias EquipmentSubType \"Platemail\" | \"Robes\" | \"Leather\" | \"Belt\" | \"Ring\" | \"Amulet\" | \"Shield\" | \"Dagger\" | \"Sword\" | \"Axe\" | \"Mace\" | \"Sword\" | \"Spear\" | \"Staff\" | \"Bow\" | \"Crossbow\" | \"Wand\" ---@alias StackType \"Battered\" | \"B\" | \"Harried\" | \"H\" ---@alias Gender \"Male\" | \"Female\" ---@alias Race \"Human\" | \"Elf\" | \"Dwarf\" | \"Lizard\" ---@alias Keyword \"ViolentStrike\" | \"VitalityVoid\" | \"Predator\" | \"Elementalist\" | \"Prosperity\" | \"Paucity\" | \"IncarnateChampion\" | \"Defiance\" | \"Occultist\" | \"Disintegrate\" | \"Wither\" | \"Centurion\" | \"Abeyance\" | \"Benevolence\" | \"Presence\" | \"Ward\" | \"Celestial\" | \"Purity\" | \"VolatileArmor\" | \"Voracity\" ---@alias KeywordBoonType \"Activator\" | \"Mutator\" -- For doc generation; does not actually work in IDE ---@class Event ---@class Hook --------------------------------------------- -- UI --------------------------------------------- ---@alias MessageBoxType \"Message\" | \"Input\" --------------------------------------------- -- GAME.TOOLTIP --------------------------------------------- ---@class TooltipData ---@field Data table[] ---@param data table[] ---@return TooltipData function TooltipData:Create(data) end ---@param type string ---@return table function TooltipData:GetElement(type) end ---@param type string ---@return table[] function TooltipData:GetElements(type) end ---@param type string function TooltipData:RemoveElements(type) end ---@param type string function TooltipData:RemoveElement(type) end ---@param ele table function TooltipData:AppendElement(ele) end ---@param ele table ---@param appendAfter table function TooltipData:AppendElementAfter(ele, appendAfter) end","title":"Introduction"},{"location":"docs/#documentation","text":"The features of Epip Encounters are built on top of a lot of trial-and-error research and work on client-side scripting and UI modding. Since late 2021, the focus of development has shifted to making the internals of the mod available as libraries, aiming to provide utility, better maintainability, extendability and easy manipulation of UIs from lua. The ultimate goal is to make the mod easy for someone else to continue working on after/if I depart - EE is an overhaul built to last and be tinkered with, and I would like to honor that in my own project. This change will be a long process. There are still many features of the mod that remain to be rewritten to the new standards and methodology, or extended to provide functionality beyond what the current mod needs. Anything that is documented here is considered stable and unlikely to change drastically - any changes to these calls/systems will be mentioned in future patch notes. The definitions here are auto-generated from EmmyLua annotations within the scripts (using update_docs.py found in the mod). Functions are tagged through @meta to denote tags like \"Client-only\", \"EE-only\". Declaring these at the top of the file tags all functions in the file.","title":"Documentation"},{"location":"docs/#introduction","text":"The mod's root table contains the following tables: Epip : stores references to \"Features\" and metadata related to the mod. Game : contains libraries for querying information of characters, items and other contexts relating to the game. Client : contains client-specific calls as well as tables offering UI-specific calls, events and hooks. Utilities : contains utility methods useful across many contexts. The scripting in Epip Encounters focuses on event-driven programming. Aside from functions, systems and features tend to implement events and hooks which allow other scripts to react to them being raised. Event listeners allow you to react to events sent from scripts. They can receive parameters and are executed in the order that they were registered. -- Listen for the shift key being pressed/unpressed. Client.Input:RegisterListener(\"SneakConesToggled\", function(pressed) print(\"Sneak cones toggled: \" .. pressed) end) Hooks are similar to event listeners, but are used to modify values calculated within functions. Their purpose is to allow scripts to alter the logic or output of functions. A hook is always passed a \"default value\" as its first parameter, which will be used if no listeners choose to act upon the event. Any script can implement events/hooks, and it's easy to add \"parameters\" to registering listeners as well, to filter their execution conditonally. -- Set opacity for Battered/Harried stack backgrounds in the health bar based on if the amount if enough to inflict a T3. Client.UI.EnemyHealthBar:RegisterHook(\"GetStackOpacity\", function(opacity, stack, amount) local threshold = Game.Character.GetStacksNeededToInflictTier3(Client.GetCharacter()) if amount >= threshold then opacity = 1 elseif amount == 0 then opacity = 0.5 else opacity = 0.75 end return opacity end) Hooks are not limited to changing primitives, they are often also used in UI scripts to allow for manipulation of the data that the engine is passing it, parsed into handy tables. The following example adds Critical Chance to the Examine UI. -- Add Critical Chance to the examine menu when its data is being updated. Client.UI.Examine:RegisterHook(\"Update\", function(examineData) local char = Client.UI.Examine.GetCharacter() -- Only do this for characters being examined if char then local critEntry = { id = 9, label = \"Critical Chance\", iconID = Client.UI.Examine.ICONS.CRITICAL_CHANCE, value = string.format(\"%d%%\", char.Stats.CriticalChance), type = Client.UI.Examine.ENTRY_TYPES.STAT, } -- Insert crit chance after damage local damageElement,damageIndex,damageCategory = examineData:GetElement(4, 6) examineData:InsertElement(damageCategory.id, critEntry, damageIndex + 1) end return examineData end)","title":"Introduction"},{"location":"docs/#aliases","text":"The following EmmyLua aliases are defined (in EpipIdeHelpers.lua ): ---@alias Entity EclCharacter | EsvCharacter | EclItem | EsvItem ---@alias Character EsvCharacter | EclCharacter ---@alias Item EclItem | EsvItem ---@alias EquipSlot \"Helmet\" | \"Breast\" | \"Leggings\" | \"Weapon\" | \"Shield\" | \"Ring\" | \"Belt\" | \"Boots\" | \"Gloves\" | \"Amulet\" | \"Ring\" | \"Ring2\" | \"Horns\" | \"Overhead\" ---@alias EquipmentSubType \"Platemail\" | \"Robes\" | \"Leather\" | \"Belt\" | \"Ring\" | \"Amulet\" | \"Shield\" | \"Dagger\" | \"Sword\" | \"Axe\" | \"Mace\" | \"Sword\" | \"Spear\" | \"Staff\" | \"Bow\" | \"Crossbow\" | \"Wand\" ---@alias StackType \"Battered\" | \"B\" | \"Harried\" | \"H\" ---@alias Gender \"Male\" | \"Female\" ---@alias Race \"Human\" | \"Elf\" | \"Dwarf\" | \"Lizard\" ---@alias Keyword \"ViolentStrike\" | \"VitalityVoid\" | \"Predator\" | \"Elementalist\" | \"Prosperity\" | \"Paucity\" | \"IncarnateChampion\" | \"Defiance\" | \"Occultist\" | \"Disintegrate\" | \"Wither\" | \"Centurion\" | \"Abeyance\" | \"Benevolence\" | \"Presence\" | \"Ward\" | \"Celestial\" | \"Purity\" | \"VolatileArmor\" | \"Voracity\" ---@alias KeywordBoonType \"Activator\" | \"Mutator\" -- For doc generation; does not actually work in IDE ---@class Event ---@class Hook --------------------------------------------- -- UI --------------------------------------------- ---@alias MessageBoxType \"Message\" | \"Input\" --------------------------------------------- -- GAME.TOOLTIP --------------------------------------------- ---@class TooltipData ---@field Data table[] ---@param data table[] ---@return TooltipData function TooltipData:Create(data) end ---@param type string ---@return table function TooltipData:GetElement(type) end ---@param type string ---@return table[] function TooltipData:GetElements(type) end ---@param type string function TooltipData:RemoveElements(type) end ---@param type string function TooltipData:RemoveElement(type) end ---@param ele table function TooltipData:AppendElement(ele) end ---@param ele table ---@param appendAfter table function TooltipData:AppendElementAfter(ele, appendAfter) end","title":"Aliases"},{"location":"hotbar-standalone/","text":"Standalone Hotbar Mod \u00b6 The Improved Hotbar mod is a standalone version of Epip's hotbar features, requiring only the Script Extender v56+. Workshop page Direct download","title":"Standalone Hotbar Mod"},{"location":"hotbar-standalone/#standalone-hotbar-mod","text":"The Improved Hotbar mod is a standalone version of Epip's hotbar features, requiring only the Script Extender v56+. Workshop page Direct download","title":"Standalone Hotbar Mod"},{"location":"patchnotes/","text":"Changelog \u00b6 Older versions of the mod can be found here . v1065 - 07/05/23 \u00b6 Requires extender v59+. Standalone usage warning If you have the Improved Hotbar mod, you must disable it to use Epip . All of its functions are already in Epip (+ like 9 months worth of updates that the workshop mod never got). See the front page and the changelog if you're new to Epip. Download here . With this version, EE has been removed as a dependency. It's now possible to use Epip in a non-EE playthrough and the main features will work. There may be quirks that need ironing out, ex. references to features or settings that only make sense in EE - please report these. This also means that the remaining gameplay changes have been removed. If you wish to keep them, use this mod . The following patchnotes are the merged patchnotes of all beta versions of the patch, excluding the April Fools one. By the way, due to logistics changes, you will have to re-enable immersive meditation in the settings, if you had it on. Animation cancelling now has 2 modes: client-side (v1065 behaviour) and server-side (old behaviour). The server-side option uses the lower delay that was used previously. Changed how hotbar row count and visibility is saved This might not work in multiplayer due to extender shenanigans Custom status UI elements are now bigger (ex. in Quick Examine) Added a new rune crafting system; simply right-click a rune material and select the new option in the dropdown menu to get started. Reworked the stats tab; should be less prone to bugging out in multiplayer now Also fixed the gold & splinter stat The incompatible mods warnings now show on every load, rather than once per playthrough Updated localizations and added Brazilian Portuguese, translated by Ferocidade Character sheet skew during anniversaries is now less extreme Removed the \"cinematic combat\" option Fixes: Fixed some log spam related to status icons Fixed hotbar loadouts not working Non-english languages should no longer have broken artifact descriptions The cause was fetching the TSKs during module load, which causes a bug that overwrites the string. Fixed Quick Examine not being openable for the same character twice in a row Fixed vanity dyes not applying to slots that vanilla armor (without transmog) would hide/mask Fixed error if an item was transmogged into a template that no longer existed Fixed a typo in the settings to fix Astrologer's Gaze tooltip On the technical side of things: Added ActionReleased event to Input library Added GetIcon() to BatteredHarried library Added GetLevelID() to Entity library Largely decoupled the logic for custom keybinds away from the UI itself (onto InputLib) Added EpicEncounters.DeltaMods library with dynamically-generated data about EE deltamods Added DragDropStateChanged event to Pointer lib Equipped artifacts are now tracked using UserVars instead of tags Generic: Added RepositionElements() to Grid Added Destroy() to UI instances Fixes and additions to PlayerInfo methods Moved various functionality from Feature up to its parent class Library (UserVars, ModVars) Fixed some warning spam related to status icons Various new checks to disable EE features when playing vanilla Fixed setting ID conflict issues in the settings menu Various fixes to debug cheats Reworked the doc generation script again; the doc appearance has changed considerably, and now supports hotlinking to functions Added support for multiple inheritance to classes made with the OOP library Generic UIs can be fetched by string ID now (oops) Added Character.Events.ItemEquipped Updated the Generic example script and documentation Net payloads now have methods to fetch the associated character and/or item Added Osiris.GetFirstFact() Added new calls to CharacterLib: IsOrigin() , IsPlayer() Small changes to annotations and rewrites of code that was using deprecated stuff Began work on a new cheats system and UI Added Client.IsCursorOverUI() and Client.GetActiveUI() Added Input.IsTextFieldFocused() Added skillstate-related methods to CharacterLib Reworked hotbar prepared/casting skill checks to not require server information Added Client.Events.SkillStateChanged v1064 - 05/03/23 \u00b6 Download here . Requires extender v58+. Quick Examine improvements: Added display for AP, SP, and initiative Added resistances display Added numerous settings: opacity, width/height, hiding certain widgets. You can find them in a new tab in the settings menu Minor graphical touch-ups Added a setting to set the default position of the UI; this position will be used after reloading Added a statuses bar (toggleable) Added a light stroke to the resistances text Added a B/H display, with buffered damage towards the next stack Now shows your ally's skills and their cooldowns Tooltips will show the damage as if they were used by them, but Epip features (like viewing which source infusions are available) likely do not work properly currently Reworked the settings menu and underlying system Your previous setting values will be lost The settings menu is now separate from the vanilla UI, prevent conflicts with mods that may overwrite the vanilla one Settings have been reorganized into separate tabs Settings are now saved per-profile, in Osiris Data/Epip/{profile GUID}/ In the settings menu, the current tab's button is now highlighted (replicating vanilla behaviour) Reworked the settings menu to be more easily expandable and changed the appearance of settings Tabs with a large amount of options (ex. Epic Enemies) might suffer stutters while opening them, similar to Quick Find. This is an issue with the UI framework that will be investigated later. Added a new UI that shows a filtered view of the party inventory Opened with Ctrl+F by default (configurable in input menu) Can filter equipment by slot, consumables by scrolls/grenades/potions, and skillbooks by school Weapons and armor can be filtered by type (ex. sword, leather armor...) Equipment can be searched by their stat boosts (supports only vanilla modifiers for now) Right-click an equipped item to open the UI with filters set to that item's slot, to quickly replace gear Vanity internals have been reworked, with multiple changes as a result: Dyes no longer require deltamods and thus should no longer be lost to shenanigans or bloat the savefile Transmogrifying no longer requires the item to be transformed and therefore should no longer have any gameplay side effects As a result, you are no longer prevented from transmogrifying GB5 sets Transmogrifying weapons into another type (ex. dagger -> bow) will have them show in the proper location while sheathed Added an option to keep the icon while transmogrifying Fixed an issue with dyes not being loaded properly from oufits Added an option to hide any armor slot's visuals Due to an engine quirk, changing visibility is not properly reflected in the character sheet until you switch characters Removed support for vanity dyes from before v1063; items still using them will appear purple Added an \"Auras\" tab to Vanity, where you can apply visual effects to your character, onto various bones Added an option for animation-cancelling for player characters A new setting exists to blacklist skills from being affected. A more user-friendly way of adding entries will be added in a future version Added a setting that controls how character level is displayed in the health bar; defaults to current behaviour (below bar, when holding shift). Includes the option to hide the level entirely. Reworked the \"show minimap\" setting; should be more reliable now You can now drag + drop items onto the Greatforge socket \"Status effects\" in the vanilla examine UI is now capitalized, for consistency with the rest of the headers Began removing gameplay changes from original versions of Epip. Since the focus of the mod has changed over to UI and QoL, gameplay changes no longer make sense within the project, and impede it from being used without EE. Removed changes to Battle Stomp, Bless, Circle of Protection, Escapist, Siphon Poison, Summon Soul Wolf, Wolf Howl, Break the Shackles Removed changes to Elementalist damage Removed changes to Leper Reverted stat changes to Boneshaped Crusher and Soul Wolf Removed Sight and Hearing FlexStat entries Clicking a status on a player portrait or Quick Examine will now center the camera on the status's source (if any) \"Copy identifier\" keybind no longer copies template GUID Added Russian translation by Cathe & JoienReid Currently only spans the settings menu and some vanity features Since playing in non-English currently has certain issues with add-ons, a new setting has been added to display text from Epip in a language different than the game's. Level-up progress in character sheet is now shown with a percentage Added settings for disabling most of the tooltip adjustments Epip offers Surface tooltips should be more reliable Combat log improvements are now enabled by default Enemy health bar now uses a vanilla-ish appearance if EE is disabled (no fancy gargoyle boss frame) B/H indicators in player portraits are now only shown in combat (instead of when unsheathed) and are disabled if EE is disabled Removed the meme loading screen option Skill tooltips for zone-type skills no longer erroneously say their range is increased by Astrologer's Gaze Fixes: Fixed icons on the minimap flickering Fixed layouts being saved for summons and party followers Layouts should now be synchronized better in multiplayer, and survive a lua reset Layouts now save when the pause menu is opened, rather than when the game is paused (which basically never happens in multiplayer) There's probably a dozen other features that made this mistake; they will be fixed in the future Fixed the \"points available\" blip in the character sheet not being hidden when within vanity, if you had a lot of tabs registered Fixed the draggable area of Quick Examine being smaller than intended Fixed QuickExamine not being draggable all the way to the right of the screen Fixed the \"Epip Settings\" button not appearing on all tabs of the vanilla settings menu Fixed Trickster's Repertoire unsneaking characters that do not have the talent Fixed developer-only settings being visible outside of developer mode Hotbar: fixed hotkeys settings being deleted in some cases Disabled the save/load improvements during game over to fix a softlock (no known workaround) Fixed tooltips of player portraits and XP bar not working properly Due to engine jank, these will not be affected by the delay settings Fixed engine actions (attack, flee, etc.) being draggable to hotbar hotkeys Fixed some small visual bugs with the enemy health bar Fixed some small visual issues with custom item slots in UIs Fixed some console log spam Fixed hit chance not displaying when hovering over characters in combat Fixed some items being grayed out in hotbar groups Fixed \"immersive meditation\" and other EE UI features not working for characters that have been transformed Fixed unique items being dismantle-able with \"mass dismantle\" Fixed item context menus being misreported as character menus if you hovered over a character recently Possibly fixes the issue of options like \"mass dismantle\" not appearing The \"infinite carry weight setting\" should now work properly for clients that join mid-session Other features that face problems in multiplayer are possibly suffering from the same bug and will be fixed in the future Fixed transmogged helmets not being toggleable from the character sheet UI Fixed \"revert appearance\" in vanity not working properly On the technical side of things: Added an Image library with PNG decoding Added ImageViewer feature, intended for displaying results of images decoded with Image Improved reliability of Client.GetMousePosition() (replaced with Ext implementation) Added a Set data structure Added Vector.ScalarProduct() Added a Color element to Generic Added ClearElements() to Generic's Grid Added SetVisible() to Generic elements Added Set and Map settings types Added a debug hotkey for copying the pointer's world position Added a Interfaces library for common interfaces Generic: fixed ScrollList not supporting centering of elements Generic: added LabelledIcon prefab QuickExamine: added Widget interface StatsLib: added data of immunites TooltipLib: added support for status tooltips QuickExamine: split up some parts of BasicInfo into separate widgets Generic: fix downsizing IggyIcon Generic: added a Status prefab, for displaying status effects TooltipLib: added ShowStatusTooltip() Moved various functionality from EnemyHealthBar to a feature (EnemyHealthBarExtraInfo) Fixed TextLib's Format() not accepting decimal text sizes Added a setting to simulate EE being disabled (applies to Epip scripts only) Removed checks for Improved Hotbar mod Added an event for statuses being applied to CharacterLib Added a feature to generate Osiris event annotations for lua The IDE annotations folder in Epip has been updated to include them This might be expanded to support PROCs and QRYs later Added an OOP library for working with classes Feature now supports registering and fetching class tables in an elegant manner Started splitting up Feature into 2 classes to fix interface segregation violation Fixed OsirisLib calls not working with 0 parameters Various script cleanups (mostly for Hotbar and EnemyHealthBar) Added TSKs for older settings Changed TSK integration in Feature: the keys are no longer required to be a handle; they can be any string, letting you index the TranslatedStrings table with auto-completion TSK objects now have a GetString() method to resolve them TSK table within Feature will be deprecated soon Added a feature to play client-side effects upon hovering over entities Added libraries for EE-related mechanics (BatteredHarried, SourceInfusion), and moved relevant methods to them Fixed Character.GetEquippedItems() not returning the advertised type Added a DatabaseSync feature for synchronizing database contents to the client Might be merged into the osiris library in the future Added a UserVars library, with Feature integration Added support for function signatures without bodies to the doc generator, fixed subclasses not being detected properly Added methods related to drag-drop to PointerLib Generic: Moved annotations to separate file, solving various IDE warnings Added support for tweening Fixed Stats.MeetsRequirements() not working with attribute requirements Added ShowItemTooltip() to Tooltip lib Generic: The HotbarSlot prefab is a now more general-purpose inventory-like slot, showing rarity, rune slots, and with options to block drag-and-drop Fixed culling issues with IggyIcon Added support for scrollRects ComboBox events now throw their option ID instead of just index Added SetChildIndex() Removed swf overrides for textDisplay and notification UIs, as well as cleaned up their respective lua scripts Fixed error messages from using keys the game doesn't support (ex. media keys) Added annotations for basic stats objects Added AMER_Loot_CallistoAnomaly icon - special thanks to Elric Fixed UserVars not synchronizing Fixed GameState.IsLoading() not working Various changes to annotations Features can now declare which game states they should be enabled with, which will cause :IsEnabled() to return false under unsupported states Rewrote Osiris table. Tuples returned from DB queries are now an object and it's possible to distinguish DBs/QRYs with the same name but different arity Rewrote Item.GetEquipmentSubtype() to be a lot more reliable, and fixed it failing to identify clubs Generic: added the Texture element Generic: added more prefabs for \"form elements\", and added inheritance to them Unsubscribing event listeners with an ID that is not subscribed no longer triggers a warning Added IDE annotations for the global Ext functions (like _C() ) Added a \"DefaultTable\" data structure (inspired by python's defaultdict; a table with a default value when indexing) Removed UI override for the settings menu (LeaderLib menu might work now? no promises) Debug menu now supports fiddling with the UI scripts to an extent Osiris table now parses parameters for DB set/delete operations InputLib: added methods to fetch game input event definitions and bindings The ancient script previously used to do this has been removed, along with some other redundant ones Improvements to the doc generation script (which shall debut here soon); it can now export \"subclasses\" of a class (the auxiliary data structs) Added a generic developer input binding for hooking quick tests onto it TooltipLib: added a way to render custom formatted tooltips TooltipLib: added a method to render skill tooltips, as if the engine were doing it Minor cleanups of some scripts Fixed iggy icons in Slot elements being culled out for Generic UIs Added methods to check if a component is an item/char to EntityLib You can now specify a player index when using methods in PointerLib (though I do not know in which scenario multiple pointers can exist; splitscreen co-op perhaps?) The localization system now supports contextual metadata for ease of translation, and integration for it has been added to the Feature table You can define TSKs in TranslatedStrings and query them by indexing TSK within the feature TSKs defined this way support aliases that are valid only within the context of the feature, preventing collisions Added a python script to import/export Epip translation files in Mods\\EpipEncounters_7d32cb52-1cfd-4526-9b84-db4867bf9356\\Story\\RawFiles\\Python\\localization.py Added GetTurnOrder() to Combat library Added Client.WorldPositionToScreen() Improvements to doc generator script: Added support for net messages Better support for hooks/events Private methods are now hidden Symbols are now sorted by context (first Shared, then Client, then Server) Can now be used externally (importable) Added support for overloads v1063 - 19/09/22 \u00b6 If \"Unfocus after sending messages\" is enabled, holding shift while sending a chat message will keep the chat focused Fixed settings not saving if you didn't visit the camera settings tab On the technical side of things: Added operator overload annotations for RGBColor , Vector Vector.Create() accepts an existing array as a parameter (only one) Added TSK-related methods to Text This includes a localization system for strings in scripts; you can generate templates for localizing with Text.GenerateLocalizationTemplate() and they will be loaded from Mods/MyMod_MyGuid/Localization/Epip/MyTargetLanguage/ModTable.json , where ModTable is the mod table whose strings you've localized using the template Support for this within Epip will be added throughout future updates; currently only some camera settings support this You can generate fresh GUIDs or TSK handles with !guid and !tskhandle commands (on client context); they'll be copied to the clipboard v1062 - 16/09/22 \u00b6 Surface tooltips with an owner now show a hint regarding how the damage scales \"Active Defense\" statuses (ex. Empyrean Tears) now show remaining charges EE rune materials now show how to use them to craft runes Added a setting to configure the delay of simple tooltips appearing This affects tooltips of items in the world, as well as label tooltips in UIs (these 2 types are individually configurable) Added a settings tab for camera settings You can change the maximum zoom out distance, as well as the view angles Items in the quest reward screen now show a hint regarding modifier generation Added new Greatforge graphics for Engrave - special thanks to Cathe and Elric! Fixed a vanilla bug with the character sheet that caused the second ring slot to not play equip animations Additionally, the graphics involved should now be better centered Re-added the option to auto-unlock inventories Changing the lock status should also be synched better now - the vanilla game seems to struggle with this leading to the changes often not being properly reflected in other player's UIs Fixed weapon range deltamods only considering the first deltamod of that kind found This same fix is applied for weapon elemental damage mods as well On the technical side of things: Replaced Client.GetCharacter() implementation with a new one from v57 that doesn't rely on any UIs. Let me know if something character-involved breaks as a result (though I haven't experienced any difference). Added a Camera library Added an Entity library, with shorthands for GetGameObject() and functions to get all characters/items on a level Added limited alpha support to RGBColor (I don't think alpha is used anywhere in scripting though) Item.GetIcon() is now fully reimplemented following engine code Stats library now also holds dynamically generated data of runes, except framed ones Tooltip library now supports item tooltips and simple tooltips (the usual showTooltip call), and offers additional contextual data (ex. skill ID for skill tooltips) Started work on a new UI-independent settings library with per-profile settings support; not yet used v1061 - 4/09/22 \u00b6 Added new settings for world item tooltips: Emphasizing containers, consumables and/or equipment by changing their color This setting will not work for items that would result in a crime upon interaction; they will remain red. Enabling world tooltips for all items (similar to the \"Let there be tooltips\" mod) Filtering out clutter (particularly the one added by the setting above): chairs, doors, non-interactable items Option to open containers upon clicking their tooltip, rather than picking them up Added an option to exit the chat UI after sending a message (so you don't need to press escape manually) Added an option to disable notifications for sharing civils (\"X shares Loremaster/LC with Z\") Searching saves is now case-insensitive Added a ping counter to the debug display Since the server only responds to net messages once per game tick, the counter will basically always show around 33ms in singleplayer Fixed \"Show empty containers/bodies\" not actually working on items Fixed another case of an infinite loop of switching characters Fixed the \"toggle world tooltips\" keybind not working (+ crashing the game) Fixed some character sheet tooltips appearing in the vanity UI On the technical side of things: Osiris library now converts boolean values to integer in calls Added HasFlag() , IsContainer() to Item library Added initial groundwork for an inventory expansion v1060 - 3/09/22 \u00b6 Added a better frame for the hotbar health bar, and shadows for the AP bar (thanks Elric) Added a keybind to bring up the examine UI (the real one) Added all engine actions (the ones you see in the controller UI) to the hotbar actions drawer (the vanilla one, bound to X ), except for flee Reordered some keybindings Added \"Let there be tooltips\" to the list of EE-incompatible mods Fixed character-specific context menus appearing on items Fixed the save/load overlay not disappearing in multiplayer when the UI is closed Fixed a possible edge case with walking over corpses in combat that would result in the corpse not being lootable after combat Fixed the dragging area for the debug display being too large Fixed an issue with character control switching rapidly Fixed hotbar tooltips not showing keybinds Removed the \"Special Binding 1 & 2\" keys since they are no longer used On the technical side of things: Added data for all InputEvents to Input as well as possibly the world's biggest alias Added an IO table Began modernizing the context menu APIs Added a Pointer library, currently deals only with Ext.UI.GetPickingState() -related matters Added table.lua and math.lua containing the extensions to the respective built-in tables RGBColor creation now clamps the color values Implemented __eq, __add and __sub for RGBColor Various fixes for outdated/clashing IDE class names Fixed an infinite loop when using the default buttons for MessageBox Added a table for combatTurn UI Unfortunately this UI does not appear to hold any character handles, making it not very useful. v1059 - 29/08/22 \u00b6 Fixed an issue with using items in hotbar groups after reloading Fixed item amounts displaying incorrectly in hotbar groups Fixed an issue with the unlearn skills prompt appearing while the UI is closed On the technical side of things: Added \"Actions\" (ground attack, sheathe/unsheathe, etc.) to the Stats library v1058 - 29/08/22 \u00b6 Versions from this one onwards require extender v57. New features: Consumables like food and mushrooms now show their effects by default; there's no need to eat them once for them to appear in the tooltip Added a setting to enable infinite carry weight You can now right-click skills in the skillbook while out of combat to unlearn them Added a keybind to toggle world item tooltips (so you don't need to hold the alt key) Surface tooltips now show their owner (who the surface damage scales from and who owns its applied statuses) Added a setting to disable the \"Item Received\" notifications Added a setting to allow viewing the character sheet while in the quest rewards UI; this lets you compare your equipped items with the rewards. Vanity: transmog and dyes no longer require items to be re-equipped, making it overall faster to try on different looks Added an option to hide empty corpses/containers from the world item tooltips (the ones that appear from the alt key) Added a setting to allow you to walk onto corpses while in combat without looting them. You may still loot them while holding shift. This setting is enabled by default. The fix to character control being lost upon creating new summons now also applies to having your summons be killed Added an option to play a sound effect when a chat message is received, so they're easier to notice Empowering items now properly scales their armor values, but this will only take effect after a reload Fixed the vanilla bug that prevented you from using items in certain conditions if you had +AP Cost effects Added a keybind to scroll the fancy item/skill tooltips ACTIVE_DEFENSE statuses (ex. Empyrean Tears) now show max charges in the tooltip Holding shift while moving in combat now shows approximate decimal AP costs Status tooltips now show if they were applied by an equipped item Fixed the tooltip color for effects that alter AP costs. They now display in green if they reduce AP costs, and red if they increase them. The custom input menu has been reworked to use new extender tech; all keys supported by the game are now bindable, including modifier keys like alt/ctrl. Your previous bindings will be wiped upon updating. Added new modifier keys to cycle bars on the hotbar: ctrl cycles 3rd bar (from bottom), alt cycles 4th one, gui (Windows key) cycles 5th one Added an \"Engrave\" option to the Greatforge which lets you rename items. This is purely visual. It does not currently have a custom graphic. It will appear as another \"Drill Sockets\" in the Greatforge wheel. Minor visual adjustments to QuickExamine The Epip settings menu is slightly more organized now Added more mods to the incompatible mods warning: DU, Greed, Multihotbars Hotbar: Slots can no longer be used while holding modifier keys. This means you can use shift/ctrl/alt + number keys as a custom keybind without it interfering with the hotbar. Fixed loadouts not saving empty gaps inbetween slots You can't cycle hidden bars anymore Added custom slot groups. Right-click a row on the hotbar to create one. These are shared across all your characters. Right-click them to delete them. Known issues: Items there do not display tooltips yet Fixes: Fixed tooltips for Vanity tabs Fixed negative status effects displaying wrong ever since GB5 Epip's artifact tooltips (in Quick Examine, stats tab, etc.) now have a period at the end of them Hotkey to exit Meditate is now escape, instead of escape / right-click. Fixed action names on the hotbar buttons Fixed some character sheet tooltips appearing while in the Vanity menu Stuff for developer mode: Added a keybind to copy identifiers (GUID for chars/items, stat ID for skills) of the object over your mouse Added a settings menu to change Data.txt values ingame. Most of them apply instantly / upon character stat recalculation, but some may require a session reload. Talents show their IDs in tooltips The cheats context menu now lets you add talents Added an option to enable a widget that shows FPS, TPS, and relevant mod versions Added a keybind to open a debug menu from which you can toggle debug mode on features, disable them (or their logging), and run tests (a new feature of the Feature table) On the technical side of things: Osiris library now supports built-in symbols (calls and queries) and extender objects are converted to their GUID when being passed Added a Vector library (with some cool arithmetic operator overloads) Added a new tooltip library (WIP), advantage include preventing tooltips and manipulating surface tooltips, viewing source UI of a tooltip SubscribableEvent nodes can now be removed based on a predicate function, and preventable events are supported Fixed some log spam related to the hotbar Added groundwork for the Epip Housing(TM) feature Slight modernization to Net library: the payload is now passed as the first parameter, and IDE hints are available by defining the net msg as a class with the payload's table fields Timer lib is now available on the server, and a tick-based timer option has been added, as well as option to repeat / pause them Added a better coroutine table with sleeping (either for X seconds, or until a condition is met) Added a new Epip.RegisterFeature() call which can keep track of the source mod of a feature Added a new Input library using v57 RawInput Added more hooks to CharacterSheet UI in preparations for custom talents 2.0 (and other stats) Added ExtraData tables to Stats library Added PartyInventory hooks Removed numerous archaic/unused scripts, like the custom talents ones GenericUI: Added more bg options for TiledBackground Added new elements: Slider, Grid Events now have proper IDE support, and no more issues with inheritance Element creation now has proper IDE support, if you instantiate elements using their class name Added more position-related calls Element visuals now use string IDs, and unused visuals are set off-stage (less possibility for jank) Fixed button size issues Removed minimum size for black background Fixed stack overflow issue with lists Added support for skill tooltips Fixed issues with MouseUp on the slot element Changed mouse events to use the roll ones Added proper support for prefabs, with the following implemented: Spinner Text (offers simpler initialization of Text elements) HotbarSlot (with many improvements to bring it closer to hotbar behavior) FormHorizontalList LabelledCheckbox LabelledDropdown LabelledTextField v1057 - 26/07/22 \u00b6 Fixed the annoying issue of control being switched to new summons in combat while it's still your turn Crafting UI now remembers your last tab (equipment/consumables etc.) Added a setting to set the default tab for the crafting UI The hotbar now shows a warning for unmemorized skills, as well as skills from items that have been unequipped Fixed some changelogs ingame not showing up Added an option to enable some improvements to the save/load menu: alphabetical sorting and search. The search bar supports lua patterns and is case-sensitive On the technical side of things: The hotbar updates periodically again to fix some issues, and should no longer break completely when a single slot/action fails to render v1056 - 22/07/22 \u00b6 Stats Tab: Added Voracity stats Added Artifacts Quick Examine now shows Artifacts for your allies as well (useful in multiplayer) Vanity: added support for \"Visitors from Cyseal\" mod, though the mod currently appears to have some issue with replacing some item icons Fixed a freeze with Immersive Meditation Fixed another grey out issue with the hotbar (skills with weapon damage but no weapon requirement) Fixed the category weight sliders in Epic Enemies not being saved Fixed the \"Show Minimap\" option appearing twice in the options menu Fixed some issues with controllers Skills show their IDs in tooltips in developer mode On the technical side of things: Added StopPropagation() to the new event table Added a wrapper for checking developer mode, with an option to use an additional check; WIP and testing features will be locked behind it, meaning the rest of the features (like the cheats menu) can be used without problems Added a few new utility methods Started work on further giga brain hotbar improvements v1055 - 20/07/22 \u00b6 Added an option to reduce the opacity of the player status bars while in combat Vanity UI now closes when you go into combat Status tooltips now show source (if it's a character) Re-added the hotbar actions drawer (the one with force-attack / sheathe / sneak) Added a Vanity action to the hotbar Added new Combat Log filters: critical hits and dodge Status tooltips now show ID and Type while in developer mode Added embodiments to the stats tab Read books and used keys now show a label in their tooltip (not retroactive) Fixed Max SP check being inaccurate on the enemy health bar Added new divider sprites for the player health bar Player health bar now shows maximum SP, and the SP counters are centered Fix item use cost not being considered while greying out slots on the hotbar Fixed consumable items not greying out properly in the hotbar Fixed hotbar issues with Luminary, Musketeer mods Temorarily removed the option to auto-unlock party inventories due to crashes in v56 from sync rewrites On the technical side of things: Removed more log spam from Hotbar/Input Moved a bunch of tables around, removed archaic scripts/global functions Added some Larian colors to the Color table Added an icons enum to Hotbar More work on the new UI system: event listeners, Slot element Added GetExtType() for checking the type of an extender object Added GameState table Started transitioning to using a better event system, using a modification of the v56 SubscribableEvent table Updated IDE helper files v1054 - 13/07/22 \u00b6 Added a \"Quick Examine\" UI. Currently it only shows the Epic Enemies perks characters that have them. It is invoked by a keybind while hovering over a character; default is v . You may use the lock button to prevent its selected character from changing whenever you hover over a new one; if you do that, you will need to press the keybinding manually to change targets. You can drag the UI around by holding down left click on the upper part (the one with the character name) Artifact powers in Epic Enemies now have descriptions Hotbar now greys out unusable item skills (ex. arrows) Switching characters or clicking slots on the hotbar now attempts to fix desync issues (the one where your clicks go to the wrong rows) Fixed a freeze when using a controller Temporarily removed the Awesome Soccer minigame On the technical side of things: Added a new lua-based UI system; currently supports backgrounds, text, buttons, state buttons, the common list types (vertical, horizontal, scrolling), dividers, and icons v1053 - 07/07/22 \u00b6 Added an option to show aggro effects on the top health bar: taunt source/target as well as AI preference tags Centered the AP orbs on the bottom health bar, and added special dividers every 4 AP Pipmode no longer gives infinite AP to non-player characters Added a cheat to apply statuses Reworded +elemental damage tooltips on weapons Fixed offhand items not auto-transmogging properly Fixed some summons still getting Epic Enemies perks, as well as party followers Fixed skills that require shield not being greyed out while muted Hotbar: Loadouts are now sorted alphabetically Added a setting for disabling slots while casting Fixed occasional flashing for slots on cooldown Fixed hotkeys being blocked if any controlled char is in dialogue On the technical side of things: Added better annotations for UI/Feature tables (works with inheritance now) Added wrapper calls to get/set stats regardless of whether they're actual stat objects or the special types (DeltaMod, TreasureTable, etc.) Moved RemoveTrailingZeros() to Text Reduced some extender log spam from stats Fixed warning spam when enemies were preparing skills v1052 - 05/07/22 \u00b6 Epic Enemies: Reworked the Epic Enemies feature. It is now configured through the regular settings menu, not the EE one. If you're continuing an old save, the options in your EE menu will remain, but they will no longer do anything. The amount of effects enemies gain is now customizable The weighted chance of each perk appearing can be customized individually - it's also possible to adjust the chances for whole groups of effects at once (ex. all Centurion effects) All artifacts can now be made available to enemies Effects with conditional activations are supported, and can grant a variety of other perks (statuses, stats, summons, etc.) though there are no new effects that use this yet - new content will be added soon Hotbar: The \"active skill\" animation on the hotbar should be more reliable now (and no longer appears if you click spells in the spellbook) Fixed shield skills not greying out when disarmed On the technical side of things: Removed the infamous empty net script Cleaned up script loading on the server Generated new IDE helpers for built-in v56 types OptionsSettings UI now has less thicc text labels so you can actually write stuff there without taking up the whole screen Known issues: Artifact effects in Epic Enemies have no descriptions (text keys are really unreliable apparently) Switching tabs in the Epic Enemies settings menu scrolls you to the top Epic Enemies no longer gives extra Predator range v1051 - 28/06/22 \u00b6 Small bug fixes, and a moderate QoL addition for vanity dyes. Added Ctrl+C/V support to the dye tab text fields Fixed Epic Enemies tooltip (thanks Pancarte) Fixed outfits ignoring transmog restrictions Fixed vanity dye slider text values sometimes not moving around Fixed items transmogged into artifacts gaining the special tooltip color (this will require an EE Core update to fully work) On the technical side of things: Cleaned up MessageBox v1050 - 26/06/22 \u00b6 A small assortment of huge vanity improvements! Vanity: Added a button to delete custom dyes Switching characters no longer closes the UI The current tab is remembered when switching items through the context menu Added a toggle to prevent the sliders from being set to the item's current color (makes it easier to reuse a dye on multiple items) Added fields to enter colors in hexadecimal Added buttons to copy/paste colors Added buttons to import/export dyes to/from the clipboard Sliders can now detect the default color of an item that hasn't been dyed before Added a checkbox to auto-transmog equipped items to your old item's appearance while the UI is not open (so you can switch out items in the UI without needing to toggle it off) Fixed the Vanity option appearing on non-equipped items Other: Added keybinds for the debug teleport (no longer uses the ping key) Custom keybinds no longer fire while in dialogue On the technical side of things: Added support for dev-only keybinds Moved Flash table to Client Added a Color table Created a github repository: https://github.com/PinewoodPip/EpipEncounters/commits/main v1049 - 23/06/22 \u00b6 Added an option to enable improvements to the combat log. Messages can be filtered by type, and certain messages will be merged into one line if they occur one after another, such as surface damage and healing. This option will only work when playing in english , unless someone is willing to help me make string patterns for other languages. Right-click the combat log to set your filters. You can also clear the log from that menu. When damage messages are merged into one line, they will display the amount of hits that were merged at the end. The exception to this is damage that occurs within 25ms of eachother, such as weapon attacks with coatings. These are counted as a single hit. Messages parsed by the new combat log system will now have a consistent base color, gray, instead of randomly using white. Some messages have been slightly reworded for consistency Added options in the cheat menu to add/remove tags. You can use this to clear a character's main character status by removing the AVATAR tag. Added a button in the debug sections of the options menu to warp to AMER_Test AMER_Test got Pinewood'd a bit Weapon tooltips now show +elemental damage modifiers Updated Derpy's treasure table displays Removed the option to disable custom context menus Fixed keyword source tooltips being off-by-one Hotbar action button tooltips now show their keybind (without shortening) Removed the automatic unbinding for GM keybinds, since they are no longer used for the hotbar Added chat commands: /rp displays a message over your character's head /emote performs an animation /help lists help for all commands Added a new tab in the controls menu where you can bind hotbar action hotkeys as well as standalone hotkeys for Meditate and Source Infuse. You must rebind your hotbar hotkeys Two keybinds previously used by the hotbar are now reserved as special keys that can be bound in the new custom keybinds UI. The purpose of them is to allow extra mouse buttons and other special bindings to be used with the new system until it is improved. Fixed numerous problems while playing with controllers Added a setting to make the Escape key close the Amer UIs entirely rather than popping page Fixed a hotbar refresh issue when pushing slots around Fixed hotbar action buttons no longer properly showing active/inactive state Removed the option to disable wrapping statuses (it has not actually worked for a long time) as well as the vanity menu Vanity: Added custom RGB dyes to the dyes tab Added all built-in ItemColor entries as selectable dyes Saving now also happens when you add/delete an outfit or a dye You can no longer transmog GB5 items Fixed spears not being available in the transmog menu Fixed the vanity option not appearing for non-shield offhands Added a button to delete outfits Fixed positioning of the vanity UI while playing on resolutions other than 1080p, or when dragging the character sheet Fixed saving outfits with weapons not working Removed the dye context menu for real The UI now shows a message if you select an empty slot, instead of opening a message box Slight changes to positioning of elements Improved performance The character sheet unallocated points notifications are now hidden while in the UI Other: Fixed a bug with hotbar action buttons resetting Added a \"Healing done\" stat to the stats tab The \"Damage dealt\" stat now also considers your owned summons On the technical side of things: Reworked how the selected item is tracked in the Vanity UI Reworked all tabs of Vanity to be separate, independent features Added initial groundwork for supporting controllers in Amer's UIs Added APIs for chatLog , optionsInput _Feature:DebugLog() is now polymorphic like the regular print function Added the Input UI, with possibilities for tracking text keys from the keyboard, and intercepting interface events Added FlexStats for sight and hearing, ranging from -128 to +128 (except for sight which goes to +2048) Added support for saving settings on the server Removed unused ItemColor stats Removed unused PersistentVars table Hooks can now be set to only return the first non-nil value (and stop propagation after that) Cleaned up the client bootstrap script Added an !animtest command on server, auto-playing all female human animations on the host character. There's no stopping it once started, so be careful! Added a !soundtest command on the client, which tests all UI sounds. Might've been added before this version, I don't recall exactly when it was implemented. Added some sick ASCII signatures to the bootstrap scripts, as well as a readme v1048 - 14/05/22 \u00b6 Added a warning upon loading a save with mods known to be problematic Graying out hotbar slots while casting skills should now work similarly to before Added Derpy's scripted encounters to the Treasure Table Display Added an option to disable area transition labels or change their duration. It now also hides immediately if you hover over a character/item to bring up its healthbar Possibly fixed a significant stuttering issue with the hotbar Added a button to revert a transmog'd item's appearance (not retroactive; will only work on newly transmogged items) Changing tabs in the Vanity UI now plays a sound Rounded the numbers in the Treasure Table Display Added a dyes tab to the vanity menu RGB sliders are not finished yet (you can use them in developer mode, but they will not be saved) On the technical side: Fixed a net error message upon loading into the main menu Fixed a startup error related to the Osiris table Added UIObject flag helper methods to the UI table (though Norbyte confirmed these will be usable like other enums in the future) Added ways to set and delete tuples to the Osiris table with :Set() and :Delete(); :Get() queries the DB (previous usage still works). Osiris table's DB queries now return the list of tuples as the last return value, always Added a separate UI for querying time from flash Fixed time functions not accounting for daylight savings (iggy oversight) Added annotations for the _Feature table/class Added a Text library with a handy format function Improvements to events and hooks: libraries can now hold their events and hooks as tables in Event and Hooks fields respectively, from which you can easily see all listener types available and register listeners. Doing it this way enables auto-completion and intellisense/EmmyLua annotations for listener parameters, which was not possible before. Old libraries will slowly be updated to use this, and the old method of registering listeners will stay. The standalone hotbar mod will be updated tomorrow (15th May). v1047 - 20/04/22 \u00b6 Added an option to show artifact/protean chances on enemy health bars when the \"Show Sneak Cones\" (shift by default) key is held. Also works on containers, without needing the key to be held. Fixed an issue with some setup event being unreliable (likely the source of many hotbar problems) Fixed some events being fired once per user Fixed equip animations in the character sheet Client timers are now truly client-side As a result hotkey'd skills on the hotbar should now have a lot less delay Fixed hotbar not being greyed out for dead characters Fixed \"None\"-type weapons not being considered melee, causing incarnate bull rush to appear grayed out in the hotbar Fixed another large performance issue with the stats tab v1046 - 14/04/22 \u00b6 Added a new journal UI, replaces the quest log for changelogs. Access it from the hotbar Fixed Inconspicuous not being hidden in character creation Hotbar config (hotkeys) now also saves when you save the game, not just when the game is paused Incompatible giftbags can no longer be enabled (you should still be able to disable them, if you had them) Added a way to mark templates as favorites in the vanity UI, moving them to a special category Vanity UI now shows categories in a consistent order Small change to stats tab to make stats editable post-SessionLoaded Character sheet now goes below the hotbar again Increased the hotbar's \"refresh rate\", fixing an issue with slots being clickable when they shouldn't Fixed the hotbar drawer locking up your scroll wheel Renamed the transmog context menu option to \"Vanity\", made it only usable on equipped items Added support for Rendal's NPC Armors to the vanity UI Reduced logging when developer mode is off You can no longer open the vanity menu while in combat Your currently equipped template in the vanity menu is now indicated by an icon instead of a suffix Fixed Immersive Meditation ignoring the setting Fixed a performance issue with the stats tab v1045 - 1/4/22 Anniversary patch :flashed: \u00b6 As of today, Epip is now one year old! My attention span for projects tends to be very low (as evidenced by my other EE stuff), but Epip looks to be an exception to that and it's incredible what it has become - all its UI changes were nearly unimaginable just a year ago. Thank you all for the support throughout the months, even at times when the patches were a buggy mess. Just like the initial release of the mod on April 1st, this anniversary patch is very real, and best experienced on this day of the month. Changelog: Pressing escape while in the EE UIs now backs out of them rather than bring up the pause menu The stats tab now shows damage dealt and received in the current fight (or previous fight, when out of combat) Added a new bug to the character sheet Performance improvements to the hotbar Gold/Splinter counter in the stats tab should now be more reliable Minor technical changes to make the mod compatible with Descent Added a scrollbar to the hotbar buttons drawer The hotbar now goes below the inventory and character sheet Hotbar cooldown animations should now be smoother Fixed bugs with unbinding actions in the hotbar, as well as clearing unmemorized slots Fixed muted characters not having their slots greyed out in hotbar You can now activate your Epip Encounters license ingame from the options menu Tooltips can now be scrolled on one axis with the mouse wheel The punisher now drops MicroBoss\u2122 loot to make him feel more optional Added a cinematic camera option, on by default Reworked the vanity feature: it now opens a custom tab in your character sheet. Browsing templates is a lot more convenient this way. Saved outfits are now categorized by race & gender (doesn't stop you from applying them to anyone though) It wouldn't be an Epip patch if something didn't ship unfinished, which is why I must announce that the promised feature to mark templates as favorite did not make it in. On the technical side of things: Added an alias for the Ext table to make it easier to type: SEX = Ext -- Short for \"Script EXtender\" SEX.Print(\"Welcome to Norbyte's SEX v56 !\") Fixed more inconsistencies with copy/paste in the message boxes Added an option to log AI scoring to the console: the top 3 actions will be shown anytime decisions are made. Work-in-progress as some of the AI features in the extender are currently bugged. Tooltips for Ascension stats in the stats tab are now created dynamically, so there's no need to edit them if you've edited the description/name Added a Server table on the client, from which listeners for any Osiris symbol can be created, eliminating the need for boilerplate code on the server side if you need to listen for Osiris stuff. Added an Osiris table on server to make user queries and DB queries a bit less aids to use in lua: -- DBs with only one tuple return their contents directly, rather than as a list local _, value = Osiris.DB_PIP_EpicStats_DamageDealt(char.MyGuid, nil) -- User queries can also return variables directly from their output DBs, even for queries with multiple outputs local value = Osiris.QRY_AMER_KeywordStat_VitalityVoid_GetRadius(char.MyGuid, 1) On the future side of things: Development has slowed down throughout March due to work and studies, but I'm not planning on stopping work on Epip anytime soon, and there are lots of exciting features in the planning stages. There is no time estimate for any of them, they're just things I know I will try out eventually . I know creating expectations never ends up well, but for the anniversary I felt it would be nice to write down the ideas I'm planning for the near future: Character sheet overhaul: the attribute/ability/talent tabs will become easily moddable, for modifying or adding new entries to them. This will pave the way for custom attributes and abilities. The UI currently used for the custom vanity tab will be made generic, so anyone can add their own tabs. Proper controller support for EE UIs: a large undertaking, but something that looks to be very possible and would be a massive quality of life improvement. Custom journal UI: will replace the current changelog functionality. The plan is to use the GM mode's journal UI as a base, since it's a slick, full-screen UI with support for nested categories. The functionality will be made generic, you'd be able to use it for more than just changelogs. A way to create UIs just from lua: work on this already started back in early January; it's used for the [REDACTED] in Fort Joy, but it's quite incomplete. The plan is to allow for creation of UIs with backgrounds, text, and all the Larian form elements (buttons, dropdowns, sliders etc.), all without touching any swf. More documentation for the source code, namely the remaining UI scripts and the base metatables Thanks for reading and I hope you have an epic 1st of April. 19/2/22 Huge Hotbar rewrite \u00b6 Rewrote the hotbar UI. This involves mostly technical changes, in preparations for a standalone release. Your hotkey keybindings will be reset with this update! Please bind them again. Visible changes: Fixed the top of the buttons area blocking clicks onto the world and other UIs Any skill or item can now be dragged from the hotbar to the customizable buttons to bind it there (useful for old mods that use skills/items to bring up menus) The \"use last slot\" action has been removed due to this. Removed the \"view changelog\" action The slot rendering is now entirely scripted (no help from the engine) which works around a crash and removes the need for an initialization procedure (that annoying \"switch to the first row\" message) Saving your current amount of bars and order should be a lot more reliable (now happens upon pausing the game, instead of a timer) Action buttons can now be highlighted or disabled; ex. the pyramids one is disabled if the party has no pyramids Added an action to open the pyramids UI Fixed the source skill border clipping into other rows Added compatibility for Weapon Expansion: adds an action for toggling the menu, and repositions the original button when you have 2 rows of action buttons Actions in the drawer are now ordered in a consistent manner Added a context menu when you right click a row; from there, you can: \"Push\" groups of slots to the left/right (useful for inserting skills inbetween slots) Clear rows, or unmemorized skills Save and load \"loadouts\" of rows. Loadouts can be applied even if your character doesn't currently know all the skills from it. Other changes: Simple tooltips (the ones that go in that very small black box) now appear much faster, rather than being delayed Added numerous calls to Game.Character and Game.Item , mostly related to functionality needed for the hotbar. 5/2/22 Docs inauguration patch :flashed: \u00b6 Added new stats to the stats tab (more coming later): Party gold, splinters Celestial restoration Vitality Void damage, radius Prosperity threshold Rewrote the ingame options menu; the mod's settings now gets its own tab instead of being stuffed into Gameplay You can now switch to and from Tactician difficulty at any time from settings Improved context menu scrolling Touchups to MessageBox, Examine Cleaned up Utilities.lua, removed old unused methods Removed support for the archaic config file structure (from before the ingame settings menu; very old) Created documentation for Game , OptionsSettings, MessageBox, StatsTab, Examine, and CharacterSheet 26/1/22: birthday patch :flashed: \u00b6 Fixed \u201cTeleport to\u201d not working on anything other than characters; it now works with items and triggers as well Fixed shields not showing all transmog options Fixed more inconsistency issues with context menus on world characters Transmog menu now works properly for characters that have had their race/gender changed Added an option to show B/H next to player portraits while unsheathed Fixed tooltips of damaging statuses for real Added an option to force story patching on every load Physical/pierce resistances in character sheet now get colored blue/red like how the normal resistances would Holding shift now fades out statuses on the enemy health bar Temporary solution for scrolling context menus that would leave the screen, with the mouse wheel Added something awesome to Fort Joy Technical stuff so it doesn't look like I'm doing nothing: \u00b6 Added utility methods for initializing \u201cFeatures\u201d You can now specify required filesystem overrides and mods for features, with them automatically disabling themselves if these are missing Removed GetCharacterDodge function Rewrote character sheet resistances script Rewrote script for enemy health bar Moved Majora's compatibility to its own script Added Game.Character library for character-related stuff Moved a lot of old calls to Client Started work on a library that allows the creation of UIs purely in lua (no swf/actionscript editing) 14/1/22: \u00b6 Re-enabled custom icons on the UIs that previously used them, as the extender issues with them have been fixed. Added a transmog context menu, can be enabled in settings. Appears on equipment with visuals, including weapons. Submenus display categorized root templates, filtered down to only the ones compatible with your current race/gender/alive/undead. Supports Majora's Fashion Sins. Can save/load outfits, along with their dyes. Saved outfits are in EPIP_VanityOutfits.json Warning: artifacts and armor set items will not currently work properly when transmogrified. Also, Majora's tabs tend to overflow the screen. Fixed status tooltips in v56 Fixed extract runes context menu option consuming gold instead of splinters Numerous miscellaneous internal changes 27/12/21: \u00b6 Updated to v56 of the extender. Current issues (with the extender): Anything related to status tooltip editing does not work as Game.Tooltip is borked UIs with custom icons (hotbar, toolip) stop displaying vanilla icons after the first session. Custom icons are disabled for now so as to keep both the hotbar and console usable Removed the old console cheats Full rewrite of the stats tab; it should be a lot more reliable now (especially in multiplayer) and survives lua resets Stats and categories are now defined in Epip.Features.StatsTab. Fixed context menu not working on chained characters, and added it to summon portraits (maybe) fixed summon portrait display issues Custom talents now display in the examine menu Organizational changes to tooltip adjustments script torturerSkillOverrides was moved to Data.Game.TORTURER_SKILL_OVERRIDES statusToSkill was moved to Data.Game.DAMAGING_STATUS_SKILLS v1043 (19/12/21) \u00b6 Added critical chance to the examine menu, below damage Added an option to set the default position of the Examine menu (middle, left, or right of the screen) Fixed health bar appearing in character creation Added a new context menu option to dismantle all equipment within a container. Only shows up when there's equipment within a container. Dismantling through the context menu now requires shift-clicking for any equipped item Fixed right-clicking containers bringing up debugging cheats for the character you previously had selected Organizational changes to various UI scripts and older features, as preparations for the grand debut of the Epip modding docs Reuploaded on 22/12/21 with the following fixes: More organizational changes (moving Data.UI to Client.UI.Data) Fixed immunities in examine showing up in the wrong place Undid some recent changes that lead to playerInfo summon display breaking Reuploaded on 23/12/21 to remove some testing text in character creation, as well as to (maybe?) fix an issue with combat HUD disappearing in new games. v1042 (14/12/21) \u00b6 Added an option to hide hotbar hotkeys text Added an \"Immersive Meditation\" setting which disables hotbar and minimap UIs while in Amer UIs Added shortened names for the remaining numpad keys (multiply, add, minus, etc.) Added an auto-identify setting, with 2 modes: always, and only with enough Loremaster. This will instantly identify items when they are generated Item tooltips no longer overflow through the top of the screen, making it easier to see the damage stats on items with 3 filled sockets Dismantling from the context menu now requires shift-clicking for items with runes inside (as a way to mark them as 'important' and avoid misclicks related to a certain new feature) Added a context menu option to items to dye them (requires the dyes to be in the party's inventory) Added a context menu to player portraits to hide statuses and summons (not saved between reloads for now) Added a context menu option to extract runes from items Added a debug menu with cheats for characters, available in the extender's developer mode Accessed by right-clicking a character in the world, or a player portrait in the left portraits UI Allows you to add all sorts of stats, spells, SpecialLogic, spawn items, treasure tables, toggle godmode, and more The new context menu tech is quite extensive, and can be toggled off in the settings in case any serious issues arise Finesse recovery now works for pay X skills, and sucker punch You can add more exceptions to DB_PIP_WeaponBasedFinesse_Whitelist((STRING)_Skill) Fixed overhead dialogue durations being wrong when they were changed away from the default value Overhead sizes are now always default in Amer UIs Fixed origins gaining epic enemies perks for real this time Fixed description of Clouded Memory Fixed map visibility setting not working after exiting respec Fixed being able to toggle minimap within character creation Fixed weapon range deltamod tooltip showing up on unidentified items Fixed wrong health bar B/H display on dead characters The dismantle context menu option should no longer get permanently stuck in case of unidentified shenanigans Added a 20% tax to dismantling items from context menus, used to amortize the development costs of the new menus as well as to fund future development of the mod just kidding v1041 (23/10/21) \u00b6 Added a slider for status overhead duration Fixed damage overheads for items not working with the new size settings Fixed the talents tab being selected after exiting mirror Fixed character sheet not updating the first time it is opened after a respec Fixed decimal stat adjustments being lost while merging them into one tooltip Fixed character creation talent points display when changing presets Fixed 1st hotbar not being clickable after a lua reset Fixed hotbar cooldown/active overlays when joining mid-session This should also have fixed the issue with loading a save during a summon turn Origins should no longer get Epic Enemies buffs Possibly fixed unidentified items showing the weapon range deltamods in the tooltip v1040 (19/10/21) \u00b6 Added some client APIs for the message box UI and overhead texts (Client.UI.MessageBox and Client.UI.Overheads) Added settings for overhead sizes Added a setting to bring back the vanilla combat log button (on by default) Fixed talents not being hidden properly in the character creation UI (which includes the mirror, it's the same UI) Fixed EE stats tab not working for new companions until a reload Fixed sliders in the options menu being saved with +1 step than what you've set them to v1039 (17/10/21) \u00b6 Fixed SI tooltip highlighting not working for a few schools Fixed wrong earth damage color in shift-tooltips v1038 (16/10/21) \u00b6 Added a hotbar hotkey to use the skill/item on the very last slot of your hotbar (right-most in 5th row) Can use this to make a Source Vamp hotkey, for example Weapon range deltamods now show up like regular deltamods on the tooltip, and the weapon range display is split up to show both base and extra range Holding the show cones button (shift by default) will display skill damage as their multipliers When infusing or when the shift key is held, unmet SI requirements will be displayed in red text Possibly fixed the \"auto-unlock inventories\" feature Artifact items now show quality Added an option to log all UI ExternalInterface calls and invokes to the console, visible in the settings menu if the extender developer mode is enabled Started slowly organizing code into sensical libraries; anything in the extended Game table should be reliable and will likely not change names Let me know if something that used to work before broke all of a sudden Fixed an error in the console when hovering over armor whose subtype could not be determined (ex. the starting tattered equipment) Character Creation UI now implements machine learning and blockchain technology to notify you of possible typos in your character names Added a WIP custom talents feature. See EpipTalents.lua for usage example. You can also hide any non-racial talent. Shortcomings: They will only display on kb+m. No controller UI support yet. They do not show up in the examine UI yet. Requirements are not rechecked while moving ability/attribute points around in the mirror; upon exiting, you will still lose any talents you cannot sustain Can't bind them to deltamods Rarely, the mirror UI might show you having fewer talent points than you do - this should fix itself if you exit the mirror and go back in (if someone has a save where this happens consistently, let me know) As a result of the talent UI changes, the bug with unequipping walk-it-off should be fixed v1037 (2/10/21) \u00b6 Fixed right-most zeros getting culled in stat adjustment tooltips Added a new setting to disable fog of war (server-wide, host-only, non-destructive; can be reverted) Minor visual bug: re-enabling FoW will cause the world to go black until you unpause v1036 (1/10/21) \u00b6 Changed the Damage tooltip in character sheet to be less confusing Removed the obsolete \"From LW: -0%\" tooltip text from character sheet Removed the word \"Set:\" from deltamods Added an option to auto-unlock inventories in multiplayer upon loading a save. This setting is per player. Fixed negative stat adjustments not being grouped together in tooltips Equipment now shows a \"Quality\" rating in tooltips, which denotes how good its damage/armor roll was. An item with 100% Quality has the best roll (only possible for Divines) Trickster's Repertoire now grants invisibility+sneaking until the start of your first turn, and only causes you to sneak starting from your second round. Additionally, at the start of your turns, you always unsneak. Changed wording for the Hothead tooltip Fixed error spam in console upon reload, and reorganized some code Added a lifesteal stat to the stats tab (will update upon changing Necromancy points, or in combat) Finished support for preset descriptions in character creation, override CharacterCreation.characterCreationPresetDescriptions in CharacterCreationUI.lua to set them v1035 (12/09/21) \u00b6 Replaced the config json file with an ingame settings menu, available from the game's normal \"Gameplay settings\" tab Unidentified artifacts now show their rarity as artifact, and use the custom color Proteans and Artifact runes now also use the Artifact color, and slots that they cannot be put on have a warning message Fixed Trickster's Repertoire breaking sneaking from other effects that cause you to sneak Fixed hotbar initialization message (again) v1032 (05/09/21) \u00b6 Small patch with some QoL for dyes and a fix for a Finesse issue. Dyeing equipped items will now re-quip them automatically Changed the finesse recovery for weapon-based skills to fix an issue with delayed procs if multiple things used its logic Removed the option to show enemy lvl in healthbar (still buggy!) v1030 (30/08/21) \u00b6 Monthly patch to appease our ever-so-hungry Derpy overlord. Hotbar slot keys now work as expected - ex. pressing \"4\" will use the fourth skill on the bottom bar, regardless of the row it's set to Hotbar actions now show their keybinding, if they have one Vanilla actions (ex. open journal) will always show the vanilla keybind instead of the custom one (it will still work, though) Re-enabled the keyboard hotkeys for hotbar actions by default. If you had these disabled previously (or if you're using the mod for the first time), its keys will be unbound upon loading in Changed the default hotbar bindings to swap ping with combat log Added a hotbar action for Portable Respec Mirror, if its mod is loaded Resting from the hotbar now uses the item rather than resting directly (should work with other bedroll mods now) Added a toggle for the minimap onto the hotbar You can no longer rearrange hotbar actions while the hotbar is locked (except within the skills panel) Added a faint blinking animation to the health bar when B/H have 1 turn or less remaining Added an option to show level next to character name in the top healthbar (on by default) You can now unbind hotbar action buttons with middle-click Added handling for when hotbar actions are removed from a save (ex. disabling a mod that adds them) Brittle status now shows its calculated damage like DoTs Masterworked items now show a warning in the tooltip Changed Splintered Arrow icon Fixed Escapist being a huntsman skill Fix protruding hotbar texture on the bottom bar Fixed Trickster's Repertoire removing AP in consecutive turns Trickster's Repertoire no longer activates while playing dead Fixed artifact names not using the new color (oops) Moved the casting notification slightly up so multiline ones don't overlap the health bar Fixed dragging items onto the world not working if the hotbar was enabled Fixed the add/remove rows button being available on summons after opening the pause menu You can no longer use hotbar action hotkeys in dialogues (or other occasions where the UI is entirely hidden), when there is a UI element focused, or when the game is paused Fixed name of hotbar slot 6 binding in the input menu Fixed Slowed 3 AP penalty stacking v1029 (06/08/21) \u00b6 Moved the casting notifications to where your health bar is, and added a toggle for them in the settings (defaults to enabled) Toggle party link hotbar hotkey is now instant (no casting animation) Added a one-row layout to the hotbar actions bar, which is automatically used when you only have one row of skill slots active You can control the behaviour with the new hotbarHotkeysLayout setting: \"auto\" is the behaviour described above, \"single\" makes it always use the 1-row layout, \"dual\" forces it to always be two rows (like how it was before) Keyboard hotkeys remain functional at all times, even if the buttons are hidden Fixed \"c\" displaying on the hotbar button you're dragging DoT statuses now show their calculated damage The display fluctuates for a bit after a skill cast, might redo this entirely later to not rely on the engine damage formula Centurion Battlestomp can now only be cast if the target is at <10m, and does not consume the ranged charge Tried banishing the \"Enemy Turn\" message again v1027, v1028 (30/07/21 and 31/07/21) \u00b6 This patch contains numerous fixes and the first part of the rework of hotbar hotkeys. Happy birthday Derpy! Replaced the tutorials tab in the journal with a patch notes tab See EpipPatchNotes.lua for an example on how to use this in your own mod. Artifact tooltips now show \"Artifact\" as rarity rather than Unique Hotbar Updates Added customizable hotbar action hotkeys/buttons. Drag and drop to rearrange/assign them, right click to bring up a list of all actions. Mods can add their own actions very easily; see HotbarActions.lua for an example. To use them with keyboard keys, assign the \"Hotbar Hotkey #\" keys from the game's controls menu. Rebinding them will be easier in the future. You must also enable them within the config file. This rework is a work-in-progress, both in terms of functionality and art; in the future there will also be a 1-row layout. The multihotbar is now enabled by default. Set \"disableHotbar\" to true in the config file to disable it. (the old setting now does nothing) Deprecated the Infusion and Meditate hotkeys; please use the hotbar version of them from now on. Summons can no longer add hotbar rows All the custom elements should now hide during dialogues Fixed jankiness when using low resolutions Fixes Fixed player status bar sometimes clipping through portraits and appearing to the left of them Fixed stat adjustments tooltip not working properly on resists Fixed stat adjustments tooltip eating up all other boosts Fixed boss frame in the enemy health bar UI. It should work consistently now Leper rune now should properly grant the talent when it's socketed into an equipped item Fixed being able to infuse out-of-turn with the hotkey (rest in peace gigabrain infused reaction builds) Possibly disabled turn notifications on the hotbar health bar Known issues \"Actions\" drawer (attack/sneak/sheathe) does not work well along with the default keyboard hotkey, and the menu is not repositioned Buttons on the hotbar don't yet light up like they do in vanilla Order of actions in drawer is random Some hotbar buttons do not have state animations yet The title in the patch notes menu will not be the right color the first time after a reload v1025, v1026 - THE GREAT INTERFACE UPDATE (06/07/21) \u00b6 Many UI quality-of-life changes, as well as features for modders. The UI changes were untested on controllers. Most will not apply (status wrapping works, but reverts the frames to the square ones). The character sheet now displays physical and piercing resistances The health bar when you hover over an enemy now shows B/H, with the icons lighting up when you have enough stacks for a T3. If you hold shift, the resistance display is replaced by AP, SP and Initiative info. Special thanks to Elric for the new art assets! The B/H statuses are now hidden in that UI, to reduce clutter. Added hotkeys for Meditate, Source Infusion and toggling additional hotbars. You can bind them from the game's normal controls screen. The hotbar hotkey allows you to temporarily toggle the additional bars from the multibar feature, explained below. You can dismantle non-uniques from your inventory by right-clicking them and selecting the new Dismantle option at the bottom (work-in-progress, can get \u2018stuck' sometimes; simply use it again on another item and both should be dismantled) Presets in character creation now support descriptions (see the modding section on how to add these; Derpy's mod soon will) \"Stat Adjustments\" in tooltips are merged into one line Skill and item tooltips now reflect the +1ap costs from Slowed III (using items is still bugged; I'm pretty sure that's en engine issue) The health bars at the bottom now always show their values (no need to hover) Added a new stats tab in the character sheet with EE-related stats, like reaction charges and missing regeneration. Will also show your keyword activators and mutators. You can expand/collapse the stat tabs by left-clicking them. The player portraits on the left now wrap their status displays onto a second row once a character has >6 statuses. Each row tries to maintain an equal amount of statuses (they never wrap onto a third row). Unfortunately, to make this work I had to hide summon statuses there. You can still see them in the middle of the screen or on the tooltip of their portrait. I might be able to remedy this in the future, it just needs more research. Summon portraits will be shrunk once the player's statuses wrap. You can disable this in the config file. Added a work-progress multihotbar; you must enable it from the config file in Documents\\Larian Studios\\Divinity Original Sin 2 Definitive Edition\\Osiris Data\\Config_EpipEncounters.json (it will be generated on first load). I don't promise any stability at the moment. Multiplayer is untested. You can add up to 4 extra bars, and reorder them. Multihotbar layouts are synchronized to the host (savegame) every 8 mins. The first time you load a save with the setting active, you will have to manually switch all characters to the first hotbar row before the multihotbar will be enabled. This is to circumvent a crash. You will only need to do this once per playthrough (and anytime you disable and re-enable the feature) If the extra rows get in the way, remember there is a hotkey to temporarily toggle them. Known issues with the multihotbar: Resizing window does not update the health bar position properly, neither the bars The extra rows will not show icons if your resolution does not have space for all 29 slots in a row You can click outside of the bar to the right to select slots from upper rows In dialogues, you can still see the hotbar cycling buttons Combat log button positioning is not adjusted Fixes in this patch: Added SP refund to Reactive Shot tooltip Updated the infusion deltamod removal to use the new removal PROC (should be compatible with Derpy's deltamod additions now) Fixed Opportunist charge script after Amer's patch, and removed the patching procedure from the new versioning system (hopefully there are no more issues with this) Updated the GoTS script to work with the new basic attack script Fixed Leper rune having old Incons (this might not be retroactive) Added the AP penalty to Slowed III tooltip No clue how to do so for the journal Updated Horrid Wilting SI reaction script The modded centurion activator now mentions the 1 ranged charge Thirst accumulated AP is now lost on death or combat exit For modders: Added Utilities.lua, a table which contains helper methods for adding features in way that is compatible with multiple mods, and some UI helpers Can be accessed with Mods[\u201cEpipEncounters\u201d].Utilities Calls to its methods are not persistent, and you must always make them when the lua engine loads, before the StatsLoaded / SessionLoaded events. In other words, call its methods from the main lua body, not from any listener. AddArtifactToTreasure() has been moved here. Added AddSkillbook(), which functions similarly to the previous method and adds a skillbook to a trader table. Params are the item id (without the I_ prefix that you'd normally use for tables) and the school name, as it appears ingame (capitalized) You can modify the characterCreationPresetDescriptions subtable to add descriptions to the presets in character creation. The table is commented with the preset that corresponds to the index in the preset selector. No documentation currently exists for the new stats tab, but do let me know if you want to add your own mod's stats to this panel. Added GetConfig(), which retrieves a json config file for your mod. Takes two params: the suffix of the config file, and a table containing its default values, for patching old configs with new settings Known issues: Picking a talent will not update the new stats Preset descriptions do not appear until you switch presets at least once Changing name in character creation causes the skills to disappear (fixed by changing tabs) Dismantling from right click can get \u2018stuck' on some items - this can be fixed by dismantling another one. Character creation spits a few errors on startup, these are completely harmless (some element is not yet initialized at that point, unsure which one) New stats fail to update when starting a new playthrough (harmless) With multiple controlled summons, the gap between their portraits changes when you switch between them v1020 (25/04/21) \u00b6 Boneshaped Crusher now has All-In Removed Incons from talent menus and characters that had it; you will be refunded Talent Points for characters that had it. Special thanks to Focus for the UI editing help. Leper now grants Trickster's Repertoire instead of old Inconspicuous Ending combat with the new incons now automatically unsneaks Added (hopefully) all the text changes that were missing (infused reactions, artifacts, some talents) Reactive Shot SI3 refunds 1SP Added descriptions of the Epic Enemies effects to the condensed tooltip (thanks Derpy) Presence mutator from Epic Enemies now grants all Presence effects The custom loading screen is now toggleable, and off by default. To re-enable it, edit EpipEncountersConfig.json in Documents\\Larian Studios\\Divinity Original Sin 2 Definitive Edition\\Osiris Data For modders: added a function to safely add artifacts to the ST_AMER_UNI treasuretable. Simply call Mods[\u201cEpipEncounters\u201d].AddArtifactToTreasure(statsID) (ex. AddArtifactToTreasure(\"UNI_AMER_Abyss\") ) before the StatsLoaded engine event. You can copy TreasureTables.lua into your mod to use it, if you don't want to have Epip Encounters as a dependency. If I implement more helpers like this, I'll split them off into their own mod. Fixed opportunist script not running Fixed Chthonian not appearing as a status on Epic Enemies Fixed Greatforge item validation breaking Warning for other modders: if you're overloading an existing query with Lua, do not do so directly from Ext.NewQuery(), as there is no way to define queries that expect specific params. This causes issues with negating queries. Instead, create a wrapper query in osiris that uses NRD_ModQuery. v1010 (17/04/21) \u00b6 Note: you will need the latest EE update (the one for modders) for the text changes to work properly. Also, you will not see the usual \u201cEpip Encounters has been updated\u201d message as the normal EE one will show up instead. Break the Shackles cleanses dazzled Inconspicuous rework, as a rework of Master Fletcher (now named Trickster's Repertoire): You sneak and become invisible for free at the start of combat, until the end of your first turn. At the end of your turn, sneak for free. At the start of your turns, if you were sneaking from this effect, you stop sneaking. Additionally, your special arrows count as basic attacks and you have a 33% chance to recover a special arrow after shooting it. Old inconspicuous remains available. At least for now. Apotheosis SI3 is now exclusive from the previous SIs, but lasts until your source gen depletes Escapist skill costs 0AP, has 5m range, up from 4m Opportunist grants 2 free generic reaction charges, up from 1 Added a tutorial for when you get an infused reaction node for the first time (kekw) Executioner grants 2 AP, up from 1 Charity is now once per round per character, rather than once per round Added meta skills to print SP and resistances Added correct text for most changes (ascension, artifacts and executioner are still missing) Fixed using Clouded Memories from bags not consuming them Fixed finesse recovery for weapon-based skills activating per-target rather than per skill cast I'm surprised no one tried whirlwind while this lasted Fixed Prototrophize not granting SP when under infinite SG It will still extend SG when you're at max sp. I'm not sure what the behaviour should be in that case. v1001 (3/04/21) \u00b6 Fixed Drill Sockets merging damage types for weapons Fixed permanent Prosperity keyword from Hothead talent - loading a save will recalculate your legitimate sources","title":"Patch Notes"},{"location":"patchnotes/#changelog","text":"Older versions of the mod can be found here .","title":"Changelog"},{"location":"patchnotes/#v1065-070523","text":"Requires extender v59+. Standalone usage warning If you have the Improved Hotbar mod, you must disable it to use Epip . All of its functions are already in Epip (+ like 9 months worth of updates that the workshop mod never got). See the front page and the changelog if you're new to Epip. Download here . With this version, EE has been removed as a dependency. It's now possible to use Epip in a non-EE playthrough and the main features will work. There may be quirks that need ironing out, ex. references to features or settings that only make sense in EE - please report these. This also means that the remaining gameplay changes have been removed. If you wish to keep them, use this mod . The following patchnotes are the merged patchnotes of all beta versions of the patch, excluding the April Fools one. By the way, due to logistics changes, you will have to re-enable immersive meditation in the settings, if you had it on. Animation cancelling now has 2 modes: client-side (v1065 behaviour) and server-side (old behaviour). The server-side option uses the lower delay that was used previously. Changed how hotbar row count and visibility is saved This might not work in multiplayer due to extender shenanigans Custom status UI elements are now bigger (ex. in Quick Examine) Added a new rune crafting system; simply right-click a rune material and select the new option in the dropdown menu to get started. Reworked the stats tab; should be less prone to bugging out in multiplayer now Also fixed the gold & splinter stat The incompatible mods warnings now show on every load, rather than once per playthrough Updated localizations and added Brazilian Portuguese, translated by Ferocidade Character sheet skew during anniversaries is now less extreme Removed the \"cinematic combat\" option Fixes: Fixed some log spam related to status icons Fixed hotbar loadouts not working Non-english languages should no longer have broken artifact descriptions The cause was fetching the TSKs during module load, which causes a bug that overwrites the string. Fixed Quick Examine not being openable for the same character twice in a row Fixed vanity dyes not applying to slots that vanilla armor (without transmog) would hide/mask Fixed error if an item was transmogged into a template that no longer existed Fixed a typo in the settings to fix Astrologer's Gaze tooltip On the technical side of things: Added ActionReleased event to Input library Added GetIcon() to BatteredHarried library Added GetLevelID() to Entity library Largely decoupled the logic for custom keybinds away from the UI itself (onto InputLib) Added EpicEncounters.DeltaMods library with dynamically-generated data about EE deltamods Added DragDropStateChanged event to Pointer lib Equipped artifacts are now tracked using UserVars instead of tags Generic: Added RepositionElements() to Grid Added Destroy() to UI instances Fixes and additions to PlayerInfo methods Moved various functionality from Feature up to its parent class Library (UserVars, ModVars) Fixed some warning spam related to status icons Various new checks to disable EE features when playing vanilla Fixed setting ID conflict issues in the settings menu Various fixes to debug cheats Reworked the doc generation script again; the doc appearance has changed considerably, and now supports hotlinking to functions Added support for multiple inheritance to classes made with the OOP library Generic UIs can be fetched by string ID now (oops) Added Character.Events.ItemEquipped Updated the Generic example script and documentation Net payloads now have methods to fetch the associated character and/or item Added Osiris.GetFirstFact() Added new calls to CharacterLib: IsOrigin() , IsPlayer() Small changes to annotations and rewrites of code that was using deprecated stuff Began work on a new cheats system and UI Added Client.IsCursorOverUI() and Client.GetActiveUI() Added Input.IsTextFieldFocused() Added skillstate-related methods to CharacterLib Reworked hotbar prepared/casting skill checks to not require server information Added Client.Events.SkillStateChanged","title":"v1065 - 07/05/23"},{"location":"patchnotes/#v1064-050323","text":"Download here . Requires extender v58+. Quick Examine improvements: Added display for AP, SP, and initiative Added resistances display Added numerous settings: opacity, width/height, hiding certain widgets. You can find them in a new tab in the settings menu Minor graphical touch-ups Added a setting to set the default position of the UI; this position will be used after reloading Added a statuses bar (toggleable) Added a light stroke to the resistances text Added a B/H display, with buffered damage towards the next stack Now shows your ally's skills and their cooldowns Tooltips will show the damage as if they were used by them, but Epip features (like viewing which source infusions are available) likely do not work properly currently Reworked the settings menu and underlying system Your previous setting values will be lost The settings menu is now separate from the vanilla UI, prevent conflicts with mods that may overwrite the vanilla one Settings have been reorganized into separate tabs Settings are now saved per-profile, in Osiris Data/Epip/{profile GUID}/ In the settings menu, the current tab's button is now highlighted (replicating vanilla behaviour) Reworked the settings menu to be more easily expandable and changed the appearance of settings Tabs with a large amount of options (ex. Epic Enemies) might suffer stutters while opening them, similar to Quick Find. This is an issue with the UI framework that will be investigated later. Added a new UI that shows a filtered view of the party inventory Opened with Ctrl+F by default (configurable in input menu) Can filter equipment by slot, consumables by scrolls/grenades/potions, and skillbooks by school Weapons and armor can be filtered by type (ex. sword, leather armor...) Equipment can be searched by their stat boosts (supports only vanilla modifiers for now) Right-click an equipped item to open the UI with filters set to that item's slot, to quickly replace gear Vanity internals have been reworked, with multiple changes as a result: Dyes no longer require deltamods and thus should no longer be lost to shenanigans or bloat the savefile Transmogrifying no longer requires the item to be transformed and therefore should no longer have any gameplay side effects As a result, you are no longer prevented from transmogrifying GB5 sets Transmogrifying weapons into another type (ex. dagger -> bow) will have them show in the proper location while sheathed Added an option to keep the icon while transmogrifying Fixed an issue with dyes not being loaded properly from oufits Added an option to hide any armor slot's visuals Due to an engine quirk, changing visibility is not properly reflected in the character sheet until you switch characters Removed support for vanity dyes from before v1063; items still using them will appear purple Added an \"Auras\" tab to Vanity, where you can apply visual effects to your character, onto various bones Added an option for animation-cancelling for player characters A new setting exists to blacklist skills from being affected. A more user-friendly way of adding entries will be added in a future version Added a setting that controls how character level is displayed in the health bar; defaults to current behaviour (below bar, when holding shift). Includes the option to hide the level entirely. Reworked the \"show minimap\" setting; should be more reliable now You can now drag + drop items onto the Greatforge socket \"Status effects\" in the vanilla examine UI is now capitalized, for consistency with the rest of the headers Began removing gameplay changes from original versions of Epip. Since the focus of the mod has changed over to UI and QoL, gameplay changes no longer make sense within the project, and impede it from being used without EE. Removed changes to Battle Stomp, Bless, Circle of Protection, Escapist, Siphon Poison, Summon Soul Wolf, Wolf Howl, Break the Shackles Removed changes to Elementalist damage Removed changes to Leper Reverted stat changes to Boneshaped Crusher and Soul Wolf Removed Sight and Hearing FlexStat entries Clicking a status on a player portrait or Quick Examine will now center the camera on the status's source (if any) \"Copy identifier\" keybind no longer copies template GUID Added Russian translation by Cathe & JoienReid Currently only spans the settings menu and some vanity features Since playing in non-English currently has certain issues with add-ons, a new setting has been added to display text from Epip in a language different than the game's. Level-up progress in character sheet is now shown with a percentage Added settings for disabling most of the tooltip adjustments Epip offers Surface tooltips should be more reliable Combat log improvements are now enabled by default Enemy health bar now uses a vanilla-ish appearance if EE is disabled (no fancy gargoyle boss frame) B/H indicators in player portraits are now only shown in combat (instead of when unsheathed) and are disabled if EE is disabled Removed the meme loading screen option Skill tooltips for zone-type skills no longer erroneously say their range is increased by Astrologer's Gaze Fixes: Fixed icons on the minimap flickering Fixed layouts being saved for summons and party followers Layouts should now be synchronized better in multiplayer, and survive a lua reset Layouts now save when the pause menu is opened, rather than when the game is paused (which basically never happens in multiplayer) There's probably a dozen other features that made this mistake; they will be fixed in the future Fixed the \"points available\" blip in the character sheet not being hidden when within vanity, if you had a lot of tabs registered Fixed the draggable area of Quick Examine being smaller than intended Fixed QuickExamine not being draggable all the way to the right of the screen Fixed the \"Epip Settings\" button not appearing on all tabs of the vanilla settings menu Fixed Trickster's Repertoire unsneaking characters that do not have the talent Fixed developer-only settings being visible outside of developer mode Hotbar: fixed hotkeys settings being deleted in some cases Disabled the save/load improvements during game over to fix a softlock (no known workaround) Fixed tooltips of player portraits and XP bar not working properly Due to engine jank, these will not be affected by the delay settings Fixed engine actions (attack, flee, etc.) being draggable to hotbar hotkeys Fixed some small visual bugs with the enemy health bar Fixed some small visual issues with custom item slots in UIs Fixed some console log spam Fixed hit chance not displaying when hovering over characters in combat Fixed some items being grayed out in hotbar groups Fixed \"immersive meditation\" and other EE UI features not working for characters that have been transformed Fixed unique items being dismantle-able with \"mass dismantle\" Fixed item context menus being misreported as character menus if you hovered over a character recently Possibly fixes the issue of options like \"mass dismantle\" not appearing The \"infinite carry weight setting\" should now work properly for clients that join mid-session Other features that face problems in multiplayer are possibly suffering from the same bug and will be fixed in the future Fixed transmogged helmets not being toggleable from the character sheet UI Fixed \"revert appearance\" in vanity not working properly On the technical side of things: Added an Image library with PNG decoding Added ImageViewer feature, intended for displaying results of images decoded with Image Improved reliability of Client.GetMousePosition() (replaced with Ext implementation) Added a Set data structure Added Vector.ScalarProduct() Added a Color element to Generic Added ClearElements() to Generic's Grid Added SetVisible() to Generic elements Added Set and Map settings types Added a debug hotkey for copying the pointer's world position Added a Interfaces library for common interfaces Generic: fixed ScrollList not supporting centering of elements Generic: added LabelledIcon prefab QuickExamine: added Widget interface StatsLib: added data of immunites TooltipLib: added support for status tooltips QuickExamine: split up some parts of BasicInfo into separate widgets Generic: fix downsizing IggyIcon Generic: added a Status prefab, for displaying status effects TooltipLib: added ShowStatusTooltip() Moved various functionality from EnemyHealthBar to a feature (EnemyHealthBarExtraInfo) Fixed TextLib's Format() not accepting decimal text sizes Added a setting to simulate EE being disabled (applies to Epip scripts only) Removed checks for Improved Hotbar mod Added an event for statuses being applied to CharacterLib Added a feature to generate Osiris event annotations for lua The IDE annotations folder in Epip has been updated to include them This might be expanded to support PROCs and QRYs later Added an OOP library for working with classes Feature now supports registering and fetching class tables in an elegant manner Started splitting up Feature into 2 classes to fix interface segregation violation Fixed OsirisLib calls not working with 0 parameters Various script cleanups (mostly for Hotbar and EnemyHealthBar) Added TSKs for older settings Changed TSK integration in Feature: the keys are no longer required to be a handle; they can be any string, letting you index the TranslatedStrings table with auto-completion TSK objects now have a GetString() method to resolve them TSK table within Feature will be deprecated soon Added a feature to play client-side effects upon hovering over entities Added libraries for EE-related mechanics (BatteredHarried, SourceInfusion), and moved relevant methods to them Fixed Character.GetEquippedItems() not returning the advertised type Added a DatabaseSync feature for synchronizing database contents to the client Might be merged into the osiris library in the future Added a UserVars library, with Feature integration Added support for function signatures without bodies to the doc generator, fixed subclasses not being detected properly Added methods related to drag-drop to PointerLib Generic: Moved annotations to separate file, solving various IDE warnings Added support for tweening Fixed Stats.MeetsRequirements() not working with attribute requirements Added ShowItemTooltip() to Tooltip lib Generic: The HotbarSlot prefab is a now more general-purpose inventory-like slot, showing rarity, rune slots, and with options to block drag-and-drop Fixed culling issues with IggyIcon Added support for scrollRects ComboBox events now throw their option ID instead of just index Added SetChildIndex() Removed swf overrides for textDisplay and notification UIs, as well as cleaned up their respective lua scripts Fixed error messages from using keys the game doesn't support (ex. media keys) Added annotations for basic stats objects Added AMER_Loot_CallistoAnomaly icon - special thanks to Elric Fixed UserVars not synchronizing Fixed GameState.IsLoading() not working Various changes to annotations Features can now declare which game states they should be enabled with, which will cause :IsEnabled() to return false under unsupported states Rewrote Osiris table. Tuples returned from DB queries are now an object and it's possible to distinguish DBs/QRYs with the same name but different arity Rewrote Item.GetEquipmentSubtype() to be a lot more reliable, and fixed it failing to identify clubs Generic: added the Texture element Generic: added more prefabs for \"form elements\", and added inheritance to them Unsubscribing event listeners with an ID that is not subscribed no longer triggers a warning Added IDE annotations for the global Ext functions (like _C() ) Added a \"DefaultTable\" data structure (inspired by python's defaultdict; a table with a default value when indexing) Removed UI override for the settings menu (LeaderLib menu might work now? no promises) Debug menu now supports fiddling with the UI scripts to an extent Osiris table now parses parameters for DB set/delete operations InputLib: added methods to fetch game input event definitions and bindings The ancient script previously used to do this has been removed, along with some other redundant ones Improvements to the doc generation script (which shall debut here soon); it can now export \"subclasses\" of a class (the auxiliary data structs) Added a generic developer input binding for hooking quick tests onto it TooltipLib: added a way to render custom formatted tooltips TooltipLib: added a method to render skill tooltips, as if the engine were doing it Minor cleanups of some scripts Fixed iggy icons in Slot elements being culled out for Generic UIs Added methods to check if a component is an item/char to EntityLib You can now specify a player index when using methods in PointerLib (though I do not know in which scenario multiple pointers can exist; splitscreen co-op perhaps?) The localization system now supports contextual metadata for ease of translation, and integration for it has been added to the Feature table You can define TSKs in TranslatedStrings and query them by indexing TSK within the feature TSKs defined this way support aliases that are valid only within the context of the feature, preventing collisions Added a python script to import/export Epip translation files in Mods\\EpipEncounters_7d32cb52-1cfd-4526-9b84-db4867bf9356\\Story\\RawFiles\\Python\\localization.py Added GetTurnOrder() to Combat library Added Client.WorldPositionToScreen() Improvements to doc generator script: Added support for net messages Better support for hooks/events Private methods are now hidden Symbols are now sorted by context (first Shared, then Client, then Server) Can now be used externally (importable) Added support for overloads","title":"v1064 - 05/03/23"},{"location":"patchnotes/#v1063-190922","text":"If \"Unfocus after sending messages\" is enabled, holding shift while sending a chat message will keep the chat focused Fixed settings not saving if you didn't visit the camera settings tab On the technical side of things: Added operator overload annotations for RGBColor , Vector Vector.Create() accepts an existing array as a parameter (only one) Added TSK-related methods to Text This includes a localization system for strings in scripts; you can generate templates for localizing with Text.GenerateLocalizationTemplate() and they will be loaded from Mods/MyMod_MyGuid/Localization/Epip/MyTargetLanguage/ModTable.json , where ModTable is the mod table whose strings you've localized using the template Support for this within Epip will be added throughout future updates; currently only some camera settings support this You can generate fresh GUIDs or TSK handles with !guid and !tskhandle commands (on client context); they'll be copied to the clipboard","title":"v1063 - 19/09/22"},{"location":"patchnotes/#v1062-160922","text":"Surface tooltips with an owner now show a hint regarding how the damage scales \"Active Defense\" statuses (ex. Empyrean Tears) now show remaining charges EE rune materials now show how to use them to craft runes Added a setting to configure the delay of simple tooltips appearing This affects tooltips of items in the world, as well as label tooltips in UIs (these 2 types are individually configurable) Added a settings tab for camera settings You can change the maximum zoom out distance, as well as the view angles Items in the quest reward screen now show a hint regarding modifier generation Added new Greatforge graphics for Engrave - special thanks to Cathe and Elric! Fixed a vanilla bug with the character sheet that caused the second ring slot to not play equip animations Additionally, the graphics involved should now be better centered Re-added the option to auto-unlock inventories Changing the lock status should also be synched better now - the vanilla game seems to struggle with this leading to the changes often not being properly reflected in other player's UIs Fixed weapon range deltamods only considering the first deltamod of that kind found This same fix is applied for weapon elemental damage mods as well On the technical side of things: Replaced Client.GetCharacter() implementation with a new one from v57 that doesn't rely on any UIs. Let me know if something character-involved breaks as a result (though I haven't experienced any difference). Added a Camera library Added an Entity library, with shorthands for GetGameObject() and functions to get all characters/items on a level Added limited alpha support to RGBColor (I don't think alpha is used anywhere in scripting though) Item.GetIcon() is now fully reimplemented following engine code Stats library now also holds dynamically generated data of runes, except framed ones Tooltip library now supports item tooltips and simple tooltips (the usual showTooltip call), and offers additional contextual data (ex. skill ID for skill tooltips) Started work on a new UI-independent settings library with per-profile settings support; not yet used","title":"v1062 - 16/09/22"},{"location":"patchnotes/#v1061-40922","text":"Added new settings for world item tooltips: Emphasizing containers, consumables and/or equipment by changing their color This setting will not work for items that would result in a crime upon interaction; they will remain red. Enabling world tooltips for all items (similar to the \"Let there be tooltips\" mod) Filtering out clutter (particularly the one added by the setting above): chairs, doors, non-interactable items Option to open containers upon clicking their tooltip, rather than picking them up Added an option to exit the chat UI after sending a message (so you don't need to press escape manually) Added an option to disable notifications for sharing civils (\"X shares Loremaster/LC with Z\") Searching saves is now case-insensitive Added a ping counter to the debug display Since the server only responds to net messages once per game tick, the counter will basically always show around 33ms in singleplayer Fixed \"Show empty containers/bodies\" not actually working on items Fixed another case of an infinite loop of switching characters Fixed the \"toggle world tooltips\" keybind not working (+ crashing the game) Fixed some character sheet tooltips appearing in the vanity UI On the technical side of things: Osiris library now converts boolean values to integer in calls Added HasFlag() , IsContainer() to Item library Added initial groundwork for an inventory expansion","title":"v1061 - 4/09/22"},{"location":"patchnotes/#v1060-30922","text":"Added a better frame for the hotbar health bar, and shadows for the AP bar (thanks Elric) Added a keybind to bring up the examine UI (the real one) Added all engine actions (the ones you see in the controller UI) to the hotbar actions drawer (the vanilla one, bound to X ), except for flee Reordered some keybindings Added \"Let there be tooltips\" to the list of EE-incompatible mods Fixed character-specific context menus appearing on items Fixed the save/load overlay not disappearing in multiplayer when the UI is closed Fixed a possible edge case with walking over corpses in combat that would result in the corpse not being lootable after combat Fixed the dragging area for the debug display being too large Fixed an issue with character control switching rapidly Fixed hotbar tooltips not showing keybinds Removed the \"Special Binding 1 & 2\" keys since they are no longer used On the technical side of things: Added data for all InputEvents to Input as well as possibly the world's biggest alias Added an IO table Began modernizing the context menu APIs Added a Pointer library, currently deals only with Ext.UI.GetPickingState() -related matters Added table.lua and math.lua containing the extensions to the respective built-in tables RGBColor creation now clamps the color values Implemented __eq, __add and __sub for RGBColor Various fixes for outdated/clashing IDE class names Fixed an infinite loop when using the default buttons for MessageBox Added a table for combatTurn UI Unfortunately this UI does not appear to hold any character handles, making it not very useful.","title":"v1060 - 3/09/22"},{"location":"patchnotes/#v1059-290822","text":"Fixed an issue with using items in hotbar groups after reloading Fixed item amounts displaying incorrectly in hotbar groups Fixed an issue with the unlearn skills prompt appearing while the UI is closed On the technical side of things: Added \"Actions\" (ground attack, sheathe/unsheathe, etc.) to the Stats library","title":"v1059 - 29/08/22"},{"location":"patchnotes/#v1058-290822","text":"Versions from this one onwards require extender v57. New features: Consumables like food and mushrooms now show their effects by default; there's no need to eat them once for them to appear in the tooltip Added a setting to enable infinite carry weight You can now right-click skills in the skillbook while out of combat to unlearn them Added a keybind to toggle world item tooltips (so you don't need to hold the alt key) Surface tooltips now show their owner (who the surface damage scales from and who owns its applied statuses) Added a setting to disable the \"Item Received\" notifications Added a setting to allow viewing the character sheet while in the quest rewards UI; this lets you compare your equipped items with the rewards. Vanity: transmog and dyes no longer require items to be re-equipped, making it overall faster to try on different looks Added an option to hide empty corpses/containers from the world item tooltips (the ones that appear from the alt key) Added a setting to allow you to walk onto corpses while in combat without looting them. You may still loot them while holding shift. This setting is enabled by default. The fix to character control being lost upon creating new summons now also applies to having your summons be killed Added an option to play a sound effect when a chat message is received, so they're easier to notice Empowering items now properly scales their armor values, but this will only take effect after a reload Fixed the vanilla bug that prevented you from using items in certain conditions if you had +AP Cost effects Added a keybind to scroll the fancy item/skill tooltips ACTIVE_DEFENSE statuses (ex. Empyrean Tears) now show max charges in the tooltip Holding shift while moving in combat now shows approximate decimal AP costs Status tooltips now show if they were applied by an equipped item Fixed the tooltip color for effects that alter AP costs. They now display in green if they reduce AP costs, and red if they increase them. The custom input menu has been reworked to use new extender tech; all keys supported by the game are now bindable, including modifier keys like alt/ctrl. Your previous bindings will be wiped upon updating. Added new modifier keys to cycle bars on the hotbar: ctrl cycles 3rd bar (from bottom), alt cycles 4th one, gui (Windows key) cycles 5th one Added an \"Engrave\" option to the Greatforge which lets you rename items. This is purely visual. It does not currently have a custom graphic. It will appear as another \"Drill Sockets\" in the Greatforge wheel. Minor visual adjustments to QuickExamine The Epip settings menu is slightly more organized now Added more mods to the incompatible mods warning: DU, Greed, Multihotbars Hotbar: Slots can no longer be used while holding modifier keys. This means you can use shift/ctrl/alt + number keys as a custom keybind without it interfering with the hotbar. Fixed loadouts not saving empty gaps inbetween slots You can't cycle hidden bars anymore Added custom slot groups. Right-click a row on the hotbar to create one. These are shared across all your characters. Right-click them to delete them. Known issues: Items there do not display tooltips yet Fixes: Fixed tooltips for Vanity tabs Fixed negative status effects displaying wrong ever since GB5 Epip's artifact tooltips (in Quick Examine, stats tab, etc.) now have a period at the end of them Hotkey to exit Meditate is now escape, instead of escape / right-click. Fixed action names on the hotbar buttons Fixed some character sheet tooltips appearing while in the Vanity menu Stuff for developer mode: Added a keybind to copy identifiers (GUID for chars/items, stat ID for skills) of the object over your mouse Added a settings menu to change Data.txt values ingame. Most of them apply instantly / upon character stat recalculation, but some may require a session reload. Talents show their IDs in tooltips The cheats context menu now lets you add talents Added an option to enable a widget that shows FPS, TPS, and relevant mod versions Added a keybind to open a debug menu from which you can toggle debug mode on features, disable them (or their logging), and run tests (a new feature of the Feature table) On the technical side of things: Osiris library now supports built-in symbols (calls and queries) and extender objects are converted to their GUID when being passed Added a Vector library (with some cool arithmetic operator overloads) Added a new tooltip library (WIP), advantage include preventing tooltips and manipulating surface tooltips, viewing source UI of a tooltip SubscribableEvent nodes can now be removed based on a predicate function, and preventable events are supported Fixed some log spam related to the hotbar Added groundwork for the Epip Housing(TM) feature Slight modernization to Net library: the payload is now passed as the first parameter, and IDE hints are available by defining the net msg as a class with the payload's table fields Timer lib is now available on the server, and a tick-based timer option has been added, as well as option to repeat / pause them Added a better coroutine table with sleeping (either for X seconds, or until a condition is met) Added a new Epip.RegisterFeature() call which can keep track of the source mod of a feature Added a new Input library using v57 RawInput Added more hooks to CharacterSheet UI in preparations for custom talents 2.0 (and other stats) Added ExtraData tables to Stats library Added PartyInventory hooks Removed numerous archaic/unused scripts, like the custom talents ones GenericUI: Added more bg options for TiledBackground Added new elements: Slider, Grid Events now have proper IDE support, and no more issues with inheritance Element creation now has proper IDE support, if you instantiate elements using their class name Added more position-related calls Element visuals now use string IDs, and unused visuals are set off-stage (less possibility for jank) Fixed button size issues Removed minimum size for black background Fixed stack overflow issue with lists Added support for skill tooltips Fixed issues with MouseUp on the slot element Changed mouse events to use the roll ones Added proper support for prefabs, with the following implemented: Spinner Text (offers simpler initialization of Text elements) HotbarSlot (with many improvements to bring it closer to hotbar behavior) FormHorizontalList LabelledCheckbox LabelledDropdown LabelledTextField","title":"v1058 - 29/08/22"},{"location":"patchnotes/#v1057-260722","text":"Fixed the annoying issue of control being switched to new summons in combat while it's still your turn Crafting UI now remembers your last tab (equipment/consumables etc.) Added a setting to set the default tab for the crafting UI The hotbar now shows a warning for unmemorized skills, as well as skills from items that have been unequipped Fixed some changelogs ingame not showing up Added an option to enable some improvements to the save/load menu: alphabetical sorting and search. The search bar supports lua patterns and is case-sensitive On the technical side of things: The hotbar updates periodically again to fix some issues, and should no longer break completely when a single slot/action fails to render","title":"v1057 - 26/07/22"},{"location":"patchnotes/#v1056-220722","text":"Stats Tab: Added Voracity stats Added Artifacts Quick Examine now shows Artifacts for your allies as well (useful in multiplayer) Vanity: added support for \"Visitors from Cyseal\" mod, though the mod currently appears to have some issue with replacing some item icons Fixed a freeze with Immersive Meditation Fixed another grey out issue with the hotbar (skills with weapon damage but no weapon requirement) Fixed the category weight sliders in Epic Enemies not being saved Fixed the \"Show Minimap\" option appearing twice in the options menu Fixed some issues with controllers Skills show their IDs in tooltips in developer mode On the technical side of things: Added StopPropagation() to the new event table Added a wrapper for checking developer mode, with an option to use an additional check; WIP and testing features will be locked behind it, meaning the rest of the features (like the cheats menu) can be used without problems Added a few new utility methods Started work on further giga brain hotbar improvements","title":"v1056 - 22/07/22"},{"location":"patchnotes/#v1055-200722","text":"Added an option to reduce the opacity of the player status bars while in combat Vanity UI now closes when you go into combat Status tooltips now show source (if it's a character) Re-added the hotbar actions drawer (the one with force-attack / sheathe / sneak) Added a Vanity action to the hotbar Added new Combat Log filters: critical hits and dodge Status tooltips now show ID and Type while in developer mode Added embodiments to the stats tab Read books and used keys now show a label in their tooltip (not retroactive) Fixed Max SP check being inaccurate on the enemy health bar Added new divider sprites for the player health bar Player health bar now shows maximum SP, and the SP counters are centered Fix item use cost not being considered while greying out slots on the hotbar Fixed consumable items not greying out properly in the hotbar Fixed hotbar issues with Luminary, Musketeer mods Temorarily removed the option to auto-unlock party inventories due to crashes in v56 from sync rewrites On the technical side of things: Removed more log spam from Hotbar/Input Moved a bunch of tables around, removed archaic scripts/global functions Added some Larian colors to the Color table Added an icons enum to Hotbar More work on the new UI system: event listeners, Slot element Added GetExtType() for checking the type of an extender object Added GameState table Started transitioning to using a better event system, using a modification of the v56 SubscribableEvent table Updated IDE helper files","title":"v1055 - 20/07/22"},{"location":"patchnotes/#v1054-130722","text":"Added a \"Quick Examine\" UI. Currently it only shows the Epic Enemies perks characters that have them. It is invoked by a keybind while hovering over a character; default is v . You may use the lock button to prevent its selected character from changing whenever you hover over a new one; if you do that, you will need to press the keybinding manually to change targets. You can drag the UI around by holding down left click on the upper part (the one with the character name) Artifact powers in Epic Enemies now have descriptions Hotbar now greys out unusable item skills (ex. arrows) Switching characters or clicking slots on the hotbar now attempts to fix desync issues (the one where your clicks go to the wrong rows) Fixed a freeze when using a controller Temporarily removed the Awesome Soccer minigame On the technical side of things: Added a new lua-based UI system; currently supports backgrounds, text, buttons, state buttons, the common list types (vertical, horizontal, scrolling), dividers, and icons","title":"v1054 - 13/07/22"},{"location":"patchnotes/#v1053-070722","text":"Added an option to show aggro effects on the top health bar: taunt source/target as well as AI preference tags Centered the AP orbs on the bottom health bar, and added special dividers every 4 AP Pipmode no longer gives infinite AP to non-player characters Added a cheat to apply statuses Reworded +elemental damage tooltips on weapons Fixed offhand items not auto-transmogging properly Fixed some summons still getting Epic Enemies perks, as well as party followers Fixed skills that require shield not being greyed out while muted Hotbar: Loadouts are now sorted alphabetically Added a setting for disabling slots while casting Fixed occasional flashing for slots on cooldown Fixed hotkeys being blocked if any controlled char is in dialogue On the technical side of things: Added better annotations for UI/Feature tables (works with inheritance now) Added wrapper calls to get/set stats regardless of whether they're actual stat objects or the special types (DeltaMod, TreasureTable, etc.) Moved RemoveTrailingZeros() to Text Reduced some extender log spam from stats Fixed warning spam when enemies were preparing skills","title":"v1053 - 07/07/22"},{"location":"patchnotes/#v1052-050722","text":"Epic Enemies: Reworked the Epic Enemies feature. It is now configured through the regular settings menu, not the EE one. If you're continuing an old save, the options in your EE menu will remain, but they will no longer do anything. The amount of effects enemies gain is now customizable The weighted chance of each perk appearing can be customized individually - it's also possible to adjust the chances for whole groups of effects at once (ex. all Centurion effects) All artifacts can now be made available to enemies Effects with conditional activations are supported, and can grant a variety of other perks (statuses, stats, summons, etc.) though there are no new effects that use this yet - new content will be added soon Hotbar: The \"active skill\" animation on the hotbar should be more reliable now (and no longer appears if you click spells in the spellbook) Fixed shield skills not greying out when disarmed On the technical side of things: Removed the infamous empty net script Cleaned up script loading on the server Generated new IDE helpers for built-in v56 types OptionsSettings UI now has less thicc text labels so you can actually write stuff there without taking up the whole screen Known issues: Artifact effects in Epic Enemies have no descriptions (text keys are really unreliable apparently) Switching tabs in the Epic Enemies settings menu scrolls you to the top Epic Enemies no longer gives extra Predator range","title":"v1052 - 05/07/22"},{"location":"patchnotes/#v1051-280622","text":"Small bug fixes, and a moderate QoL addition for vanity dyes. Added Ctrl+C/V support to the dye tab text fields Fixed Epic Enemies tooltip (thanks Pancarte) Fixed outfits ignoring transmog restrictions Fixed vanity dye slider text values sometimes not moving around Fixed items transmogged into artifacts gaining the special tooltip color (this will require an EE Core update to fully work) On the technical side of things: Cleaned up MessageBox","title":"v1051 - 28/06/22"},{"location":"patchnotes/#v1050-260622","text":"A small assortment of huge vanity improvements! Vanity: Added a button to delete custom dyes Switching characters no longer closes the UI The current tab is remembered when switching items through the context menu Added a toggle to prevent the sliders from being set to the item's current color (makes it easier to reuse a dye on multiple items) Added fields to enter colors in hexadecimal Added buttons to copy/paste colors Added buttons to import/export dyes to/from the clipboard Sliders can now detect the default color of an item that hasn't been dyed before Added a checkbox to auto-transmog equipped items to your old item's appearance while the UI is not open (so you can switch out items in the UI without needing to toggle it off) Fixed the Vanity option appearing on non-equipped items Other: Added keybinds for the debug teleport (no longer uses the ping key) Custom keybinds no longer fire while in dialogue On the technical side of things: Added support for dev-only keybinds Moved Flash table to Client Added a Color table Created a github repository: https://github.com/PinewoodPip/EpipEncounters/commits/main","title":"v1050 - 26/06/22"},{"location":"patchnotes/#v1049-230622","text":"Added an option to enable improvements to the combat log. Messages can be filtered by type, and certain messages will be merged into one line if they occur one after another, such as surface damage and healing. This option will only work when playing in english , unless someone is willing to help me make string patterns for other languages. Right-click the combat log to set your filters. You can also clear the log from that menu. When damage messages are merged into one line, they will display the amount of hits that were merged at the end. The exception to this is damage that occurs within 25ms of eachother, such as weapon attacks with coatings. These are counted as a single hit. Messages parsed by the new combat log system will now have a consistent base color, gray, instead of randomly using white. Some messages have been slightly reworded for consistency Added options in the cheat menu to add/remove tags. You can use this to clear a character's main character status by removing the AVATAR tag. Added a button in the debug sections of the options menu to warp to AMER_Test AMER_Test got Pinewood'd a bit Weapon tooltips now show +elemental damage modifiers Updated Derpy's treasure table displays Removed the option to disable custom context menus Fixed keyword source tooltips being off-by-one Hotbar action button tooltips now show their keybind (without shortening) Removed the automatic unbinding for GM keybinds, since they are no longer used for the hotbar Added chat commands: /rp displays a message over your character's head /emote performs an animation /help lists help for all commands Added a new tab in the controls menu where you can bind hotbar action hotkeys as well as standalone hotkeys for Meditate and Source Infuse. You must rebind your hotbar hotkeys Two keybinds previously used by the hotbar are now reserved as special keys that can be bound in the new custom keybinds UI. The purpose of them is to allow extra mouse buttons and other special bindings to be used with the new system until it is improved. Fixed numerous problems while playing with controllers Added a setting to make the Escape key close the Amer UIs entirely rather than popping page Fixed a hotbar refresh issue when pushing slots around Fixed hotbar action buttons no longer properly showing active/inactive state Removed the option to disable wrapping statuses (it has not actually worked for a long time) as well as the vanity menu Vanity: Added custom RGB dyes to the dyes tab Added all built-in ItemColor entries as selectable dyes Saving now also happens when you add/delete an outfit or a dye You can no longer transmog GB5 items Fixed spears not being available in the transmog menu Fixed the vanity option not appearing for non-shield offhands Added a button to delete outfits Fixed positioning of the vanity UI while playing on resolutions other than 1080p, or when dragging the character sheet Fixed saving outfits with weapons not working Removed the dye context menu for real The UI now shows a message if you select an empty slot, instead of opening a message box Slight changes to positioning of elements Improved performance The character sheet unallocated points notifications are now hidden while in the UI Other: Fixed a bug with hotbar action buttons resetting Added a \"Healing done\" stat to the stats tab The \"Damage dealt\" stat now also considers your owned summons On the technical side of things: Reworked how the selected item is tracked in the Vanity UI Reworked all tabs of Vanity to be separate, independent features Added initial groundwork for supporting controllers in Amer's UIs Added APIs for chatLog , optionsInput _Feature:DebugLog() is now polymorphic like the regular print function Added the Input UI, with possibilities for tracking text keys from the keyboard, and intercepting interface events Added FlexStats for sight and hearing, ranging from -128 to +128 (except for sight which goes to +2048) Added support for saving settings on the server Removed unused ItemColor stats Removed unused PersistentVars table Hooks can now be set to only return the first non-nil value (and stop propagation after that) Cleaned up the client bootstrap script Added an !animtest command on server, auto-playing all female human animations on the host character. There's no stopping it once started, so be careful! Added a !soundtest command on the client, which tests all UI sounds. Might've been added before this version, I don't recall exactly when it was implemented. Added some sick ASCII signatures to the bootstrap scripts, as well as a readme","title":"v1049 - 23/06/22"},{"location":"patchnotes/#v1048-140522","text":"Added a warning upon loading a save with mods known to be problematic Graying out hotbar slots while casting skills should now work similarly to before Added Derpy's scripted encounters to the Treasure Table Display Added an option to disable area transition labels or change their duration. It now also hides immediately if you hover over a character/item to bring up its healthbar Possibly fixed a significant stuttering issue with the hotbar Added a button to revert a transmog'd item's appearance (not retroactive; will only work on newly transmogged items) Changing tabs in the Vanity UI now plays a sound Rounded the numbers in the Treasure Table Display Added a dyes tab to the vanity menu RGB sliders are not finished yet (you can use them in developer mode, but they will not be saved) On the technical side: Fixed a net error message upon loading into the main menu Fixed a startup error related to the Osiris table Added UIObject flag helper methods to the UI table (though Norbyte confirmed these will be usable like other enums in the future) Added ways to set and delete tuples to the Osiris table with :Set() and :Delete(); :Get() queries the DB (previous usage still works). Osiris table's DB queries now return the list of tuples as the last return value, always Added a separate UI for querying time from flash Fixed time functions not accounting for daylight savings (iggy oversight) Added annotations for the _Feature table/class Added a Text library with a handy format function Improvements to events and hooks: libraries can now hold their events and hooks as tables in Event and Hooks fields respectively, from which you can easily see all listener types available and register listeners. Doing it this way enables auto-completion and intellisense/EmmyLua annotations for listener parameters, which was not possible before. Old libraries will slowly be updated to use this, and the old method of registering listeners will stay. The standalone hotbar mod will be updated tomorrow (15th May).","title":"v1048 - 14/05/22"},{"location":"patchnotes/#v1047-200422","text":"Added an option to show artifact/protean chances on enemy health bars when the \"Show Sneak Cones\" (shift by default) key is held. Also works on containers, without needing the key to be held. Fixed an issue with some setup event being unreliable (likely the source of many hotbar problems) Fixed some events being fired once per user Fixed equip animations in the character sheet Client timers are now truly client-side As a result hotkey'd skills on the hotbar should now have a lot less delay Fixed hotbar not being greyed out for dead characters Fixed \"None\"-type weapons not being considered melee, causing incarnate bull rush to appear grayed out in the hotbar Fixed another large performance issue with the stats tab","title":"v1047 - 20/04/22"},{"location":"patchnotes/#v1046-140422","text":"Added a new journal UI, replaces the quest log for changelogs. Access it from the hotbar Fixed Inconspicuous not being hidden in character creation Hotbar config (hotkeys) now also saves when you save the game, not just when the game is paused Incompatible giftbags can no longer be enabled (you should still be able to disable them, if you had them) Added a way to mark templates as favorites in the vanity UI, moving them to a special category Vanity UI now shows categories in a consistent order Small change to stats tab to make stats editable post-SessionLoaded Character sheet now goes below the hotbar again Increased the hotbar's \"refresh rate\", fixing an issue with slots being clickable when they shouldn't Fixed the hotbar drawer locking up your scroll wheel Renamed the transmog context menu option to \"Vanity\", made it only usable on equipped items Added support for Rendal's NPC Armors to the vanity UI Reduced logging when developer mode is off You can no longer open the vanity menu while in combat Your currently equipped template in the vanity menu is now indicated by an icon instead of a suffix Fixed Immersive Meditation ignoring the setting Fixed a performance issue with the stats tab","title":"v1046 - 14/04/22"},{"location":"patchnotes/#v1045-1422-anniversary-patch-flashed","text":"As of today, Epip is now one year old! My attention span for projects tends to be very low (as evidenced by my other EE stuff), but Epip looks to be an exception to that and it's incredible what it has become - all its UI changes were nearly unimaginable just a year ago. Thank you all for the support throughout the months, even at times when the patches were a buggy mess. Just like the initial release of the mod on April 1st, this anniversary patch is very real, and best experienced on this day of the month. Changelog: Pressing escape while in the EE UIs now backs out of them rather than bring up the pause menu The stats tab now shows damage dealt and received in the current fight (or previous fight, when out of combat) Added a new bug to the character sheet Performance improvements to the hotbar Gold/Splinter counter in the stats tab should now be more reliable Minor technical changes to make the mod compatible with Descent Added a scrollbar to the hotbar buttons drawer The hotbar now goes below the inventory and character sheet Hotbar cooldown animations should now be smoother Fixed bugs with unbinding actions in the hotbar, as well as clearing unmemorized slots Fixed muted characters not having their slots greyed out in hotbar You can now activate your Epip Encounters license ingame from the options menu Tooltips can now be scrolled on one axis with the mouse wheel The punisher now drops MicroBoss\u2122 loot to make him feel more optional Added a cinematic camera option, on by default Reworked the vanity feature: it now opens a custom tab in your character sheet. Browsing templates is a lot more convenient this way. Saved outfits are now categorized by race & gender (doesn't stop you from applying them to anyone though) It wouldn't be an Epip patch if something didn't ship unfinished, which is why I must announce that the promised feature to mark templates as favorite did not make it in. On the technical side of things: Added an alias for the Ext table to make it easier to type: SEX = Ext -- Short for \"Script EXtender\" SEX.Print(\"Welcome to Norbyte's SEX v56 !\") Fixed more inconsistencies with copy/paste in the message boxes Added an option to log AI scoring to the console: the top 3 actions will be shown anytime decisions are made. Work-in-progress as some of the AI features in the extender are currently bugged. Tooltips for Ascension stats in the stats tab are now created dynamically, so there's no need to edit them if you've edited the description/name Added a Server table on the client, from which listeners for any Osiris symbol can be created, eliminating the need for boilerplate code on the server side if you need to listen for Osiris stuff. Added an Osiris table on server to make user queries and DB queries a bit less aids to use in lua: -- DBs with only one tuple return their contents directly, rather than as a list local _, value = Osiris.DB_PIP_EpicStats_DamageDealt(char.MyGuid, nil) -- User queries can also return variables directly from their output DBs, even for queries with multiple outputs local value = Osiris.QRY_AMER_KeywordStat_VitalityVoid_GetRadius(char.MyGuid, 1) On the future side of things: Development has slowed down throughout March due to work and studies, but I'm not planning on stopping work on Epip anytime soon, and there are lots of exciting features in the planning stages. There is no time estimate for any of them, they're just things I know I will try out eventually . I know creating expectations never ends up well, but for the anniversary I felt it would be nice to write down the ideas I'm planning for the near future: Character sheet overhaul: the attribute/ability/talent tabs will become easily moddable, for modifying or adding new entries to them. This will pave the way for custom attributes and abilities. The UI currently used for the custom vanity tab will be made generic, so anyone can add their own tabs. Proper controller support for EE UIs: a large undertaking, but something that looks to be very possible and would be a massive quality of life improvement. Custom journal UI: will replace the current changelog functionality. The plan is to use the GM mode's journal UI as a base, since it's a slick, full-screen UI with support for nested categories. The functionality will be made generic, you'd be able to use it for more than just changelogs. A way to create UIs just from lua: work on this already started back in early January; it's used for the [REDACTED] in Fort Joy, but it's quite incomplete. The plan is to allow for creation of UIs with backgrounds, text, and all the Larian form elements (buttons, dropdowns, sliders etc.), all without touching any swf. More documentation for the source code, namely the remaining UI scripts and the base metatables Thanks for reading and I hope you have an epic 1st of April.","title":"v1045 - 1/4/22 Anniversary patch :flashed:"},{"location":"patchnotes/#19222-huge-hotbar-rewrite","text":"Rewrote the hotbar UI. This involves mostly technical changes, in preparations for a standalone release. Your hotkey keybindings will be reset with this update! Please bind them again. Visible changes: Fixed the top of the buttons area blocking clicks onto the world and other UIs Any skill or item can now be dragged from the hotbar to the customizable buttons to bind it there (useful for old mods that use skills/items to bring up menus) The \"use last slot\" action has been removed due to this. Removed the \"view changelog\" action The slot rendering is now entirely scripted (no help from the engine) which works around a crash and removes the need for an initialization procedure (that annoying \"switch to the first row\" message) Saving your current amount of bars and order should be a lot more reliable (now happens upon pausing the game, instead of a timer) Action buttons can now be highlighted or disabled; ex. the pyramids one is disabled if the party has no pyramids Added an action to open the pyramids UI Fixed the source skill border clipping into other rows Added compatibility for Weapon Expansion: adds an action for toggling the menu, and repositions the original button when you have 2 rows of action buttons Actions in the drawer are now ordered in a consistent manner Added a context menu when you right click a row; from there, you can: \"Push\" groups of slots to the left/right (useful for inserting skills inbetween slots) Clear rows, or unmemorized skills Save and load \"loadouts\" of rows. Loadouts can be applied even if your character doesn't currently know all the skills from it. Other changes: Simple tooltips (the ones that go in that very small black box) now appear much faster, rather than being delayed Added numerous calls to Game.Character and Game.Item , mostly related to functionality needed for the hotbar.","title":"19/2/22 Huge Hotbar rewrite"},{"location":"patchnotes/#5222-docs-inauguration-patch-flashed","text":"Added new stats to the stats tab (more coming later): Party gold, splinters Celestial restoration Vitality Void damage, radius Prosperity threshold Rewrote the ingame options menu; the mod's settings now gets its own tab instead of being stuffed into Gameplay You can now switch to and from Tactician difficulty at any time from settings Improved context menu scrolling Touchups to MessageBox, Examine Cleaned up Utilities.lua, removed old unused methods Removed support for the archaic config file structure (from before the ingame settings menu; very old) Created documentation for Game , OptionsSettings, MessageBox, StatsTab, Examine, and CharacterSheet","title":"5/2/22 Docs inauguration patch :flashed:"},{"location":"patchnotes/#26122-birthday-patch-flashed","text":"Fixed \u201cTeleport to\u201d not working on anything other than characters; it now works with items and triggers as well Fixed shields not showing all transmog options Fixed more inconsistency issues with context menus on world characters Transmog menu now works properly for characters that have had their race/gender changed Added an option to show B/H next to player portraits while unsheathed Fixed tooltips of damaging statuses for real Added an option to force story patching on every load Physical/pierce resistances in character sheet now get colored blue/red like how the normal resistances would Holding shift now fades out statuses on the enemy health bar Temporary solution for scrolling context menus that would leave the screen, with the mouse wheel Added something awesome to Fort Joy","title":"26/1/22: birthday patch :flashed:"},{"location":"patchnotes/#technical-stuff-so-it-doesnt-look-like-im-doing-nothing","text":"Added utility methods for initializing \u201cFeatures\u201d You can now specify required filesystem overrides and mods for features, with them automatically disabling themselves if these are missing Removed GetCharacterDodge function Rewrote character sheet resistances script Rewrote script for enemy health bar Moved Majora's compatibility to its own script Added Game.Character library for character-related stuff Moved a lot of old calls to Client Started work on a library that allows the creation of UIs purely in lua (no swf/actionscript editing)","title":"Technical stuff so it doesn't look like I'm doing nothing:"},{"location":"patchnotes/#14122","text":"Re-enabled custom icons on the UIs that previously used them, as the extender issues with them have been fixed. Added a transmog context menu, can be enabled in settings. Appears on equipment with visuals, including weapons. Submenus display categorized root templates, filtered down to only the ones compatible with your current race/gender/alive/undead. Supports Majora's Fashion Sins. Can save/load outfits, along with their dyes. Saved outfits are in EPIP_VanityOutfits.json Warning: artifacts and armor set items will not currently work properly when transmogrified. Also, Majora's tabs tend to overflow the screen. Fixed status tooltips in v56 Fixed extract runes context menu option consuming gold instead of splinters Numerous miscellaneous internal changes","title":"14/1/22:"},{"location":"patchnotes/#271221","text":"Updated to v56 of the extender. Current issues (with the extender): Anything related to status tooltip editing does not work as Game.Tooltip is borked UIs with custom icons (hotbar, toolip) stop displaying vanilla icons after the first session. Custom icons are disabled for now so as to keep both the hotbar and console usable Removed the old console cheats Full rewrite of the stats tab; it should be a lot more reliable now (especially in multiplayer) and survives lua resets Stats and categories are now defined in Epip.Features.StatsTab. Fixed context menu not working on chained characters, and added it to summon portraits (maybe) fixed summon portrait display issues Custom talents now display in the examine menu Organizational changes to tooltip adjustments script torturerSkillOverrides was moved to Data.Game.TORTURER_SKILL_OVERRIDES statusToSkill was moved to Data.Game.DAMAGING_STATUS_SKILLS","title":"27/12/21:"},{"location":"patchnotes/#v1043-191221","text":"Added critical chance to the examine menu, below damage Added an option to set the default position of the Examine menu (middle, left, or right of the screen) Fixed health bar appearing in character creation Added a new context menu option to dismantle all equipment within a container. Only shows up when there's equipment within a container. Dismantling through the context menu now requires shift-clicking for any equipped item Fixed right-clicking containers bringing up debugging cheats for the character you previously had selected Organizational changes to various UI scripts and older features, as preparations for the grand debut of the Epip modding docs Reuploaded on 22/12/21 with the following fixes: More organizational changes (moving Data.UI to Client.UI.Data) Fixed immunities in examine showing up in the wrong place Undid some recent changes that lead to playerInfo summon display breaking Reuploaded on 23/12/21 to remove some testing text in character creation, as well as to (maybe?) fix an issue with combat HUD disappearing in new games.","title":"v1043 (19/12/21)"},{"location":"patchnotes/#v1042-141221","text":"Added an option to hide hotbar hotkeys text Added an \"Immersive Meditation\" setting which disables hotbar and minimap UIs while in Amer UIs Added shortened names for the remaining numpad keys (multiply, add, minus, etc.) Added an auto-identify setting, with 2 modes: always, and only with enough Loremaster. This will instantly identify items when they are generated Item tooltips no longer overflow through the top of the screen, making it easier to see the damage stats on items with 3 filled sockets Dismantling from the context menu now requires shift-clicking for items with runes inside (as a way to mark them as 'important' and avoid misclicks related to a certain new feature) Added a context menu option to items to dye them (requires the dyes to be in the party's inventory) Added a context menu to player portraits to hide statuses and summons (not saved between reloads for now) Added a context menu option to extract runes from items Added a debug menu with cheats for characters, available in the extender's developer mode Accessed by right-clicking a character in the world, or a player portrait in the left portraits UI Allows you to add all sorts of stats, spells, SpecialLogic, spawn items, treasure tables, toggle godmode, and more The new context menu tech is quite extensive, and can be toggled off in the settings in case any serious issues arise Finesse recovery now works for pay X skills, and sucker punch You can add more exceptions to DB_PIP_WeaponBasedFinesse_Whitelist((STRING)_Skill) Fixed overhead dialogue durations being wrong when they were changed away from the default value Overhead sizes are now always default in Amer UIs Fixed origins gaining epic enemies perks for real this time Fixed description of Clouded Memory Fixed map visibility setting not working after exiting respec Fixed being able to toggle minimap within character creation Fixed weapon range deltamod tooltip showing up on unidentified items Fixed wrong health bar B/H display on dead characters The dismantle context menu option should no longer get permanently stuck in case of unidentified shenanigans Added a 20% tax to dismantling items from context menus, used to amortize the development costs of the new menus as well as to fund future development of the mod just kidding","title":"v1042 (14/12/21)"},{"location":"patchnotes/#v1041-231021","text":"Added a slider for status overhead duration Fixed damage overheads for items not working with the new size settings Fixed the talents tab being selected after exiting mirror Fixed character sheet not updating the first time it is opened after a respec Fixed decimal stat adjustments being lost while merging them into one tooltip Fixed character creation talent points display when changing presets Fixed 1st hotbar not being clickable after a lua reset Fixed hotbar cooldown/active overlays when joining mid-session This should also have fixed the issue with loading a save during a summon turn Origins should no longer get Epic Enemies buffs Possibly fixed unidentified items showing the weapon range deltamods in the tooltip","title":"v1041 (23/10/21)"},{"location":"patchnotes/#v1040-191021","text":"Added some client APIs for the message box UI and overhead texts (Client.UI.MessageBox and Client.UI.Overheads) Added settings for overhead sizes Added a setting to bring back the vanilla combat log button (on by default) Fixed talents not being hidden properly in the character creation UI (which includes the mirror, it's the same UI) Fixed EE stats tab not working for new companions until a reload Fixed sliders in the options menu being saved with +1 step than what you've set them to","title":"v1040 (19/10/21)"},{"location":"patchnotes/#v1039-171021","text":"Fixed SI tooltip highlighting not working for a few schools Fixed wrong earth damage color in shift-tooltips","title":"v1039 (17/10/21)"},{"location":"patchnotes/#v1038-161021","text":"Added a hotbar hotkey to use the skill/item on the very last slot of your hotbar (right-most in 5th row) Can use this to make a Source Vamp hotkey, for example Weapon range deltamods now show up like regular deltamods on the tooltip, and the weapon range display is split up to show both base and extra range Holding the show cones button (shift by default) will display skill damage as their multipliers When infusing or when the shift key is held, unmet SI requirements will be displayed in red text Possibly fixed the \"auto-unlock inventories\" feature Artifact items now show quality Added an option to log all UI ExternalInterface calls and invokes to the console, visible in the settings menu if the extender developer mode is enabled Started slowly organizing code into sensical libraries; anything in the extended Game table should be reliable and will likely not change names Let me know if something that used to work before broke all of a sudden Fixed an error in the console when hovering over armor whose subtype could not be determined (ex. the starting tattered equipment) Character Creation UI now implements machine learning and blockchain technology to notify you of possible typos in your character names Added a WIP custom talents feature. See EpipTalents.lua for usage example. You can also hide any non-racial talent. Shortcomings: They will only display on kb+m. No controller UI support yet. They do not show up in the examine UI yet. Requirements are not rechecked while moving ability/attribute points around in the mirror; upon exiting, you will still lose any talents you cannot sustain Can't bind them to deltamods Rarely, the mirror UI might show you having fewer talent points than you do - this should fix itself if you exit the mirror and go back in (if someone has a save where this happens consistently, let me know) As a result of the talent UI changes, the bug with unequipping walk-it-off should be fixed","title":"v1038 (16/10/21)"},{"location":"patchnotes/#v1037-21021","text":"Fixed right-most zeros getting culled in stat adjustment tooltips Added a new setting to disable fog of war (server-wide, host-only, non-destructive; can be reverted) Minor visual bug: re-enabling FoW will cause the world to go black until you unpause","title":"v1037 (2/10/21)"},{"location":"patchnotes/#v1036-11021","text":"Changed the Damage tooltip in character sheet to be less confusing Removed the obsolete \"From LW: -0%\" tooltip text from character sheet Removed the word \"Set:\" from deltamods Added an option to auto-unlock inventories in multiplayer upon loading a save. This setting is per player. Fixed negative stat adjustments not being grouped together in tooltips Equipment now shows a \"Quality\" rating in tooltips, which denotes how good its damage/armor roll was. An item with 100% Quality has the best roll (only possible for Divines) Trickster's Repertoire now grants invisibility+sneaking until the start of your first turn, and only causes you to sneak starting from your second round. Additionally, at the start of your turns, you always unsneak. Changed wording for the Hothead tooltip Fixed error spam in console upon reload, and reorganized some code Added a lifesteal stat to the stats tab (will update upon changing Necromancy points, or in combat) Finished support for preset descriptions in character creation, override CharacterCreation.characterCreationPresetDescriptions in CharacterCreationUI.lua to set them","title":"v1036 (1/10/21)"},{"location":"patchnotes/#v1035-120921","text":"Replaced the config json file with an ingame settings menu, available from the game's normal \"Gameplay settings\" tab Unidentified artifacts now show their rarity as artifact, and use the custom color Proteans and Artifact runes now also use the Artifact color, and slots that they cannot be put on have a warning message Fixed Trickster's Repertoire breaking sneaking from other effects that cause you to sneak Fixed hotbar initialization message (again)","title":"v1035 (12/09/21)"},{"location":"patchnotes/#v1032-050921","text":"Small patch with some QoL for dyes and a fix for a Finesse issue. Dyeing equipped items will now re-quip them automatically Changed the finesse recovery for weapon-based skills to fix an issue with delayed procs if multiple things used its logic Removed the option to show enemy lvl in healthbar (still buggy!)","title":"v1032 (05/09/21)"},{"location":"patchnotes/#v1030-300821","text":"Monthly patch to appease our ever-so-hungry Derpy overlord. Hotbar slot keys now work as expected - ex. pressing \"4\" will use the fourth skill on the bottom bar, regardless of the row it's set to Hotbar actions now show their keybinding, if they have one Vanilla actions (ex. open journal) will always show the vanilla keybind instead of the custom one (it will still work, though) Re-enabled the keyboard hotkeys for hotbar actions by default. If you had these disabled previously (or if you're using the mod for the first time), its keys will be unbound upon loading in Changed the default hotbar bindings to swap ping with combat log Added a hotbar action for Portable Respec Mirror, if its mod is loaded Resting from the hotbar now uses the item rather than resting directly (should work with other bedroll mods now) Added a toggle for the minimap onto the hotbar You can no longer rearrange hotbar actions while the hotbar is locked (except within the skills panel) Added a faint blinking animation to the health bar when B/H have 1 turn or less remaining Added an option to show level next to character name in the top healthbar (on by default) You can now unbind hotbar action buttons with middle-click Added handling for when hotbar actions are removed from a save (ex. disabling a mod that adds them) Brittle status now shows its calculated damage like DoTs Masterworked items now show a warning in the tooltip Changed Splintered Arrow icon Fixed Escapist being a huntsman skill Fix protruding hotbar texture on the bottom bar Fixed Trickster's Repertoire removing AP in consecutive turns Trickster's Repertoire no longer activates while playing dead Fixed artifact names not using the new color (oops) Moved the casting notification slightly up so multiline ones don't overlap the health bar Fixed dragging items onto the world not working if the hotbar was enabled Fixed the add/remove rows button being available on summons after opening the pause menu You can no longer use hotbar action hotkeys in dialogues (or other occasions where the UI is entirely hidden), when there is a UI element focused, or when the game is paused Fixed name of hotbar slot 6 binding in the input menu Fixed Slowed 3 AP penalty stacking","title":"v1030 (30/08/21)"},{"location":"patchnotes/#v1029-060821","text":"Moved the casting notifications to where your health bar is, and added a toggle for them in the settings (defaults to enabled) Toggle party link hotbar hotkey is now instant (no casting animation) Added a one-row layout to the hotbar actions bar, which is automatically used when you only have one row of skill slots active You can control the behaviour with the new hotbarHotkeysLayout setting: \"auto\" is the behaviour described above, \"single\" makes it always use the 1-row layout, \"dual\" forces it to always be two rows (like how it was before) Keyboard hotkeys remain functional at all times, even if the buttons are hidden Fixed \"c\" displaying on the hotbar button you're dragging DoT statuses now show their calculated damage The display fluctuates for a bit after a skill cast, might redo this entirely later to not rely on the engine damage formula Centurion Battlestomp can now only be cast if the target is at <10m, and does not consume the ranged charge Tried banishing the \"Enemy Turn\" message again","title":"v1029 (06/08/21)"},{"location":"patchnotes/#v1027-v1028-300721-and-310721","text":"This patch contains numerous fixes and the first part of the rework of hotbar hotkeys. Happy birthday Derpy! Replaced the tutorials tab in the journal with a patch notes tab See EpipPatchNotes.lua for an example on how to use this in your own mod. Artifact tooltips now show \"Artifact\" as rarity rather than Unique Hotbar Updates Added customizable hotbar action hotkeys/buttons. Drag and drop to rearrange/assign them, right click to bring up a list of all actions. Mods can add their own actions very easily; see HotbarActions.lua for an example. To use them with keyboard keys, assign the \"Hotbar Hotkey #\" keys from the game's controls menu. Rebinding them will be easier in the future. You must also enable them within the config file. This rework is a work-in-progress, both in terms of functionality and art; in the future there will also be a 1-row layout. The multihotbar is now enabled by default. Set \"disableHotbar\" to true in the config file to disable it. (the old setting now does nothing) Deprecated the Infusion and Meditate hotkeys; please use the hotbar version of them from now on. Summons can no longer add hotbar rows All the custom elements should now hide during dialogues Fixed jankiness when using low resolutions Fixes Fixed player status bar sometimes clipping through portraits and appearing to the left of them Fixed stat adjustments tooltip not working properly on resists Fixed stat adjustments tooltip eating up all other boosts Fixed boss frame in the enemy health bar UI. It should work consistently now Leper rune now should properly grant the talent when it's socketed into an equipped item Fixed being able to infuse out-of-turn with the hotkey (rest in peace gigabrain infused reaction builds) Possibly disabled turn notifications on the hotbar health bar Known issues \"Actions\" drawer (attack/sneak/sheathe) does not work well along with the default keyboard hotkey, and the menu is not repositioned Buttons on the hotbar don't yet light up like they do in vanilla Order of actions in drawer is random Some hotbar buttons do not have state animations yet The title in the patch notes menu will not be the right color the first time after a reload","title":"v1027, v1028 (30/07/21 and 31/07/21)"},{"location":"patchnotes/#v1025-v1026-the-great-interface-update-060721","text":"Many UI quality-of-life changes, as well as features for modders. The UI changes were untested on controllers. Most will not apply (status wrapping works, but reverts the frames to the square ones). The character sheet now displays physical and piercing resistances The health bar when you hover over an enemy now shows B/H, with the icons lighting up when you have enough stacks for a T3. If you hold shift, the resistance display is replaced by AP, SP and Initiative info. Special thanks to Elric for the new art assets! The B/H statuses are now hidden in that UI, to reduce clutter. Added hotkeys for Meditate, Source Infusion and toggling additional hotbars. You can bind them from the game's normal controls screen. The hotbar hotkey allows you to temporarily toggle the additional bars from the multibar feature, explained below. You can dismantle non-uniques from your inventory by right-clicking them and selecting the new Dismantle option at the bottom (work-in-progress, can get \u2018stuck' sometimes; simply use it again on another item and both should be dismantled) Presets in character creation now support descriptions (see the modding section on how to add these; Derpy's mod soon will) \"Stat Adjustments\" in tooltips are merged into one line Skill and item tooltips now reflect the +1ap costs from Slowed III (using items is still bugged; I'm pretty sure that's en engine issue) The health bars at the bottom now always show their values (no need to hover) Added a new stats tab in the character sheet with EE-related stats, like reaction charges and missing regeneration. Will also show your keyword activators and mutators. You can expand/collapse the stat tabs by left-clicking them. The player portraits on the left now wrap their status displays onto a second row once a character has >6 statuses. Each row tries to maintain an equal amount of statuses (they never wrap onto a third row). Unfortunately, to make this work I had to hide summon statuses there. You can still see them in the middle of the screen or on the tooltip of their portrait. I might be able to remedy this in the future, it just needs more research. Summon portraits will be shrunk once the player's statuses wrap. You can disable this in the config file. Added a work-progress multihotbar; you must enable it from the config file in Documents\\Larian Studios\\Divinity Original Sin 2 Definitive Edition\\Osiris Data\\Config_EpipEncounters.json (it will be generated on first load). I don't promise any stability at the moment. Multiplayer is untested. You can add up to 4 extra bars, and reorder them. Multihotbar layouts are synchronized to the host (savegame) every 8 mins. The first time you load a save with the setting active, you will have to manually switch all characters to the first hotbar row before the multihotbar will be enabled. This is to circumvent a crash. You will only need to do this once per playthrough (and anytime you disable and re-enable the feature) If the extra rows get in the way, remember there is a hotkey to temporarily toggle them. Known issues with the multihotbar: Resizing window does not update the health bar position properly, neither the bars The extra rows will not show icons if your resolution does not have space for all 29 slots in a row You can click outside of the bar to the right to select slots from upper rows In dialogues, you can still see the hotbar cycling buttons Combat log button positioning is not adjusted Fixes in this patch: Added SP refund to Reactive Shot tooltip Updated the infusion deltamod removal to use the new removal PROC (should be compatible with Derpy's deltamod additions now) Fixed Opportunist charge script after Amer's patch, and removed the patching procedure from the new versioning system (hopefully there are no more issues with this) Updated the GoTS script to work with the new basic attack script Fixed Leper rune having old Incons (this might not be retroactive) Added the AP penalty to Slowed III tooltip No clue how to do so for the journal Updated Horrid Wilting SI reaction script The modded centurion activator now mentions the 1 ranged charge Thirst accumulated AP is now lost on death or combat exit For modders: Added Utilities.lua, a table which contains helper methods for adding features in way that is compatible with multiple mods, and some UI helpers Can be accessed with Mods[\u201cEpipEncounters\u201d].Utilities Calls to its methods are not persistent, and you must always make them when the lua engine loads, before the StatsLoaded / SessionLoaded events. In other words, call its methods from the main lua body, not from any listener. AddArtifactToTreasure() has been moved here. Added AddSkillbook(), which functions similarly to the previous method and adds a skillbook to a trader table. Params are the item id (without the I_ prefix that you'd normally use for tables) and the school name, as it appears ingame (capitalized) You can modify the characterCreationPresetDescriptions subtable to add descriptions to the presets in character creation. The table is commented with the preset that corresponds to the index in the preset selector. No documentation currently exists for the new stats tab, but do let me know if you want to add your own mod's stats to this panel. Added GetConfig(), which retrieves a json config file for your mod. Takes two params: the suffix of the config file, and a table containing its default values, for patching old configs with new settings Known issues: Picking a talent will not update the new stats Preset descriptions do not appear until you switch presets at least once Changing name in character creation causes the skills to disappear (fixed by changing tabs) Dismantling from right click can get \u2018stuck' on some items - this can be fixed by dismantling another one. Character creation spits a few errors on startup, these are completely harmless (some element is not yet initialized at that point, unsure which one) New stats fail to update when starting a new playthrough (harmless) With multiple controlled summons, the gap between their portraits changes when you switch between them","title":"v1025, v1026 - THE GREAT INTERFACE UPDATE (06/07/21)"},{"location":"patchnotes/#v1020-250421","text":"Boneshaped Crusher now has All-In Removed Incons from talent menus and characters that had it; you will be refunded Talent Points for characters that had it. Special thanks to Focus for the UI editing help. Leper now grants Trickster's Repertoire instead of old Inconspicuous Ending combat with the new incons now automatically unsneaks Added (hopefully) all the text changes that were missing (infused reactions, artifacts, some talents) Reactive Shot SI3 refunds 1SP Added descriptions of the Epic Enemies effects to the condensed tooltip (thanks Derpy) Presence mutator from Epic Enemies now grants all Presence effects The custom loading screen is now toggleable, and off by default. To re-enable it, edit EpipEncountersConfig.json in Documents\\Larian Studios\\Divinity Original Sin 2 Definitive Edition\\Osiris Data For modders: added a function to safely add artifacts to the ST_AMER_UNI treasuretable. Simply call Mods[\u201cEpipEncounters\u201d].AddArtifactToTreasure(statsID) (ex. AddArtifactToTreasure(\"UNI_AMER_Abyss\") ) before the StatsLoaded engine event. You can copy TreasureTables.lua into your mod to use it, if you don't want to have Epip Encounters as a dependency. If I implement more helpers like this, I'll split them off into their own mod. Fixed opportunist script not running Fixed Chthonian not appearing as a status on Epic Enemies Fixed Greatforge item validation breaking Warning for other modders: if you're overloading an existing query with Lua, do not do so directly from Ext.NewQuery(), as there is no way to define queries that expect specific params. This causes issues with negating queries. Instead, create a wrapper query in osiris that uses NRD_ModQuery.","title":"v1020 (25/04/21)"},{"location":"patchnotes/#v1010-170421","text":"Note: you will need the latest EE update (the one for modders) for the text changes to work properly. Also, you will not see the usual \u201cEpip Encounters has been updated\u201d message as the normal EE one will show up instead. Break the Shackles cleanses dazzled Inconspicuous rework, as a rework of Master Fletcher (now named Trickster's Repertoire): You sneak and become invisible for free at the start of combat, until the end of your first turn. At the end of your turn, sneak for free. At the start of your turns, if you were sneaking from this effect, you stop sneaking. Additionally, your special arrows count as basic attacks and you have a 33% chance to recover a special arrow after shooting it. Old inconspicuous remains available. At least for now. Apotheosis SI3 is now exclusive from the previous SIs, but lasts until your source gen depletes Escapist skill costs 0AP, has 5m range, up from 4m Opportunist grants 2 free generic reaction charges, up from 1 Added a tutorial for when you get an infused reaction node for the first time (kekw) Executioner grants 2 AP, up from 1 Charity is now once per round per character, rather than once per round Added meta skills to print SP and resistances Added correct text for most changes (ascension, artifacts and executioner are still missing) Fixed using Clouded Memories from bags not consuming them Fixed finesse recovery for weapon-based skills activating per-target rather than per skill cast I'm surprised no one tried whirlwind while this lasted Fixed Prototrophize not granting SP when under infinite SG It will still extend SG when you're at max sp. I'm not sure what the behaviour should be in that case.","title":"v1010 (17/04/21)"},{"location":"patchnotes/#v1001-30421","text":"Fixed Drill Sockets merging damage types for weapons Fixed permanent Prosperity keyword from Hothead talent - loading a save will recalculate your legitimate sources","title":"v1001 (3/04/21)"},{"location":"Client/","text":"Client \u00b6 The Client table contains client-specific calls as well as tables with APIs for UIs. It is only available on the Client context. The \"Client character\" here refers to the currently-controlled character on the client. ClientLib Class \u00b6 Inherits from Library . Events and Hooks \u00b6 ActiveCharacterChanged (event) \u00b6 @field PreviousCharacter EclCharacter @field NewCharacter EclCharacter SkillStateChanged (event) \u00b6 Fired when the active client character enters or exits a skill state. @field Character EclCharacter The active client character. @field State EclSkillState? ViewportChanged (event) \u00b6 Fired when the size of the viewport changes. @field NewSize Vector2 @field OldSize Vector2 Methods \u00b6 CopyToClipboard \u00b6 function ClientLib.CopyToClipboard(text) -- (Client-only) Copies text to the clipboard. Some characters, like newlines, will be trimmed out as per the vanilla scripting on the swf. Relies on MessageBox. @param text string GetActiveUI \u00b6 function ClientLib.GetActiveUI(playerIndex) -- (Client-only) -> UIObject? Returns the last UIObject the player has interacted with. @param playerIndex integer? Defaults to `1`. GetCharacter \u00b6 function ClientLib.GetCharacter(playerIndex) -- (Client-only) -> EclCharacter Returns the currently-controlled character on the client. @param playerIndex integer? Defaults to 1. GetDate \u00b6 function ClientLib.GetDate(utc) -- (Client-only) -> DateTime Returns the current date and time as an object. Relies on Client.UI.Time @param utc boolean Whether to use UTC time. Defaults to false. GetDateString \u00b6 function ClientLib.GetDateString() -- (Client-only) -> string Returns the current date and time as a string. GetMousePosition \u00b6 function ClientLib.GetMousePosition() -- (Client-only) -> integer, integer Returns the global position of the mouse in the screen space, in pixel coordinates. GetProfileGUID \u00b6 function ClientLib.GetProfileGUID(playerIndex) -- (Client-only) -> GUID Returns the profile GUID of a player. @param playerIndex integer? Defaults to 1. GetViewportSize \u00b6 function ClientLib.GetViewportSize() -- (Client-only) -> Vector2 Returns the viewport size. IsActiveCombatant \u00b6 function ClientLib.IsActiveCombatant() -- (Client-only) -> boolean Returns whether the client's char is currently playing its turn in a combat. TODO this fails while fear is applied. Relies on StatusConsole. IsCursorOverUI \u00b6 function ClientLib.IsCursorOverUI(playerIndex) -- (Client-only) -> boolean Returns whether the cursor is over any UIObject. @param playerIndex integer? Defaults to `1`. IsHost \u00b6 function ClientLib.IsHost() -- (Client-only) -> boolean Returns true if the client is the host of the current session. Relies on GameMenu. IsInCombat \u00b6 function ClientLib.IsInCombat() -- (Client-only) -> boolean Returns whether the client char is in combat. IsInDialogue \u00b6 function ClientLib.IsInDialogue() -- (Client-only) -> boolean Returns whether the client character is currently in dialogue. IsInGameplayState \u00b6 function ClientLib.IsInGameplayState() -- (Client-only) -> boolean Returns true if the game is in a gameplay state, or late into loading. IsPreparingInfusion \u00b6 function ClientLib.IsPreparingInfusion() -- (Client-only) -> boolean Returns true if the client character is preparing a Source Infusion. IsUsingController \u00b6 function ClientLib.IsUsingController() -- (Client-only) -> boolean Returns whether the client is using a controller. WorldPositionToScreen \u00b6 function ClientLib.WorldPositionToScreen(worldPosition, playerIndex) -- (Client-only) -> Vector2 Translates world coordinates to screen position. @param worldPosition Vector3 @param playerIndex integer? Defaults to `1`.","title":"Client"},{"location":"Client/#client","text":"The Client table contains client-specific calls as well as tables with APIs for UIs. It is only available on the Client context. The \"Client character\" here refers to the currently-controlled character on the client.","title":"Client"},{"location":"Client/#clientlib-class","text":"Inherits from Library .","title":"ClientLib Class"},{"location":"Client/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Client/#activecharacterchanged-event","text":"@field PreviousCharacter EclCharacter @field NewCharacter EclCharacter","title":"ActiveCharacterChanged (event)"},{"location":"Client/#skillstatechanged-event","text":"Fired when the active client character enters or exits a skill state. @field Character EclCharacter The active client character. @field State EclSkillState?","title":"SkillStateChanged (event)"},{"location":"Client/#viewportchanged-event","text":"Fired when the size of the viewport changes. @field NewSize Vector2 @field OldSize Vector2","title":"ViewportChanged (event)"},{"location":"Client/#methods","text":"","title":"Methods"},{"location":"Client/#copytoclipboard","text":"function ClientLib.CopyToClipboard(text) -- (Client-only) Copies text to the clipboard. Some characters, like newlines, will be trimmed out as per the vanilla scripting on the swf. Relies on MessageBox. @param text string","title":"CopyToClipboard"},{"location":"Client/#getactiveui","text":"function ClientLib.GetActiveUI(playerIndex) -- (Client-only) -> UIObject? Returns the last UIObject the player has interacted with. @param playerIndex integer? Defaults to `1`.","title":"GetActiveUI"},{"location":"Client/#getcharacter","text":"function ClientLib.GetCharacter(playerIndex) -- (Client-only) -> EclCharacter Returns the currently-controlled character on the client. @param playerIndex integer? Defaults to 1.","title":"GetCharacter"},{"location":"Client/#getdate","text":"function ClientLib.GetDate(utc) -- (Client-only) -> DateTime Returns the current date and time as an object. Relies on Client.UI.Time @param utc boolean Whether to use UTC time. Defaults to false.","title":"GetDate"},{"location":"Client/#getdatestring","text":"function ClientLib.GetDateString() -- (Client-only) -> string Returns the current date and time as a string.","title":"GetDateString"},{"location":"Client/#getmouseposition","text":"function ClientLib.GetMousePosition() -- (Client-only) -> integer, integer Returns the global position of the mouse in the screen space, in pixel coordinates.","title":"GetMousePosition"},{"location":"Client/#getprofileguid","text":"function ClientLib.GetProfileGUID(playerIndex) -- (Client-only) -> GUID Returns the profile GUID of a player. @param playerIndex integer? Defaults to 1.","title":"GetProfileGUID"},{"location":"Client/#getviewportsize","text":"function ClientLib.GetViewportSize() -- (Client-only) -> Vector2 Returns the viewport size.","title":"GetViewportSize"},{"location":"Client/#isactivecombatant","text":"function ClientLib.IsActiveCombatant() -- (Client-only) -> boolean Returns whether the client's char is currently playing its turn in a combat. TODO this fails while fear is applied. Relies on StatusConsole.","title":"IsActiveCombatant"},{"location":"Client/#iscursoroverui","text":"function ClientLib.IsCursorOverUI(playerIndex) -- (Client-only) -> boolean Returns whether the cursor is over any UIObject. @param playerIndex integer? Defaults to `1`.","title":"IsCursorOverUI"},{"location":"Client/#ishost","text":"function ClientLib.IsHost() -- (Client-only) -> boolean Returns true if the client is the host of the current session. Relies on GameMenu.","title":"IsHost"},{"location":"Client/#isincombat","text":"function ClientLib.IsInCombat() -- (Client-only) -> boolean Returns whether the client char is in combat.","title":"IsInCombat"},{"location":"Client/#isindialogue","text":"function ClientLib.IsInDialogue() -- (Client-only) -> boolean Returns whether the client character is currently in dialogue.","title":"IsInDialogue"},{"location":"Client/#isingameplaystate","text":"function ClientLib.IsInGameplayState() -- (Client-only) -> boolean Returns true if the game is in a gameplay state, or late into loading.","title":"IsInGameplayState"},{"location":"Client/#ispreparinginfusion","text":"function ClientLib.IsPreparingInfusion() -- (Client-only) -> boolean Returns true if the client character is preparing a Source Infusion.","title":"IsPreparingInfusion"},{"location":"Client/#isusingcontroller","text":"function ClientLib.IsUsingController() -- (Client-only) -> boolean Returns whether the client is using a controller.","title":"IsUsingController"},{"location":"Client/#worldpositiontoscreen","text":"function ClientLib.WorldPositionToScreen(worldPosition, playerIndex) -- (Client-only) -> Vector2 Translates world coordinates to screen position. @param worldPosition Vector3 @param playerIndex integer? Defaults to `1`.","title":"WorldPositionToScreen"},{"location":"Client/input/","text":"Input \u00b6 Client.Input contains input-related queries. Functions \u00b6 nil","title":"Input"},{"location":"Client/input/#input","text":"Client.Input contains input-related queries.","title":"Input"},{"location":"Client/input/#functions","text":"nil","title":"Functions"},{"location":"Client/UI/CharacterSheet/","text":"CharacterSheet \u00b6 Events \u00b6 nil","title":"CharacterSheet"},{"location":"Client/UI/CharacterSheet/#charactersheet","text":"","title":"CharacterSheet"},{"location":"Client/UI/CharacterSheet/#events","text":"nil","title":"Events"},{"location":"Client/UI/ChatLog/","text":"ChatLog \u00b6 The ChatLog UI displays and manages the chat log. Epip's script allows you to add custom tabs to it (like the Party/All Players tabs by default). Examples of its use are the chat commands features, which intercept sent messages to execute terminal-style commands. Events & Hooks \u00b6 ---Fired when the client sends a message in chat. TODO pass tab ---@event MessageSent ---@field RegisterListener fun(self, listener:fun(text:string, clientChar:EclCharacter)) ---@field Fire fun(self, text:string, clientChar:EclCharacter) ---Fired when a message is rendered onto the UI. ---@event MessageAdded ---@field RegisterListener fun(self, listener:fun(tab:integer|string, text:string)) ---@field Fire fun(self, tab:integer|string, text:string) ---Fired when the client attempts to send a message. ---@hook CanSendMessage ---@field RegisterHook fun(self, handler:fun(canSend:boolean, text:string, char:EclCharacter)) ---@field Return fun(self, canSend:boolean, text:string, char:EclCharacter) Methods \u00b6 ---Sends text onto the chatbox, using the vanilla colors and font sizes. ---@param tab integer|string Tab ID. See ChatLog.TABS enum. For custom tabs, use your string ID. ---@param userName string ---@param message string function Chat.AddFormattedMessage(tab, userName, message) ---Clear a chat tab's messages. ---Render raw text onto the chatbox. ---@param tab integer|string ---@param tab? integer|string Tab ID. See ChatLog.TABS enum. For custom tabs, use your string ID. Defaults to current tab. ---@param text string function Chat.AddMessage(tab, text) ---Adds a tab to the chat log. ---@param tabID string ---@param label string function Chat.AddTab(tabID, label) Objects \u00b6 ---@class ChatLogUI : UI","title":"ChatLog"},{"location":"Client/UI/ChatLog/#chatlog","text":"The ChatLog UI displays and manages the chat log. Epip's script allows you to add custom tabs to it (like the Party/All Players tabs by default). Examples of its use are the chat commands features, which intercept sent messages to execute terminal-style commands.","title":"ChatLog"},{"location":"Client/UI/ChatLog/#events-hooks","text":"---Fired when the client sends a message in chat. TODO pass tab ---@event MessageSent ---@field RegisterListener fun(self, listener:fun(text:string, clientChar:EclCharacter)) ---@field Fire fun(self, text:string, clientChar:EclCharacter) ---Fired when a message is rendered onto the UI. ---@event MessageAdded ---@field RegisterListener fun(self, listener:fun(tab:integer|string, text:string)) ---@field Fire fun(self, tab:integer|string, text:string) ---Fired when the client attempts to send a message. ---@hook CanSendMessage ---@field RegisterHook fun(self, handler:fun(canSend:boolean, text:string, char:EclCharacter)) ---@field Return fun(self, canSend:boolean, text:string, char:EclCharacter)","title":"Events &amp; Hooks"},{"location":"Client/UI/ChatLog/#methods","text":"---Sends text onto the chatbox, using the vanilla colors and font sizes. ---@param tab integer|string Tab ID. See ChatLog.TABS enum. For custom tabs, use your string ID. ---@param userName string ---@param message string function Chat.AddFormattedMessage(tab, userName, message) ---Clear a chat tab's messages. ---Render raw text onto the chatbox. ---@param tab integer|string ---@param tab? integer|string Tab ID. See ChatLog.TABS enum. For custom tabs, use your string ID. Defaults to current tab. ---@param text string function Chat.AddMessage(tab, text) ---Adds a tab to the chat log. ---@param tabID string ---@param label string function Chat.AddTab(tabID, label)","title":"Methods"},{"location":"Client/UI/ChatLog/#objects","text":"---@class ChatLogUI : UI","title":"Objects"},{"location":"Client/UI/Examine/","text":"Examine \u00b6 Hooks for the Examine UI.","title":"Examine"},{"location":"Client/UI/Examine/#examine","text":"Hooks for the Examine UI.","title":"Examine"},{"location":"Client/UI/GiftBagContent/","text":"GiftBagContent \u00b6 The GiftBagContent UI is the ingame giftbags menu. Events & Hooks \u00b6 ---Fired after the UI's content is updated, upon opening the UI. ---@event ContentUpdated ---@field RegisterListener fun(self, listener:fun(content:GiftBagContentUIEntry[])) ---@field Fire fun(self, content:GiftBagContentUIEntry[]) ---Fired when the content of the UI needs to be updated. ---@hook GetContent ---@field RegisterHook fun(self, handler:fun(content:GiftBagContentUIEntry[])) ---@field Return fun(self, content:GiftBagContentUIEntry[]) Methods \u00b6 ---Returns a giftbag mod by its numerical ID. ---@param id number ---@return GUID function GB.GetModGUID(id) ---Renders the contents of the UI, based on the data arrays in flash. function GB.RenderContent() Objects \u00b6 ---@class GiftBagContentUI : Feature ---Represents a mod entry in the UI. ---@class GiftBagContentUIEntry ---@field ID number ID in UI. ---@field Name string ---@field Description string ---@field Enabled boolean ---@field Locked boolean Locked giftbags cannot be toggled. ---@field Mod string GUID of giftbag mod.","title":"GiftBagContent"},{"location":"Client/UI/GiftBagContent/#giftbagcontent","text":"The GiftBagContent UI is the ingame giftbags menu.","title":"GiftBagContent"},{"location":"Client/UI/GiftBagContent/#events-hooks","text":"---Fired after the UI's content is updated, upon opening the UI. ---@event ContentUpdated ---@field RegisterListener fun(self, listener:fun(content:GiftBagContentUIEntry[])) ---@field Fire fun(self, content:GiftBagContentUIEntry[]) ---Fired when the content of the UI needs to be updated. ---@hook GetContent ---@field RegisterHook fun(self, handler:fun(content:GiftBagContentUIEntry[])) ---@field Return fun(self, content:GiftBagContentUIEntry[])","title":"Events &amp; Hooks"},{"location":"Client/UI/GiftBagContent/#methods","text":"---Returns a giftbag mod by its numerical ID. ---@param id number ---@return GUID function GB.GetModGUID(id) ---Renders the contents of the UI, based on the data arrays in flash. function GB.RenderContent()","title":"Methods"},{"location":"Client/UI/GiftBagContent/#objects","text":"---@class GiftBagContentUI : Feature ---Represents a mod entry in the UI. ---@class GiftBagContentUIEntry ---@field ID number ID in UI. ---@field Name string ---@field Description string ---@field Enabled boolean ---@field Locked boolean Locked giftbags cannot be toggled. ---@field Mod string GUID of giftbag mod.","title":"Objects"},{"location":"Client/UI/MessageBox/","text":"MessageBox \u00b6 Client.UI.MessageBox is used to send custom prompts (like with OpenMessageBox in Osiris). Events \u00b6 Subscribe with Client.UI.MessageBox:RegisterListener(event: string, handler: function) . You can subscribe to events coming from a specific message box with RegisterMessageListener() instead. nil","title":"MessageBox"},{"location":"Client/UI/MessageBox/#messagebox","text":"Client.UI.MessageBox is used to send custom prompts (like with OpenMessageBox in Osiris).","title":"MessageBox"},{"location":"Client/UI/MessageBox/#events","text":"Subscribe with Client.UI.MessageBox:RegisterListener(event: string, handler: function) . You can subscribe to events coming from a specific message box with RegisterMessageListener() instead. nil","title":"Events"},{"location":"Client/UI/OptionsInput/","text":"OptionsInput \u00b6 The OptionsInput UI script handles new functionality for the input settings menu, which, curiously, is actually a separate UI from the settings menu, and just like it, it does not exist whilst not open. Epip extends it to provide custom keybinding configuration tabs, as well as to read the user's current keybindings as strings to display elsewhere. Events & Hooks \u00b6 ---@event ActionExecuted ---@field RegisterListener fun(self, listener:fun(action:string, binding:string)) ---@field Fire fun(self, action:string, binding:string) ---@hook ShouldRenderEntry ---@field RegisterHook fun(self, handler:fun(render:boolean, entry:OptionsInputKeybind)) ---@field Return fun(self, render:boolean, entry:OptionsInputKeybind) ---Saves the user's bindings to the disk. ---@hook CanExecuteAction ---@field RegisterHook fun(self, handler:fun(execute:boolean, action:string, data:OptionsInputKeybind)) ---@field Return fun(self, execute:boolean, action:string, data:OptionsInputKeybind) Methods \u00b6 function Options.SaveBindings() ---Returns whether a keybind should show up in the UI. ---@param entry OptionsInputKeybind ---@return boolean function Options.ShouldRenderEntry(entry) ---Returns whether an action can be currently executed. ---@param actionID string ---@return boolean function Options.CanExecuteAction(actionID) ---Loads the user's bindings from the disk. function Options.LoadBindings() ---@param actionID string ---@param bindingIndex integer ---@param keybind string function Options.SetKeybind(actionID, bindingIndex, keybind) ---Updates the input map. Call this every time after modifying the user's keybindings. ---@return table<string, string[]> function Options.UpdateInputMap() ---@param index integer function _SavedKeybind:GetShortInputString(index) ---Get the saved keybinds for an action. ---@param action string ---@return OptionsInputSavedKeybind function Options.GetKeybinds(action) ---Get the data for a custom action. ---@return OptionsInputKeybind function Options.GetActionData(action) ---@param action OptionsInputKeybind function Options.RegisterAction(action) ---@param id string ---@param tab OptionsInputTab function Options.RegisterTab(id, tab) ---@param tabID string ---@param keybind OptionsInputKeybind function Options.AddEntry(tabID, keybind) ---@param tabID integer function Options.GetTabIndex(tabID) ---@return boolean function Options.IsBindingKey() ---@param key string function Options.SetPotentialBinding(key) Objects \u00b6 ---@class OptionsInputUI : Feature ---@field CUSTOM_TABS table<string, OptionsInputTab> ---@field TAB_ORDER string[] ---@field nextCustomTabID integer ---@field renderedCustomTabs table<integer, string> ---@field tabIndexes table<string, integer> ---@field nextEntryID integer ---@field entries table<integer, string> ---@field keyBeingBound? string ---@field indexBeingBound? integer ---@field potentialBinding? string ---@field BINDINGS table<string, OptionsInputSavedKeybind> ---@field ACTIONS table<string, OptionsInputKeybind> ---@field INPUT_MAP table<string, string[]> Maps keyboard inputs to a list of actions that are bound to it. ---@class OptionsInputTab ---@field ID string ---@field Name string ---@field Label string? ---@field Keybinds OptionsInputKeybind[] ---@class OptionsInputKeybind ---@field Name string ---@field ID string ---@field DefaultInput1 string? ---@field DefaultInput2 string? ---@field DeveloperOnly boolean? If true, the binding will not be visible in the UI outside of developer mode (and won't function either) ---@class OptionsInputSavedKeybind ---@field ID string ---@field Input1 OptionsInputBinding ---@field Input2 OptionsInputBinding","title":"OptionsInput"},{"location":"Client/UI/OptionsInput/#optionsinput","text":"The OptionsInput UI script handles new functionality for the input settings menu, which, curiously, is actually a separate UI from the settings menu, and just like it, it does not exist whilst not open. Epip extends it to provide custom keybinding configuration tabs, as well as to read the user's current keybindings as strings to display elsewhere.","title":"OptionsInput"},{"location":"Client/UI/OptionsInput/#events-hooks","text":"---@event ActionExecuted ---@field RegisterListener fun(self, listener:fun(action:string, binding:string)) ---@field Fire fun(self, action:string, binding:string) ---@hook ShouldRenderEntry ---@field RegisterHook fun(self, handler:fun(render:boolean, entry:OptionsInputKeybind)) ---@field Return fun(self, render:boolean, entry:OptionsInputKeybind) ---Saves the user's bindings to the disk. ---@hook CanExecuteAction ---@field RegisterHook fun(self, handler:fun(execute:boolean, action:string, data:OptionsInputKeybind)) ---@field Return fun(self, execute:boolean, action:string, data:OptionsInputKeybind)","title":"Events &amp; Hooks"},{"location":"Client/UI/OptionsInput/#methods","text":"function Options.SaveBindings() ---Returns whether a keybind should show up in the UI. ---@param entry OptionsInputKeybind ---@return boolean function Options.ShouldRenderEntry(entry) ---Returns whether an action can be currently executed. ---@param actionID string ---@return boolean function Options.CanExecuteAction(actionID) ---Loads the user's bindings from the disk. function Options.LoadBindings() ---@param actionID string ---@param bindingIndex integer ---@param keybind string function Options.SetKeybind(actionID, bindingIndex, keybind) ---Updates the input map. Call this every time after modifying the user's keybindings. ---@return table<string, string[]> function Options.UpdateInputMap() ---@param index integer function _SavedKeybind:GetShortInputString(index) ---Get the saved keybinds for an action. ---@param action string ---@return OptionsInputSavedKeybind function Options.GetKeybinds(action) ---Get the data for a custom action. ---@return OptionsInputKeybind function Options.GetActionData(action) ---@param action OptionsInputKeybind function Options.RegisterAction(action) ---@param id string ---@param tab OptionsInputTab function Options.RegisterTab(id, tab) ---@param tabID string ---@param keybind OptionsInputKeybind function Options.AddEntry(tabID, keybind) ---@param tabID integer function Options.GetTabIndex(tabID) ---@return boolean function Options.IsBindingKey() ---@param key string function Options.SetPotentialBinding(key)","title":"Methods"},{"location":"Client/UI/OptionsInput/#objects","text":"---@class OptionsInputUI : Feature ---@field CUSTOM_TABS table<string, OptionsInputTab> ---@field TAB_ORDER string[] ---@field nextCustomTabID integer ---@field renderedCustomTabs table<integer, string> ---@field tabIndexes table<string, integer> ---@field nextEntryID integer ---@field entries table<integer, string> ---@field keyBeingBound? string ---@field indexBeingBound? integer ---@field potentialBinding? string ---@field BINDINGS table<string, OptionsInputSavedKeybind> ---@field ACTIONS table<string, OptionsInputKeybind> ---@field INPUT_MAP table<string, string[]> Maps keyboard inputs to a list of actions that are bound to it. ---@class OptionsInputTab ---@field ID string ---@field Name string ---@field Label string? ---@field Keybinds OptionsInputKeybind[] ---@class OptionsInputKeybind ---@field Name string ---@field ID string ---@field DefaultInput1 string? ---@field DefaultInput2 string? ---@field DeveloperOnly boolean? If true, the binding will not be visible in the UI outside of developer mode (and won't function either) ---@class OptionsInputSavedKeybind ---@field ID string ---@field Input1 OptionsInputBinding ---@field Input2 OptionsInputBinding","title":"Objects"},{"location":"Client/UI/OptionsSettings/","text":"OptionsSettings \u00b6 Handles the settings menu. Extended to allow for custom setting tabs. Note that the input menu is a different UI - documentation for it pending. Adding settings \u00b6 To create a tab with settings for your mod, start by calling RegisterMod(mod: string, data: OptionsSettingsOptionSet) , before SessionLoading - preferably in the lua script's body. The data table should have your mod's name, header (displayed at the top) and side button label (displayed on the button that switches tabs). You may also pass Options in the table at this time, or register settings later through RegisterOptions . Client.UI.OptionsSettings.RegisterMod(\"EpipEncounters\", { SideButtonLabel = \"Epip Encounters\", TabHeader = \"<font color='7e72d6' size='23'>Epip Encounters</font>\", }) Options is a list of the options for the settings tab, in order that they will appear in. They are in the OptionsSettingsOption format - see fields . The following types of options exist: Checkbox : OptionsSettingsCheckbox struct Dropdown : OptionsSettingsDropdown struct Slider : OptionsSettingsSlider struct Button : OptionsSettingsButton struct Header : OptionsSettingsHeader struct, just a text label. Good for dividing sections of your setting menu. Example options, a dropdown and a slider: { ID = \"ExaminePosition\", Type = \"Dropdown\", Label = \"Examine Menu Position\", Tooltip = \"Controls the default position of the Examine menu when it is opened.\", DefaultValue = 1, Options = { \"Center\", \"Middle Right\", \"Middle Left\" } }, { ID = \"OverheadsSize\", Type = \"Slider\", Label = \"Overhead Text Size\", MinAmount = 10, MaxAmount = 45, DefaultValue = 19, Interval = 1, HideNumbers = false, Tooltip = \"Controls the size of regular text above characters talking.<br><br>Default is 19.\", }, Once you've got your mod and settings registered, they will appear in the settings menu. The user will be able to change them, and their values will be stored to the disk. To query the value of a setting, use GetOptionValue(mod: string, setting: string) . For checkboxes this returns boolean , for other elements it's number . Dropdowns use 1-based indexing! (1 = first option) . You can also set the stored value (or hook GetOptionValue ). If you do this, keep in mind that it will not be automatically saved to disk. if (Minimap.visible ~= Client.UI.OptionsSettings.GetOptionValue(\"EpipEncounters\", \"Minimap\")) then Client.UI.OptionsSettings.SetOptionValue(\"EpipEncounters\", \"Minimap\", Minimap.visible) Client.UI.OptionsSettings.SaveSettings() end You may use the IsElementEnabled hook to make elements in your menu non-interactable. You can use this to require a setting to first have another one enabled/disabled by the user. Events \u00b6 nil","title":"OptionsSettings"},{"location":"Client/UI/OptionsSettings/#optionssettings","text":"Handles the settings menu. Extended to allow for custom setting tabs. Note that the input menu is a different UI - documentation for it pending.","title":"OptionsSettings"},{"location":"Client/UI/OptionsSettings/#adding-settings","text":"To create a tab with settings for your mod, start by calling RegisterMod(mod: string, data: OptionsSettingsOptionSet) , before SessionLoading - preferably in the lua script's body. The data table should have your mod's name, header (displayed at the top) and side button label (displayed on the button that switches tabs). You may also pass Options in the table at this time, or register settings later through RegisterOptions . Client.UI.OptionsSettings.RegisterMod(\"EpipEncounters\", { SideButtonLabel = \"Epip Encounters\", TabHeader = \"<font color='7e72d6' size='23'>Epip Encounters</font>\", }) Options is a list of the options for the settings tab, in order that they will appear in. They are in the OptionsSettingsOption format - see fields . The following types of options exist: Checkbox : OptionsSettingsCheckbox struct Dropdown : OptionsSettingsDropdown struct Slider : OptionsSettingsSlider struct Button : OptionsSettingsButton struct Header : OptionsSettingsHeader struct, just a text label. Good for dividing sections of your setting menu. Example options, a dropdown and a slider: { ID = \"ExaminePosition\", Type = \"Dropdown\", Label = \"Examine Menu Position\", Tooltip = \"Controls the default position of the Examine menu when it is opened.\", DefaultValue = 1, Options = { \"Center\", \"Middle Right\", \"Middle Left\" } }, { ID = \"OverheadsSize\", Type = \"Slider\", Label = \"Overhead Text Size\", MinAmount = 10, MaxAmount = 45, DefaultValue = 19, Interval = 1, HideNumbers = false, Tooltip = \"Controls the size of regular text above characters talking.<br><br>Default is 19.\", }, Once you've got your mod and settings registered, they will appear in the settings menu. The user will be able to change them, and their values will be stored to the disk. To query the value of a setting, use GetOptionValue(mod: string, setting: string) . For checkboxes this returns boolean , for other elements it's number . Dropdowns use 1-based indexing! (1 = first option) . You can also set the stored value (or hook GetOptionValue ). If you do this, keep in mind that it will not be automatically saved to disk. if (Minimap.visible ~= Client.UI.OptionsSettings.GetOptionValue(\"EpipEncounters\", \"Minimap\")) then Client.UI.OptionsSettings.SetOptionValue(\"EpipEncounters\", \"Minimap\", Minimap.visible) Client.UI.OptionsSettings.SaveSettings() end You may use the IsElementEnabled hook to make elements in your menu non-interactable. You can use this to require a setting to first have another one enabled/disabled by the user.","title":"Adding settings"},{"location":"Client/UI/OptionsSettings/#events","text":"nil","title":"Events"},{"location":"Documentation/Terminology/","text":"Terminology \u00b6 This page contains definitions for various terms commonly used throughout the docs. Internal \u00b6 Refers to classes, methods or other resources that are only intended to be used directly by Epip itself, and not any mods that have it as a dependency. Also see visiblity . Visibility \u00b6 Refers to visibility of class methods and fields in the OOP sense. In Epip, fields prefixed with _ (single underscore) are considered \"private\" and meant only for internal use within the class, while fields prefixed with __ (two underscores) are considered \"protected\" and meant only for use within the class hierarchy. In both cases, these fields are not part of the public API and are not meant to be used within your own mod, and are subject to change without notice. Lua does not have an explicit concept of visibility for table fields. Though it is possible to create \"private\" fields via upvaluing, this is avoided in Epip due to readability issues as well as the fact that private visibility is arguably a bad practice in modding - it actively prevents other modders from patching parts of your mod to achieve compatibility / interoperability. For the same reason, local functions and variables are avoided, and only used for niche cases. As such, visibility in Epip is merely a suggestion. It is possible to use/override invisible fields as a last measure if you truly deem it necessary, however it's a better idea to first contact the Epip team to see if the public API can be adjusted to your needs, as that could lead to cleaner solutions that would better satisfy current and future developers. Invisible Fields \u00b6 Refers to usage of private , protected or package fields in a context where they trigger the invisible diagnostic. Namespacing \u00b6 As is the case for modding the base game, numerous resources in Epip use string identifiers which in turn can lead to collisions. Namespacing refers to prefixing such identifiers to avoid accidentally overwriting resources from other Epip mods. The Library and Feature classes contain wrapper methods for certain core libraries to automatically prefix identifiers used. Most methods in Epip do not throw nor warn when you attempt to register some resource under an ID already in use - this is by design so as to allow easy overriding.","title":"Terminology"},{"location":"Documentation/Terminology/#terminology","text":"This page contains definitions for various terms commonly used throughout the docs.","title":"Terminology"},{"location":"Documentation/Terminology/#internal","text":"Refers to classes, methods or other resources that are only intended to be used directly by Epip itself, and not any mods that have it as a dependency. Also see visiblity .","title":"Internal"},{"location":"Documentation/Terminology/#visibility","text":"Refers to visibility of class methods and fields in the OOP sense. In Epip, fields prefixed with _ (single underscore) are considered \"private\" and meant only for internal use within the class, while fields prefixed with __ (two underscores) are considered \"protected\" and meant only for use within the class hierarchy. In both cases, these fields are not part of the public API and are not meant to be used within your own mod, and are subject to change without notice. Lua does not have an explicit concept of visibility for table fields. Though it is possible to create \"private\" fields via upvaluing, this is avoided in Epip due to readability issues as well as the fact that private visibility is arguably a bad practice in modding - it actively prevents other modders from patching parts of your mod to achieve compatibility / interoperability. For the same reason, local functions and variables are avoided, and only used for niche cases. As such, visibility in Epip is merely a suggestion. It is possible to use/override invisible fields as a last measure if you truly deem it necessary, however it's a better idea to first contact the Epip team to see if the public API can be adjusted to your needs, as that could lead to cleaner solutions that would better satisfy current and future developers.","title":"Visibility"},{"location":"Documentation/Terminology/#invisible-fields","text":"Refers to usage of private , protected or package fields in a context where they trigger the invisible diagnostic.","title":"Invisible Fields"},{"location":"Documentation/Terminology/#namespacing","text":"As is the case for modding the base game, numerous resources in Epip use string identifiers which in turn can lead to collisions. Namespacing refers to prefixing such identifiers to avoid accidentally overwriting resources from other Epip mods. The Library and Feature classes contain wrapper methods for certain core libraries to automatically prefix identifiers used. Most methods in Epip do not throw nor warn when you attempt to register some resource under an ID already in use - this is by design so as to allow easy overriding.","title":"Namespacing"},{"location":"Documentation/Client/Pointer/","text":"Pointer \u00b6 The Pointer library contains methods related to the pointer for the game world; used to interact with game objects and move around. It's primarily a wrapper around Ext.UI.GetPickingState() . In addition to methods to quickly fetch its entities, it offers events for when they change (when the user starts/stops hovering over a new entity). PointerLib Class \u00b6 Inherits from Library . Events and Hooks \u00b6 HoverCharacterChanged (event) \u00b6 @field Character EclCharacter? HoverCharacter2Changed (event) \u00b6 Fired when the corpse character over the pointer changes. @field Character EclCharacter? HoverItemChanged (event) \u00b6 @field Item EclItem? HoverEntityChanged (event) \u00b6 @field Entity Entity? DragDropStateChanged (event) \u00b6 Fired when a player starts or ends a drag drop. @field State DragDropManagerPlayerDragInfo? `nil` if the player stopped dragging. @field PlayerIndex integer Methods \u00b6 GetCurrentCharacter \u00b6 function PointerLib.GetCurrentCharacter(playerIndex, includeDead) -- (Client-only) -> EclCharacter? @param playerIndex integer? Defaults to 1. @param includeDead boolean? Defaults to false. GetCurrentEntity \u00b6 function PointerLib.GetCurrentEntity(playerIndex) -- (Client-only) -> Entity? @param playerIndex integer? Defaults to 1. GetCurrentItem \u00b6 function PointerLib.GetCurrentItem(playerIndex) -- (Client-only) -> EclItem? @param playerIndex integer? Defaults to 1. GetDragDropState \u00b6 function PointerLib.GetDragDropState(playerIndex) -- (Client-only) -> DragDropManagerPlayerDragInfo Returns the drag-drop system state for a player. @param playerIndex integer? Defaults to 1. GetDraggedItem \u00b6 function PointerLib.GetDraggedItem(playerIndex) -- (Client-only) -> EclItem? Returns the item being dragged by a player. @param playerIndex integer? Defaults to 1. GetDraggedSkill \u00b6 function PointerLib.GetDraggedSkill(playerIndex) -- (Client-only) -> string? -- Can be an action as well. Returns the skill being dragged by a player. @param playerIndex integer? Defaults to 1. GetWalkablePosition \u00b6 function PointerLib.GetWalkablePosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1. GetWorldPosition \u00b6 function PointerLib.GetWorldPosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1. IsDragging \u00b6 function PointerLib.IsDragging(playerIndex) -- (Client-only) -> boolean Returns whether the player's cursor is dragging anything. @param playerIndex integer? Defaults to 1.","title":"Pointer"},{"location":"Documentation/Client/Pointer/#pointer","text":"The Pointer library contains methods related to the pointer for the game world; used to interact with game objects and move around. It's primarily a wrapper around Ext.UI.GetPickingState() . In addition to methods to quickly fetch its entities, it offers events for when they change (when the user starts/stops hovering over a new entity).","title":"Pointer"},{"location":"Documentation/Client/Pointer/#pointerlib-class","text":"Inherits from Library .","title":"PointerLib Class"},{"location":"Documentation/Client/Pointer/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Client/Pointer/#hovercharacterchanged-event","text":"@field Character EclCharacter?","title":"HoverCharacterChanged (event)"},{"location":"Documentation/Client/Pointer/#hovercharacter2changed-event","text":"Fired when the corpse character over the pointer changes. @field Character EclCharacter?","title":"HoverCharacter2Changed (event)"},{"location":"Documentation/Client/Pointer/#hoveritemchanged-event","text":"@field Item EclItem?","title":"HoverItemChanged (event)"},{"location":"Documentation/Client/Pointer/#hoverentitychanged-event","text":"@field Entity Entity?","title":"HoverEntityChanged (event)"},{"location":"Documentation/Client/Pointer/#dragdropstatechanged-event","text":"Fired when a player starts or ends a drag drop. @field State DragDropManagerPlayerDragInfo? `nil` if the player stopped dragging. @field PlayerIndex integer","title":"DragDropStateChanged (event)"},{"location":"Documentation/Client/Pointer/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/Pointer/#getcurrentcharacter","text":"function PointerLib.GetCurrentCharacter(playerIndex, includeDead) -- (Client-only) -> EclCharacter? @param playerIndex integer? Defaults to 1. @param includeDead boolean? Defaults to false.","title":"GetCurrentCharacter"},{"location":"Documentation/Client/Pointer/#getcurrententity","text":"function PointerLib.GetCurrentEntity(playerIndex) -- (Client-only) -> Entity? @param playerIndex integer? Defaults to 1.","title":"GetCurrentEntity"},{"location":"Documentation/Client/Pointer/#getcurrentitem","text":"function PointerLib.GetCurrentItem(playerIndex) -- (Client-only) -> EclItem? @param playerIndex integer? Defaults to 1.","title":"GetCurrentItem"},{"location":"Documentation/Client/Pointer/#getdragdropstate","text":"function PointerLib.GetDragDropState(playerIndex) -- (Client-only) -> DragDropManagerPlayerDragInfo Returns the drag-drop system state for a player. @param playerIndex integer? Defaults to 1.","title":"GetDragDropState"},{"location":"Documentation/Client/Pointer/#getdraggeditem","text":"function PointerLib.GetDraggedItem(playerIndex) -- (Client-only) -> EclItem? Returns the item being dragged by a player. @param playerIndex integer? Defaults to 1.","title":"GetDraggedItem"},{"location":"Documentation/Client/Pointer/#getdraggedskill","text":"function PointerLib.GetDraggedSkill(playerIndex) -- (Client-only) -> string? -- Can be an action as well. Returns the skill being dragged by a player. @param playerIndex integer? Defaults to 1.","title":"GetDraggedSkill"},{"location":"Documentation/Client/Pointer/#getwalkableposition","text":"function PointerLib.GetWalkablePosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1.","title":"GetWalkablePosition"},{"location":"Documentation/Client/Pointer/#getworldposition","text":"function PointerLib.GetWorldPosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1.","title":"GetWorldPosition"},{"location":"Documentation/Client/Pointer/#isdragging","text":"function PointerLib.IsDragging(playerIndex) -- (Client-only) -> boolean Returns whether the player's cursor is dragging anything. @param playerIndex integer? Defaults to 1.","title":"IsDragging"},{"location":"Documentation/Client/UI/Generic/Introduction/","text":"Generic \u00b6 Generic is a framework for creating UIs using just lua scripting. It functions by instancing a special .swf with various types of elements implemented that you can then interface with from lua. It offers various advantages over traditional UI creation: No fiddling with flash : UI creation with Generic uses purely lua. You do not need to touch or know anything about flash files. Extendability and moddability : UIs made with Generic, along with their elements, are exposed to all mods; any script can hook these UIs to add elements to them or modify them, something not possible with .swf UIs. Fast prototyping : all you need to do to test your changes to your UIs is to reload lua. There is no requirement for external tools nor any exporting process. Reusability : \"prefabs\" with custom APIs can be created to work with groups of elements in a reusable manner across different UIs, and offered to mods that use yours as a dependency. Generic powers every UI in Epip made after its inception, including: Quick Examine Hotbar Groups Save/Load Overlay Debug Display Debug Menu / Control Panel Fishing minigame Quick Find Settings menu (partially) Bedazzled (match 3 minigame) Getting started \u00b6 Call Generic.Create() to create a new UI. local Generic = Client.UI.Generic local ExampleUI = Generic.Create(\"PIP_ExampleUI\") Generic UIs are composed of elements; these can be interactable controls (such as buttons), visual elements (backgrounds, icons) and containers (lists and grids of elements). You can add elements to your UI by calling CreateElement() : -- Creates a tiled background element. -- All elements must have a unique string ID. local background = ExampleUI:CreateElement(\"MyBackground\", \"GenericUI_Element_TiledBackground\") Elements are lua objects with methods and events to interface with them - all elements share basic getters/setters for properties like position, and offer additional calls based on their intended purpose. -- Set the background to solid black with 400x400 size. background:SetBackground(\"Black\", 400, 400) Parenting elements is supported. Parented elements use positioning relative to their parent, as would be in regular flash, and inherit certain other properties like visibility. To create child elements, you can pass an element (or its ID) as a third parameter to CreateElement() or call AddChild() on an existing element reference: -- Adds a button local closeButton = background:AddChild(\"CloseButton\", \"GenericUI_Element_Button\") closeButton:SetType(\"Close\") -- Sets the appearance -- Put the button in the top right corner of the parent element (MyBackground) with a 20px offset on both axes closeButton:SetPositionRelativeToParent(\"TopRight\", -20, 20) All elements implement basic mouse-related events (entering, exiting, press, release) as well as high-level ones based on the element's purpose. Text is available via the GenericUI_Element_Text element: local header = background:AddChild(\"MyHeader\", \"GenericUI_Element_Text\") header:SetText(Text.Format(\"My UI\", {Color = Color.BLACK})) header:SetSize(400, 50) header:SetPositionRelativeToParent(\"Top\", 0, 60) -- Sets the header's position to the top center of the panel, with a 60px offset from the top -- \"Pressed\" event is akin to the general MouseUp event, but only fires if the button is not disabled. closeButton.Events.Pressed:Subscribe(function (_) -- Close the UI when the button is pressed ExampleUI:Hide() end) Generic UI elements have no lifetime restrictions and references to them may be stored and used at any time. You can store them within your UI table for convenient access, but this is not a necessity if moddability is a concern - your UI, as well as all of its elements, are always available to other modders through their string IDs. These IDs are valid within your UI only and therefore need not be prefixed. -- Other modders can access your UI by its string ID local yourUI = Generic.GetInstance(\"PIP_ExampleUI\") local yourAcceptButton = yourUI:GetElementByID(\"AcceptButton\") -- And they may interface with them just as you would yourUI:CreateElement(\"MyNewElement\", \"GenericUI_Element_IggyIcon\") yourAcceptButton:SetVisible(false) Internally, Generic UIs are no different from regular UIs - there is a UIObject for each UI, and its elements exist within it as flash MovieClips. Access to all these is available. -- Direct access to UIObject and MovieClip is available print(ExampleUI:GetUI()) print(acceptButton:GetMovieClip()) -- GenericUI instances inherit from the same class as built-in UIs in Epip print(ExampleUI:IsFlagged(\"OF_PlayerInput1\")) The code in this section is from an example UI in Epip/Examples/GenericUI.lua . Warning Though accessing an element's MovieClip is possible, its purpose is for internal & debug usage only. Interfacing with elements outside of their public APIs is not supported and any such use is prone to breaking in future releases with no warning. Elements \u00b6 The following element types are implemented: Empty: an element with no visual presence. Ideal for anchoring or as a root for custom container prefabs. Texture: displays a texture resource. Text: displays a text field, optionally user-editable. IggyIcon: displays an Iggy icon - an icon from a texture atlas. Color: displays a solid color. ComboBox: implements a combobox (dropdown). Slider: implements a slider. Slot: implements a hotbar-like slot, with cooldown/refresh animations. See GenericUI_Prefab_HotbarSlot for a ready-to-use inventory-like slot. Worthy of distinction are the following \"container/list\" elements, whose purpose is to position their children in a specific layout: VerticalList: positions elements along the vertical axis. Equivalent to Larian's listDisplay . HorizontalList: positions elements along the horizontal axis. Equivalent to Larian's horizontalList . ScrollList: positions elements along the vertical axis and has a set frame size; overflowing elements can be accessed by scrolling the viewport with a scrollbar. Equivalent to Larian's scrollList . Grid: positions elements in a grid composed of rows and columns of elements. Equivalent to Larian's grid . You can read up about them on their dedicated pages. The following element types also exist, but are deprecated in favor of Prefab-based solutions: Button: replaced by GenericUI_Prefab_Button . StateButton: a button with 2 states (inactive/active). Replaced by GenericUI_Prefab_Button . Divider: replaced by Texture element and SlicedTexture prefab. TiledBackground: a 9-sliced resizable background. Replaced by SlicedTexture. These elements continue to exist for backwards compatibility, but their usage in newer UIs is discouraged. Prefabs \u00b6 Prefabs are classes which initialize and manage groups of elements; they allow complex pieces of UIs to be reused efficiently, being analogous to ex. Fragments in Android UI development. Typically, prefabs have a public constructor which takes UI, ID and parent parameters, creates & initializes its elements, and returns an instance of the prefab class. Prefabs implement high-level, contextual APIs to interact with their elements indirectly - ideally the user should not need to consider how the prefab is structured in terms of actual elements; the prefab manages its hierarchy of elements. The Spinner prefab for example implements a spinner form element; the user may use the -/+ buttons to decrement/increment a value, and that value can be queried using :GetValue() on the prefab instance. This Spinner is composed of Text and Button elements, as well as a background. A prefab in itself is not an element, but may implement the Elementable interface to allow calling Element methods on them, by specifying the target element (most commonly the root of the prefab). The Stylable interface allows customizing the appearance of prefabs through styles consisting of textures, sounds, and other assets/parameters. Each prefab using this interface declares its own style class with possible customizations. If a prefab does not use this system, you can of course always tweak the elements yourself directly. Limitations, considerations and observations \u00b6 Sprite-based animations \u00b6 There is currently no convenient way of creating animations that involve multiple animation sprites. Two solutions have been theorized, but their practicality is untested: Animate the Texture element: this appears to be the most straightforward option (and already possible); the obvious inconvenience being the need to import every frame of your animation as a separate texture resource. The performance of repeatedly calling :SetTexture() has also not been investigated. Implement a custom element: it is theoretically possible to implement a custom flash element in Generic, importing its script and Sprite from another .swf . You could setup your animation in the .swf as you'd normally do in flash and create a simple element to instantiate it from Generic. This approach has the massive problem of flash library slots being limited; there's only a few available slots for custom libraries, and they would have to be registered in advance within Generic's swf (ex. use ImportAssets to import \"Custom1.swf\", \"Custom2.swf\", and have the user override those to provide their custom elements). Stutters when creating hundreds of elements at a time \u00b6 Creating MovieClips programmatically appears to be the major performance bottleneck in Generic/Iggy. UIs that instantiate hundreds of elements at once will likely see noticeable stutter during that process. The performance of these UIs afterwards is normal . The major UIs that suffer from this are inventory-like UIs, due to the Slot element being particularly complex and consisting of multiple parts. In v1066, measures have been taken to minimize the amount of DisplayObjects created - certain aspects of Slots such as the cooldown animation are now only created on-demand, resulting in a 30-35% performance improvement when creating Slot elements that do not use all of its features. No further possible major improvements are known. It's worth noting that the problems lies within class instantiation and not Generic itself; vanilla UIs such as PartyInventory and Craft experience similar stutters when needing to create a ton of slots/recipes. A possible workaround for this is to create your elements during the load screen, however this will inflict the resulting \"stutter\" as extra loading time for the user. Epip prefers initializing UIs on-demand; that is, the UI basically doesn't exist until it is necessary. When working with UIs where this is a concern, it is recommended to implement a pooling system to reuse elements. Avoid clearing and re-creating lists of hundreds of elements - instead reuse existing instances. QuickInventory and Codex sections that inherit from Features.Codex.Sections.Grid are good examples of implementing pooling for an inventory-like UI, massively improving responsiveness after the creation of the elements. Testing \u00b6 Since user interaction in Generic is driven through events in Lua, it's theoretically possible to implement instrumented tests for UIs by invoking those events to spoof user interaction. Wrong container size when using prefabs \u00b6 Container size is by default recalculated upon adding an element; in the case of adding prefabs, this happens when the root of the prefab is added. As such, the container will use the size of the first element created by the prefab, before any other element creation or calls. To address positioning issues, you should call RepositionElements() on the container after all elements are added and initialized. Disabling auto-positioning with SetRepositionAfterAdding() in this case might improve performance. Overlay UIs \u00b6 Though overlay UIs are an overall good solution to extending vanilla UIs, regular ones made in Flash still have moddability issues. Two mods overlaying the same part of a UI is gonna result in a visual conflict with both of them overlapping. The recommended solution for this problem in Generic (assuming both mods are using it) is to insert elements of one overlay UI onto the other as a compatibility measure. If you have mod A and B both with an overlay UI that extends a similar area of the vanilla UI, mod B could check for mod A being loaded and if it is, instead of creating its own overlay UI, mod B could add its own overlay elements into the Generic UI of mod A. This of course only works reliably if mod A offers a stable UI structure, which is why it's not recommended to change element IDs or keys of element references in the UI table in new versions of your mod. With that in mind there is little reason to create overlay UIs for Generic UIs. It is far simpler and reliable to simply insert your elements within the UI itself. Colored translucency in textures \u00b6 Textures with low alpha and colored (non-grayscale) areas just don't appear to render correctly. The low-alpha areas will appear much brighter than expected and may exhibit strange blending with UIs below it. DDS color format and compression chosen doesn't seem to have an effect on this; it is suspected to be either an Iggy bug or a bug within the texture-to-bitmap engine function. Textures with black dropshadows or brownish backgrounds like the one in the example screenshot appear fine. The exact alpha+color combinations that cause this issue are unknown. GenericUI Class \u00b6 Inherits from Feature . Methods \u00b6 Create \u00b6 function GenericUI.Create(id, layer) -> GenericUI_Instance @param id string @param layer integer? Defaults to `DEFAULT_LAYER`. GetInstance \u00b6 function GenericUI.GetInstance(id) -> GenericUI_Instance Returns the instance of a Generic UI by its identifier. @param id string|integer String ID of the UI or its TypeID. GetPrefab \u00b6 function GenericUI.GetPrefab(className) -> T @param className `T`|GenericUI_PrefabClass Inherit \u00b6 function GenericUI.Inherit(tbl1, tbl2) @param tbl1 table @param tbl2 table RegisterElementType \u00b6 function GenericUI.RegisterElementType(elementType, elementTable) @param elementType string @param elementTable GenericUI_Element RegisterPrefab \u00b6 function GenericUI.RegisterPrefab(id, prefab) Registers a prefab. @param id string @param prefab table","title":"Introduction"},{"location":"Documentation/Client/UI/Generic/Introduction/#generic","text":"Generic is a framework for creating UIs using just lua scripting. It functions by instancing a special .swf with various types of elements implemented that you can then interface with from lua. It offers various advantages over traditional UI creation: No fiddling with flash : UI creation with Generic uses purely lua. You do not need to touch or know anything about flash files. Extendability and moddability : UIs made with Generic, along with their elements, are exposed to all mods; any script can hook these UIs to add elements to them or modify them, something not possible with .swf UIs. Fast prototyping : all you need to do to test your changes to your UIs is to reload lua. There is no requirement for external tools nor any exporting process. Reusability : \"prefabs\" with custom APIs can be created to work with groups of elements in a reusable manner across different UIs, and offered to mods that use yours as a dependency. Generic powers every UI in Epip made after its inception, including: Quick Examine Hotbar Groups Save/Load Overlay Debug Display Debug Menu / Control Panel Fishing minigame Quick Find Settings menu (partially) Bedazzled (match 3 minigame)","title":"Generic"},{"location":"Documentation/Client/UI/Generic/Introduction/#getting-started","text":"Call Generic.Create() to create a new UI. local Generic = Client.UI.Generic local ExampleUI = Generic.Create(\"PIP_ExampleUI\") Generic UIs are composed of elements; these can be interactable controls (such as buttons), visual elements (backgrounds, icons) and containers (lists and grids of elements). You can add elements to your UI by calling CreateElement() : -- Creates a tiled background element. -- All elements must have a unique string ID. local background = ExampleUI:CreateElement(\"MyBackground\", \"GenericUI_Element_TiledBackground\") Elements are lua objects with methods and events to interface with them - all elements share basic getters/setters for properties like position, and offer additional calls based on their intended purpose. -- Set the background to solid black with 400x400 size. background:SetBackground(\"Black\", 400, 400) Parenting elements is supported. Parented elements use positioning relative to their parent, as would be in regular flash, and inherit certain other properties like visibility. To create child elements, you can pass an element (or its ID) as a third parameter to CreateElement() or call AddChild() on an existing element reference: -- Adds a button local closeButton = background:AddChild(\"CloseButton\", \"GenericUI_Element_Button\") closeButton:SetType(\"Close\") -- Sets the appearance -- Put the button in the top right corner of the parent element (MyBackground) with a 20px offset on both axes closeButton:SetPositionRelativeToParent(\"TopRight\", -20, 20) All elements implement basic mouse-related events (entering, exiting, press, release) as well as high-level ones based on the element's purpose. Text is available via the GenericUI_Element_Text element: local header = background:AddChild(\"MyHeader\", \"GenericUI_Element_Text\") header:SetText(Text.Format(\"My UI\", {Color = Color.BLACK})) header:SetSize(400, 50) header:SetPositionRelativeToParent(\"Top\", 0, 60) -- Sets the header's position to the top center of the panel, with a 60px offset from the top -- \"Pressed\" event is akin to the general MouseUp event, but only fires if the button is not disabled. closeButton.Events.Pressed:Subscribe(function (_) -- Close the UI when the button is pressed ExampleUI:Hide() end) Generic UI elements have no lifetime restrictions and references to them may be stored and used at any time. You can store them within your UI table for convenient access, but this is not a necessity if moddability is a concern - your UI, as well as all of its elements, are always available to other modders through their string IDs. These IDs are valid within your UI only and therefore need not be prefixed. -- Other modders can access your UI by its string ID local yourUI = Generic.GetInstance(\"PIP_ExampleUI\") local yourAcceptButton = yourUI:GetElementByID(\"AcceptButton\") -- And they may interface with them just as you would yourUI:CreateElement(\"MyNewElement\", \"GenericUI_Element_IggyIcon\") yourAcceptButton:SetVisible(false) Internally, Generic UIs are no different from regular UIs - there is a UIObject for each UI, and its elements exist within it as flash MovieClips. Access to all these is available. -- Direct access to UIObject and MovieClip is available print(ExampleUI:GetUI()) print(acceptButton:GetMovieClip()) -- GenericUI instances inherit from the same class as built-in UIs in Epip print(ExampleUI:IsFlagged(\"OF_PlayerInput1\")) The code in this section is from an example UI in Epip/Examples/GenericUI.lua . Warning Though accessing an element's MovieClip is possible, its purpose is for internal & debug usage only. Interfacing with elements outside of their public APIs is not supported and any such use is prone to breaking in future releases with no warning.","title":"Getting started"},{"location":"Documentation/Client/UI/Generic/Introduction/#elements","text":"The following element types are implemented: Empty: an element with no visual presence. Ideal for anchoring or as a root for custom container prefabs. Texture: displays a texture resource. Text: displays a text field, optionally user-editable. IggyIcon: displays an Iggy icon - an icon from a texture atlas. Color: displays a solid color. ComboBox: implements a combobox (dropdown). Slider: implements a slider. Slot: implements a hotbar-like slot, with cooldown/refresh animations. See GenericUI_Prefab_HotbarSlot for a ready-to-use inventory-like slot. Worthy of distinction are the following \"container/list\" elements, whose purpose is to position their children in a specific layout: VerticalList: positions elements along the vertical axis. Equivalent to Larian's listDisplay . HorizontalList: positions elements along the horizontal axis. Equivalent to Larian's horizontalList . ScrollList: positions elements along the vertical axis and has a set frame size; overflowing elements can be accessed by scrolling the viewport with a scrollbar. Equivalent to Larian's scrollList . Grid: positions elements in a grid composed of rows and columns of elements. Equivalent to Larian's grid . You can read up about them on their dedicated pages. The following element types also exist, but are deprecated in favor of Prefab-based solutions: Button: replaced by GenericUI_Prefab_Button . StateButton: a button with 2 states (inactive/active). Replaced by GenericUI_Prefab_Button . Divider: replaced by Texture element and SlicedTexture prefab. TiledBackground: a 9-sliced resizable background. Replaced by SlicedTexture. These elements continue to exist for backwards compatibility, but their usage in newer UIs is discouraged.","title":"Elements"},{"location":"Documentation/Client/UI/Generic/Introduction/#prefabs","text":"Prefabs are classes which initialize and manage groups of elements; they allow complex pieces of UIs to be reused efficiently, being analogous to ex. Fragments in Android UI development. Typically, prefabs have a public constructor which takes UI, ID and parent parameters, creates & initializes its elements, and returns an instance of the prefab class. Prefabs implement high-level, contextual APIs to interact with their elements indirectly - ideally the user should not need to consider how the prefab is structured in terms of actual elements; the prefab manages its hierarchy of elements. The Spinner prefab for example implements a spinner form element; the user may use the -/+ buttons to decrement/increment a value, and that value can be queried using :GetValue() on the prefab instance. This Spinner is composed of Text and Button elements, as well as a background. A prefab in itself is not an element, but may implement the Elementable interface to allow calling Element methods on them, by specifying the target element (most commonly the root of the prefab). The Stylable interface allows customizing the appearance of prefabs through styles consisting of textures, sounds, and other assets/parameters. Each prefab using this interface declares its own style class with possible customizations. If a prefab does not use this system, you can of course always tweak the elements yourself directly.","title":"Prefabs"},{"location":"Documentation/Client/UI/Generic/Introduction/#limitations-considerations-and-observations","text":"","title":"Limitations, considerations and observations"},{"location":"Documentation/Client/UI/Generic/Introduction/#sprite-based-animations","text":"There is currently no convenient way of creating animations that involve multiple animation sprites. Two solutions have been theorized, but their practicality is untested: Animate the Texture element: this appears to be the most straightforward option (and already possible); the obvious inconvenience being the need to import every frame of your animation as a separate texture resource. The performance of repeatedly calling :SetTexture() has also not been investigated. Implement a custom element: it is theoretically possible to implement a custom flash element in Generic, importing its script and Sprite from another .swf . You could setup your animation in the .swf as you'd normally do in flash and create a simple element to instantiate it from Generic. This approach has the massive problem of flash library slots being limited; there's only a few available slots for custom libraries, and they would have to be registered in advance within Generic's swf (ex. use ImportAssets to import \"Custom1.swf\", \"Custom2.swf\", and have the user override those to provide their custom elements).","title":"Sprite-based animations"},{"location":"Documentation/Client/UI/Generic/Introduction/#stutters-when-creating-hundreds-of-elements-at-a-time","text":"Creating MovieClips programmatically appears to be the major performance bottleneck in Generic/Iggy. UIs that instantiate hundreds of elements at once will likely see noticeable stutter during that process. The performance of these UIs afterwards is normal . The major UIs that suffer from this are inventory-like UIs, due to the Slot element being particularly complex and consisting of multiple parts. In v1066, measures have been taken to minimize the amount of DisplayObjects created - certain aspects of Slots such as the cooldown animation are now only created on-demand, resulting in a 30-35% performance improvement when creating Slot elements that do not use all of its features. No further possible major improvements are known. It's worth noting that the problems lies within class instantiation and not Generic itself; vanilla UIs such as PartyInventory and Craft experience similar stutters when needing to create a ton of slots/recipes. A possible workaround for this is to create your elements during the load screen, however this will inflict the resulting \"stutter\" as extra loading time for the user. Epip prefers initializing UIs on-demand; that is, the UI basically doesn't exist until it is necessary. When working with UIs where this is a concern, it is recommended to implement a pooling system to reuse elements. Avoid clearing and re-creating lists of hundreds of elements - instead reuse existing instances. QuickInventory and Codex sections that inherit from Features.Codex.Sections.Grid are good examples of implementing pooling for an inventory-like UI, massively improving responsiveness after the creation of the elements.","title":"Stutters when creating hundreds of elements at a time"},{"location":"Documentation/Client/UI/Generic/Introduction/#testing","text":"Since user interaction in Generic is driven through events in Lua, it's theoretically possible to implement instrumented tests for UIs by invoking those events to spoof user interaction.","title":"Testing"},{"location":"Documentation/Client/UI/Generic/Introduction/#wrong-container-size-when-using-prefabs","text":"Container size is by default recalculated upon adding an element; in the case of adding prefabs, this happens when the root of the prefab is added. As such, the container will use the size of the first element created by the prefab, before any other element creation or calls. To address positioning issues, you should call RepositionElements() on the container after all elements are added and initialized. Disabling auto-positioning with SetRepositionAfterAdding() in this case might improve performance.","title":"Wrong container size when using prefabs"},{"location":"Documentation/Client/UI/Generic/Introduction/#overlay-uis","text":"Though overlay UIs are an overall good solution to extending vanilla UIs, regular ones made in Flash still have moddability issues. Two mods overlaying the same part of a UI is gonna result in a visual conflict with both of them overlapping. The recommended solution for this problem in Generic (assuming both mods are using it) is to insert elements of one overlay UI onto the other as a compatibility measure. If you have mod A and B both with an overlay UI that extends a similar area of the vanilla UI, mod B could check for mod A being loaded and if it is, instead of creating its own overlay UI, mod B could add its own overlay elements into the Generic UI of mod A. This of course only works reliably if mod A offers a stable UI structure, which is why it's not recommended to change element IDs or keys of element references in the UI table in new versions of your mod. With that in mind there is little reason to create overlay UIs for Generic UIs. It is far simpler and reliable to simply insert your elements within the UI itself.","title":"Overlay UIs"},{"location":"Documentation/Client/UI/Generic/Introduction/#colored-translucency-in-textures","text":"Textures with low alpha and colored (non-grayscale) areas just don't appear to render correctly. The low-alpha areas will appear much brighter than expected and may exhibit strange blending with UIs below it. DDS color format and compression chosen doesn't seem to have an effect on this; it is suspected to be either an Iggy bug or a bug within the texture-to-bitmap engine function. Textures with black dropshadows or brownish backgrounds like the one in the example screenshot appear fine. The exact alpha+color combinations that cause this issue are unknown.","title":"Colored translucency in textures"},{"location":"Documentation/Client/UI/Generic/Introduction/#genericui-class","text":"Inherits from Feature .","title":"GenericUI Class"},{"location":"Documentation/Client/UI/Generic/Introduction/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/UI/Generic/Introduction/#create","text":"function GenericUI.Create(id, layer) -> GenericUI_Instance @param id string @param layer integer? Defaults to `DEFAULT_LAYER`.","title":"Create"},{"location":"Documentation/Client/UI/Generic/Introduction/#getinstance","text":"function GenericUI.GetInstance(id) -> GenericUI_Instance Returns the instance of a Generic UI by its identifier. @param id string|integer String ID of the UI or its TypeID.","title":"GetInstance"},{"location":"Documentation/Client/UI/Generic/Introduction/#getprefab","text":"function GenericUI.GetPrefab(className) -> T @param className `T`|GenericUI_PrefabClass","title":"GetPrefab"},{"location":"Documentation/Client/UI/Generic/Introduction/#inherit","text":"function GenericUI.Inherit(tbl1, tbl2) @param tbl1 table @param tbl2 table","title":"Inherit"},{"location":"Documentation/Client/UI/Generic/Introduction/#registerelementtype","text":"function GenericUI.RegisterElementType(elementType, elementTable) @param elementType string @param elementTable GenericUI_Element","title":"RegisterElementType"},{"location":"Documentation/Client/UI/Generic/Introduction/#registerprefab","text":"function GenericUI.RegisterPrefab(id, prefab) Registers a prefab. @param id string @param prefab table","title":"RegisterPrefab"},{"location":"Documentation/Client/UI/Generic/Elements/Button/","text":"Button \u00b6 Deprecated This element has been deprecated in favor of a Prefab-based solution. See GenericUI_Prefab_Button . The element continues to be available for backwards compatibility. The GenericUI_Element_Button button element implements a typical button form element. It may be disabled (preventing user interaction) and will fire a contextual event if it is activated while not disabled. GenericUI_Element_Button Class \u00b6 Inherits from GenericUI_Element . Methods \u00b6 IsEnabled \u00b6 function GenericUI_Element_Button:IsEnabled() -> boolean Returns whether the button is enabled. SetEnabled \u00b6 function GenericUI_Element_Button:SetEnabled(enabled) Sets the button's enabled state. Enabled buttons are interactable. @param enabled boolean SetText \u00b6 function GenericUI_Element_Button:SetText(text, textY) Sets the button's text. @param text string @param textY number? Vertical offset for the text. Use for centering. SetType \u00b6 function GenericUI_Element_Button:SetType(buttonType) Sets the button's visuals. @param buttonType GenericUI_Element_Button_Type","title":"Button"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#button","text":"Deprecated This element has been deprecated in favor of a Prefab-based solution. See GenericUI_Prefab_Button . The element continues to be available for backwards compatibility. The GenericUI_Element_Button button element implements a typical button form element. It may be disabled (preventing user interaction) and will fire a contextual event if it is activated while not disabled.","title":"Button"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#genericui_element_button-class","text":"Inherits from GenericUI_Element .","title":"GenericUI_Element_Button Class"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#isenabled","text":"function GenericUI_Element_Button:IsEnabled() -> boolean Returns whether the button is enabled.","title":"IsEnabled"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#setenabled","text":"function GenericUI_Element_Button:SetEnabled(enabled) Sets the button's enabled state. Enabled buttons are interactable. @param enabled boolean","title":"SetEnabled"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#settext","text":"function GenericUI_Element_Button:SetText(text, textY) Sets the button's text. @param text string @param textY number? Vertical offset for the text. Use for centering.","title":"SetText"},{"location":"Documentation/Client/UI/Generic/Elements/Button/#settype","text":"function GenericUI_Element_Button:SetType(buttonType) Sets the button's visuals. @param buttonType GenericUI_Element_Button_Type","title":"SetType"},{"location":"Documentation/Client/UI/Generic/Elements/Color/","text":"Color \u00b6 The GenericUI_Element_Color element displays a solid color with full opacity. It's intended for displaying single colors, useful for solid-color backgrounds or as part of color-related widgets that might need to visualize them. Its performance for \"painting\" textures dynamically is untested. GenericUI_Element_Color Class \u00b6 Inherits from GenericUI_Element . Methods \u00b6 SetColor \u00b6 function GenericUI_Element_Color:SetColor(color) Sets the color shown by the element. @param color RGBColor","title":"Color"},{"location":"Documentation/Client/UI/Generic/Elements/Color/#color","text":"The GenericUI_Element_Color element displays a solid color with full opacity. It's intended for displaying single colors, useful for solid-color backgrounds or as part of color-related widgets that might need to visualize them. Its performance for \"painting\" textures dynamically is untested.","title":"Color"},{"location":"Documentation/Client/UI/Generic/Elements/Color/#genericui_element_color-class","text":"Inherits from GenericUI_Element .","title":"GenericUI_Element_Color Class"},{"location":"Documentation/Client/UI/Generic/Elements/Color/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/UI/Generic/Elements/Color/#setcolor","text":"function GenericUI_Element_Color:SetColor(color) Sets the color shown by the element. @param color RGBColor","title":"SetColor"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/","text":"ComboBox \u00b6 The GenericUI_Element_ComboBox element implements a combobox form element. The user may change its value to any labelled one from a predefined list. You can set its options with SetOptions() or AddOption() . Comboboxes contain no options by default. GenericUI_Element_ComboBox Class \u00b6 Inherits from GenericUI_Element . Methods \u00b6 AddOption \u00b6 function GenericUI_Element_ComboBox:AddOption(id, label) Adds an option to the combobox. @param id string @param label string ClearOptions \u00b6 function GenericUI_Element_ComboBox:ClearOptions() Removes all options from the combobox. SelectOption \u00b6 function GenericUI_Element_ComboBox:SelectOption(id) Sets the currently selected option. @param id string SetOpenUpwards \u00b6 function GenericUI_Element_ComboBox:SetOpenUpwards(openUpwards) Sets whether the combobox should open upwards, or downwards (default) Use to determine the orientation of the options selector when opened. @param openUpwards boolean SetOptions \u00b6 function GenericUI_Element_ComboBox:SetOptions(options) Sets the options for the combobox. Equivalent to calling ClearOptions() then AddOption() for each option in the list passed. @param options GenericUI_Element_ComboBox_Option[]","title":"ComboBox"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#combobox","text":"The GenericUI_Element_ComboBox element implements a combobox form element. The user may change its value to any labelled one from a predefined list. You can set its options with SetOptions() or AddOption() . Comboboxes contain no options by default.","title":"ComboBox"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#genericui_element_combobox-class","text":"Inherits from GenericUI_Element .","title":"GenericUI_Element_ComboBox Class"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#addoption","text":"function GenericUI_Element_ComboBox:AddOption(id, label) Adds an option to the combobox. @param id string @param label string","title":"AddOption"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#clearoptions","text":"function GenericUI_Element_ComboBox:ClearOptions() Removes all options from the combobox.","title":"ClearOptions"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#selectoption","text":"function GenericUI_Element_ComboBox:SelectOption(id) Sets the currently selected option. @param id string","title":"SelectOption"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#setopenupwards","text":"function GenericUI_Element_ComboBox:SetOpenUpwards(openUpwards) Sets whether the combobox should open upwards, or downwards (default) Use to determine the orientation of the options selector when opened. @param openUpwards boolean","title":"SetOpenUpwards"},{"location":"Documentation/Client/UI/Generic/Elements/ComboBox/#setoptions","text":"function GenericUI_Element_ComboBox:SetOptions(options) Sets the options for the combobox. Equivalent to calling ClearOptions() then AddOption() for each option in the list passed. @param options GenericUI_Element_ComboBox_Option[]","title":"SetOptions"},{"location":"Documentation/Client/UI/Generic/Elements/Element/","text":"Element \u00b6 GenericUI_Element is the base class that all built-in elements inherit from. GenericUI_Element Class \u00b6 Methods \u00b6 AddChild \u00b6 function GenericUI_Element:AddChild(id, elementType) -> `T` @param id string @param elementType `T`|GenericUI_ElementType Destroy \u00b6 function GenericUI_Element:Destroy() GetChildren \u00b6 function GenericUI_Element:GetChildren() -> GenericUI_Element[] Returns the children of the element. GetHeight \u00b6 function GenericUI_Element:GetHeight(considerOverrides) -> number Returns the height of the element. @param considerOverrides boolean? If `true`, height overrides will be considered. Defaults to `true`. GetMovieClip \u00b6 function GenericUI_Element:GetMovieClip() -> FlashMovieClip Get the movie clip of this element. GetParent \u00b6 function GenericUI_Element:GetParent() -> GenericUI_Element Returns the parent element. GetPosition \u00b6 function GenericUI_Element:GetPosition() -> number, number -- X and Y coordinates in local space. GetRawHeight \u00b6 function GenericUI_Element:GetRawHeight() -> number Returns the height of the element without considering its children. GetRawSize \u00b6 function GenericUI_Element:GetRawSize() -> Vector2 Gets the size of the element without considering its children. GetRawWidth \u00b6 function GenericUI_Element:GetRawWidth() -> number Returns the width of the element without considering its children. GetScale \u00b6 function GenericUI_Element:GetScale() -> Vector2 Returns the scale of the element. GetSize \u00b6 function GenericUI_Element:GetSize(considerOverrides) -> Vector2 Returns the size of the element. @param considerOverrides boolean? If `true`, width/height overrides will be considered. Defaults to `true`. GetSizeOverride \u00b6 function GenericUI_Element:GetSizeOverride() -> Vector2? Returns the size override of the element, if any. GetWidth \u00b6 function GenericUI_Element:GetWidth(considerOverrides) -> number Returns the width of the element. @param considerOverrides boolean? If `true`, width overrides will be considered. Defaults to `true`. Move \u00b6 function GenericUI_Element:Move(x, y) Moves the element a certain amount of pixels from its current position. @param x number @param y number RegisterListener \u00b6 function GenericUI_Element:RegisterListener(eventType, handler) @param eventType string @param handler function RemoveChild \u00b6 function GenericUI_Element:RemoveChild(element) @param element GenericUI_Element RemoveScrollRect \u00b6 function GenericUI_Element:RemoveScrollRect() Removes the scroll rect from the element, if any. SetAlpha \u00b6 function GenericUI_Element:SetAlpha(alpha, affectChildren) @param alpha number @param affectChildren boolean? Defaults to not affecting children alpha. SetAsDraggableArea \u00b6 function GenericUI_Element:SetAsDraggableArea() Sets this element as the area for dragging the entire UI. SetCenterInLists \u00b6 function GenericUI_Element:SetCenterInLists(center) Sets whether the element should be horizontally centered in VerticalList and ScrollList. @param center boolean SetChildIndex \u00b6 function GenericUI_Element:SetChildIndex(child, index) Sets the Z-order index of a child element. @param child string|GenericUI_Element @param index integer SetMouseChildren \u00b6 function GenericUI_Element:SetMouseChildren(enabled) @param enabled boolean SetMouseEnabled \u00b6 function GenericUI_Element:SetMouseEnabled(enabled) @param enabled boolean SetPosition \u00b6 function GenericUI_Element:SetPosition(x, y) @param x number @param y number SetPositionRelativeToParent \u00b6 function GenericUI_Element:SetPositionRelativeToParent(position, horizontalOffset, verticalOffset) Sets the position of the element relative to its parent. @param position GenericUI_Element_RelativePosition @param horizontalOffset number? @param verticalOffset number? SetRotation \u00b6 function GenericUI_Element:SetRotation(degrees) @param degrees number SetScale \u00b6 function GenericUI_Element:SetScale(scale) Sets the scale of the element. @param scale Vector2 SetScrollRect \u00b6 function GenericUI_Element:SetScrollRect(position, size) Sets the scroll rect of the element. @param position Vector2 @param size Vector2 SetSize \u00b6 function GenericUI_Element:SetSize(width, height) @param width number @param height number SetSizeOverride \u00b6 function GenericUI_Element:SetSizeOverride(width, height) Sets the size override, used to override the element size within list-like elements. @param width number @param height number SetTooltip \u00b6 function GenericUI_Element:SetTooltip(tooltipType, tooltip) Sets the tooltip of the element. @param tooltipType TooltipLib_TooltipType @param tooltip any TODO document SetVisible \u00b6 function GenericUI_Element:SetVisible(visible) @param visible boolean Tween \u00b6 function GenericUI_Element:Tween(tween) @param tween GenericUI_ElementTween","title":"Element"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#element","text":"GenericUI_Element is the base class that all built-in elements inherit from.","title":"Element"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#genericui_element-class","text":"","title":"GenericUI_Element Class"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#addchild","text":"function GenericUI_Element:AddChild(id, elementType) -> `T` @param id string @param elementType `T`|GenericUI_ElementType","title":"AddChild"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#destroy","text":"function GenericUI_Element:Destroy()","title":"Destroy"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getchildren","text":"function GenericUI_Element:GetChildren() -> GenericUI_Element[] Returns the children of the element.","title":"GetChildren"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getheight","text":"function GenericUI_Element:GetHeight(considerOverrides) -> number Returns the height of the element. @param considerOverrides boolean? If `true`, height overrides will be considered. Defaults to `true`.","title":"GetHeight"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getmovieclip","text":"function GenericUI_Element:GetMovieClip() -> FlashMovieClip Get the movie clip of this element.","title":"GetMovieClip"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getparent","text":"function GenericUI_Element:GetParent() -> GenericUI_Element Returns the parent element.","title":"GetParent"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getposition","text":"function GenericUI_Element:GetPosition() -> number, number -- X and Y coordinates in local space.","title":"GetPosition"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getrawheight","text":"function GenericUI_Element:GetRawHeight() -> number Returns the height of the element without considering its children.","title":"GetRawHeight"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getrawsize","text":"function GenericUI_Element:GetRawSize() -> Vector2 Gets the size of the element without considering its children.","title":"GetRawSize"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getrawwidth","text":"function GenericUI_Element:GetRawWidth() -> number Returns the width of the element without considering its children.","title":"GetRawWidth"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getscale","text":"function GenericUI_Element:GetScale() -> Vector2 Returns the scale of the element.","title":"GetScale"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getsize","text":"function GenericUI_Element:GetSize(considerOverrides) -> Vector2 Returns the size of the element. @param considerOverrides boolean? If `true`, width/height overrides will be considered. Defaults to `true`.","title":"GetSize"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getsizeoverride","text":"function GenericUI_Element:GetSizeOverride() -> Vector2? Returns the size override of the element, if any.","title":"GetSizeOverride"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#getwidth","text":"function GenericUI_Element:GetWidth(considerOverrides) -> number Returns the width of the element. @param considerOverrides boolean? If `true`, width overrides will be considered. Defaults to `true`.","title":"GetWidth"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#move","text":"function GenericUI_Element:Move(x, y) Moves the element a certain amount of pixels from its current position. @param x number @param y number","title":"Move"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#registerlistener","text":"function GenericUI_Element:RegisterListener(eventType, handler) @param eventType string @param handler function","title":"RegisterListener"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#removechild","text":"function GenericUI_Element:RemoveChild(element) @param element GenericUI_Element","title":"RemoveChild"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#removescrollrect","text":"function GenericUI_Element:RemoveScrollRect() Removes the scroll rect from the element, if any.","title":"RemoveScrollRect"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setalpha","text":"function GenericUI_Element:SetAlpha(alpha, affectChildren) @param alpha number @param affectChildren boolean? Defaults to not affecting children alpha.","title":"SetAlpha"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setasdraggablearea","text":"function GenericUI_Element:SetAsDraggableArea() Sets this element as the area for dragging the entire UI.","title":"SetAsDraggableArea"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setcenterinlists","text":"function GenericUI_Element:SetCenterInLists(center) Sets whether the element should be horizontally centered in VerticalList and ScrollList. @param center boolean","title":"SetCenterInLists"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setchildindex","text":"function GenericUI_Element:SetChildIndex(child, index) Sets the Z-order index of a child element. @param child string|GenericUI_Element @param index integer","title":"SetChildIndex"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setmousechildren","text":"function GenericUI_Element:SetMouseChildren(enabled) @param enabled boolean","title":"SetMouseChildren"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setmouseenabled","text":"function GenericUI_Element:SetMouseEnabled(enabled) @param enabled boolean","title":"SetMouseEnabled"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setposition","text":"function GenericUI_Element:SetPosition(x, y) @param x number @param y number","title":"SetPosition"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setpositionrelativetoparent","text":"function GenericUI_Element:SetPositionRelativeToParent(position, horizontalOffset, verticalOffset) Sets the position of the element relative to its parent. @param position GenericUI_Element_RelativePosition @param horizontalOffset number? @param verticalOffset number?","title":"SetPositionRelativeToParent"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setrotation","text":"function GenericUI_Element:SetRotation(degrees) @param degrees number","title":"SetRotation"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setscale","text":"function GenericUI_Element:SetScale(scale) Sets the scale of the element. @param scale Vector2","title":"SetScale"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setscrollrect","text":"function GenericUI_Element:SetScrollRect(position, size) Sets the scroll rect of the element. @param position Vector2 @param size Vector2","title":"SetScrollRect"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setsize","text":"function GenericUI_Element:SetSize(width, height) @param width number @param height number","title":"SetSize"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setsizeoverride","text":"function GenericUI_Element:SetSizeOverride(width, height) Sets the size override, used to override the element size within list-like elements. @param width number @param height number","title":"SetSizeOverride"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#settooltip","text":"function GenericUI_Element:SetTooltip(tooltipType, tooltip) Sets the tooltip of the element. @param tooltipType TooltipLib_TooltipType @param tooltip any TODO document","title":"SetTooltip"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#setvisible","text":"function GenericUI_Element:SetVisible(visible) @param visible boolean","title":"SetVisible"},{"location":"Documentation/Client/UI/Generic/Elements/Element/#tween","text":"function GenericUI_Element:Tween(tween) @param tween GenericUI_ElementTween","title":"Tween"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/","text":"Button \u00b6 The GenericUI_Prefab_Button prefab implements a button; an element that can be clicked and visually reacts to user interaction. This prefab is intended to replace the built-in Button and StateButton elements. It's major advantage is easier styling and maintainability, as there is no flash code directly involved. Buttons implement I_Stylable , which allows customizing their group of textures and other visual assets to use. Styles can be registered via :RegisterStyle() and fetched using :GetStyle() . StateButtons (buttons that toggle between active/inactive states) are created by supplying and additional style to use for the active state, via :SetActiveStyle() . Epip has many premade button styles. You may browse them via GenericUITextures UI. The button prefab additionally supports adding an IggyIcon to it with :SetIcon() . GenericUI_Prefab_Button Class \u00b6 Inherits from GenericUI_Prefab, GenericUI_I_Stylable, GenericUI_I_Elementable . Prefab for a button. Events and Hooks \u00b6 Pressed (event) \u00b6 Fires only if the button is enabled. RightClicked (event) \u00b6 An event object with no parameters. Methods \u00b6 Create \u00b6 function GenericUI_Prefab_Button.Create(ui, id, parent, style) -> GenericUI_Prefab_Button @param ui GenericUI_Instance @param id string @param parent GenericUI_Element|string @param style GenericUI_Prefab_Button_Style GetIconElement \u00b6 function GenericUI_Prefab_Button:GetIconElement() -> GenericUI_Element_IggyIcon? Returns the icon element, if any. GetLabelElement \u00b6 function GenericUI_Prefab_Button:GetLabelElement() -> GenericUI_Prefab_Text Returns the label element. GetRootElement \u00b6 function GenericUI_Prefab_Button:GetRootElement() @override IsActivated \u00b6 function GenericUI_Prefab_Button:IsActivated() -> boolean Returns whether the button is activated. Will throw if the button is not a state button. IsEnabled \u00b6 function GenericUI_Prefab_Button:IsEnabled() -> boolean Returns whether the button is enabled. Disabled buttons do not fire the Pressed event. SetActivated \u00b6 function GenericUI_Prefab_Button:SetActivated(activated) Sets the activated state of the button. Will throw if the button is not a state button. @param activated any SetActiveStyle \u00b6 function GenericUI_Prefab_Button:SetActiveStyle(style) Sets a style to be used while the button is active. This cannot be used to revert the button to a normal one if it was already a state button. @param style GenericUI_Prefab_Button_Style If background fields are not assigned, the normal style will be used as fallback. SetEnabled \u00b6 function GenericUI_Prefab_Button:SetEnabled(enabled) Sets the enabled state of the button. @param enabled boolean SetIcon \u00b6 function GenericUI_Prefab_Button:SetIcon(icon, size, relativePosition, offset) Sets an icon for the button. @param icon icon @param size Vector2 @param relativePosition GenericUI_Element_RelativePosition? Defaults to `\"Center\"`. @param offset Vector2? Defaults to `(0, 0)`. SetLabel \u00b6 function GenericUI_Prefab_Button:SetLabel(label, align) Sets the label of the button. @param label string Set to an empty string to hide the label. @param align GenericUI_Element_Text_Align? Defaults to `\"Center\"`. SetTooltip \u00b6 function GenericUI_Prefab_Button:SetTooltip(type, tooltip) Sets the tooltip of the element. @param type TooltipLib_TooltipType @param tooltip any TODO document __OnStyleChanged \u00b6 ---@protected function GenericUI_Prefab_Button:__OnStyleChanged() @override GenericUI_Prefab_Button_Style Class \u00b6 Inherits from GenericUI_I_Stylable_Style . @field IdleTexture TextureLib_Texture @field HighlightedTexture TextureLib_Texture If not present, `IdleTexture` will be used instead. @field PressedTexture TextureLib_Texture? If not present, `IdleTexture` will be used instead. @field DisabledTexture TextureLib_Texture? If not present, `IdleTexture` will be used instead. @field Size Vector2? Defaults to texture size. @field Sound string? Sound effect to play when the button is pressed. Defaults to `DEFAULT_SOUND`. @field IdleOverlay TextureLib_Texture? @field HighlightedOverlay TextureLib_Texture? If not present, `IdleOverlay` will be used instead. @field PressedOverlay TextureLib_Texture? If not present, `IdleOverlay` will be used instead. Methods \u00b6","title":"Button"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#button","text":"The GenericUI_Prefab_Button prefab implements a button; an element that can be clicked and visually reacts to user interaction. This prefab is intended to replace the built-in Button and StateButton elements. It's major advantage is easier styling and maintainability, as there is no flash code directly involved. Buttons implement I_Stylable , which allows customizing their group of textures and other visual assets to use. Styles can be registered via :RegisterStyle() and fetched using :GetStyle() . StateButtons (buttons that toggle between active/inactive states) are created by supplying and additional style to use for the active state, via :SetActiveStyle() . Epip has many premade button styles. You may browse them via GenericUITextures UI. The button prefab additionally supports adding an IggyIcon to it with :SetIcon() .","title":"Button"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#genericui_prefab_button-class","text":"Inherits from GenericUI_Prefab, GenericUI_I_Stylable, GenericUI_I_Elementable . Prefab for a button.","title":"GenericUI_Prefab_Button Class"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#pressed-event","text":"Fires only if the button is enabled.","title":"Pressed (event)"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#rightclicked-event","text":"An event object with no parameters.","title":"RightClicked (event)"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#methods","text":"","title":"Methods"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#create","text":"function GenericUI_Prefab_Button.Create(ui, id, parent, style) -> GenericUI_Prefab_Button @param ui GenericUI_Instance @param id string @param parent GenericUI_Element|string @param style GenericUI_Prefab_Button_Style","title":"Create"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#geticonelement","text":"function GenericUI_Prefab_Button:GetIconElement() -> GenericUI_Element_IggyIcon? Returns the icon element, if any.","title":"GetIconElement"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#getlabelelement","text":"function GenericUI_Prefab_Button:GetLabelElement() -> GenericUI_Prefab_Text Returns the label element.","title":"GetLabelElement"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#getrootelement","text":"function GenericUI_Prefab_Button:GetRootElement() @override","title":"GetRootElement"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#isactivated","text":"function GenericUI_Prefab_Button:IsActivated() -> boolean Returns whether the button is activated. Will throw if the button is not a state button.","title":"IsActivated"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#isenabled","text":"function GenericUI_Prefab_Button:IsEnabled() -> boolean Returns whether the button is enabled. Disabled buttons do not fire the Pressed event.","title":"IsEnabled"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setactivated","text":"function GenericUI_Prefab_Button:SetActivated(activated) Sets the activated state of the button. Will throw if the button is not a state button. @param activated any","title":"SetActivated"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setactivestyle","text":"function GenericUI_Prefab_Button:SetActiveStyle(style) Sets a style to be used while the button is active. This cannot be used to revert the button to a normal one if it was already a state button. @param style GenericUI_Prefab_Button_Style If background fields are not assigned, the normal style will be used as fallback.","title":"SetActiveStyle"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setenabled","text":"function GenericUI_Prefab_Button:SetEnabled(enabled) Sets the enabled state of the button. @param enabled boolean","title":"SetEnabled"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#seticon","text":"function GenericUI_Prefab_Button:SetIcon(icon, size, relativePosition, offset) Sets an icon for the button. @param icon icon @param size Vector2 @param relativePosition GenericUI_Element_RelativePosition? Defaults to `\"Center\"`. @param offset Vector2? Defaults to `(0, 0)`.","title":"SetIcon"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#setlabel","text":"function GenericUI_Prefab_Button:SetLabel(label, align) Sets the label of the button. @param label string Set to an empty string to hide the label. @param align GenericUI_Element_Text_Align? Defaults to `\"Center\"`.","title":"SetLabel"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#settooltip","text":"function GenericUI_Prefab_Button:SetTooltip(type, tooltip) Sets the tooltip of the element. @param type TooltipLib_TooltipType @param tooltip any TODO document","title":"SetTooltip"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#__onstylechanged","text":"---@protected function GenericUI_Prefab_Button:__OnStyleChanged() @override","title":"__OnStyleChanged"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#genericui_prefab_button_style-class","text":"Inherits from GenericUI_I_Stylable_Style . @field IdleTexture TextureLib_Texture @field HighlightedTexture TextureLib_Texture If not present, `IdleTexture` will be used instead. @field PressedTexture TextureLib_Texture? If not present, `IdleTexture` will be used instead. @field DisabledTexture TextureLib_Texture? If not present, `IdleTexture` will be used instead. @field Size Vector2? Defaults to texture size. @field Sound string? Sound effect to play when the button is pressed. Defaults to `DEFAULT_SOUND`. @field IdleOverlay TextureLib_Texture? @field HighlightedOverlay TextureLib_Texture? If not present, `IdleOverlay` will be used instead. @field PressedOverlay TextureLib_Texture? If not present, `IdleOverlay` will be used instead.","title":"GenericUI_Prefab_Button_Style Class"},{"location":"Documentation/Client/UI/Generic/Prefabs/Button/#methods_1","text":"","title":"Methods"},{"location":"Documentation/Global%20Tables/Epip/","text":"Epip \u00b6 The Epip table mainly serves as a container for Features. It contains methods to register Features as well as libraries and UI tables. Use RegisterFeature() to register and initialize a Feature. Epip Class \u00b6 Events and Hooks \u00b6 BeforeFeatureInitialization (event) \u00b6 Fired during feature initialization. @field Feature Feature AfterFeatureInitialization (event) \u00b6 Fired during feature initialization. @field Feature Feature Methods \u00b6 GetFeature \u00b6 function Epip.GetFeature(modTable, id) -> Feature|`T` @param modTable string @param id `T` GetFeature \u00b6 function Epip.GetFeature(id) -> Feature|`T` Overload for fetching features defined in EpipEncounters. @param id `T` InitializeFeature \u00b6 function Epip.InitializeFeature(modTable, id, feature) TODO move to Feature @param modTable string @param id string @param feature Feature InitializeLibrary \u00b6 function Epip.InitializeLibrary() IsDeveloperMode \u00b6 function Epip.IsDeveloperMode(requirePipPoem) -> boolean @param requirePipPoem boolean? Whether a poem to Pip is required for this call to succeed. Defaults to false (which checks Extender dev mode instead) RegisterFeature \u00b6 function Epip.RegisterFeature(modTable, id, feature) Registers a feature, initializing its utility metatable and exposing it to other mods via GetFeature(). Should be called outside of any listener, as soon as the table is defined. This will also check for required path overrides and disable the feature if the required mods are not enabled. @param modTable string @param id string @param feature Feature RegisterFeatureInitializationListener \u00b6 function Epip.RegisterFeatureInitializationListener(modTable, featureID, timing, listener) Registers a FeatureInitialization listener for a specific feature. @param modTable modtable @param featureID string @param timing \"Before\"|\"After\" @param listener fun(ev:Epip.Events.FeatureInitialization) SaveDump \u00b6 function Epip.SaveDump(obj, opts, fileName) @param obj any @param opts any? @param fileName string?","title":"Important Tables"},{"location":"Documentation/Global%20Tables/Epip/#epip","text":"The Epip table mainly serves as a container for Features. It contains methods to register Features as well as libraries and UI tables. Use RegisterFeature() to register and initialize a Feature.","title":"Epip"},{"location":"Documentation/Global%20Tables/Epip/#epip-class","text":"","title":"Epip Class"},{"location":"Documentation/Global%20Tables/Epip/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Global%20Tables/Epip/#beforefeatureinitialization-event","text":"Fired during feature initialization. @field Feature Feature","title":"BeforeFeatureInitialization (event)"},{"location":"Documentation/Global%20Tables/Epip/#afterfeatureinitialization-event","text":"Fired during feature initialization. @field Feature Feature","title":"AfterFeatureInitialization (event)"},{"location":"Documentation/Global%20Tables/Epip/#methods","text":"","title":"Methods"},{"location":"Documentation/Global%20Tables/Epip/#getfeature","text":"function Epip.GetFeature(modTable, id) -> Feature|`T` @param modTable string @param id `T`","title":"GetFeature"},{"location":"Documentation/Global%20Tables/Epip/#getfeature_1","text":"function Epip.GetFeature(id) -> Feature|`T` Overload for fetching features defined in EpipEncounters. @param id `T`","title":"GetFeature"},{"location":"Documentation/Global%20Tables/Epip/#initializefeature","text":"function Epip.InitializeFeature(modTable, id, feature) TODO move to Feature @param modTable string @param id string @param feature Feature","title":"InitializeFeature"},{"location":"Documentation/Global%20Tables/Epip/#initializelibrary","text":"function Epip.InitializeLibrary()","title":"InitializeLibrary"},{"location":"Documentation/Global%20Tables/Epip/#isdevelopermode","text":"function Epip.IsDeveloperMode(requirePipPoem) -> boolean @param requirePipPoem boolean? Whether a poem to Pip is required for this call to succeed. Defaults to false (which checks Extender dev mode instead)","title":"IsDeveloperMode"},{"location":"Documentation/Global%20Tables/Epip/#registerfeature","text":"function Epip.RegisterFeature(modTable, id, feature) Registers a feature, initializing its utility metatable and exposing it to other mods via GetFeature(). Should be called outside of any listener, as soon as the table is defined. This will also check for required path overrides and disable the feature if the required mods are not enabled. @param modTable string @param id string @param feature Feature","title":"RegisterFeature"},{"location":"Documentation/Global%20Tables/Epip/#registerfeatureinitializationlistener","text":"function Epip.RegisterFeatureInitializationListener(modTable, featureID, timing, listener) Registers a FeatureInitialization listener for a specific feature. @param modTable modtable @param featureID string @param timing \"Before\"|\"After\" @param listener fun(ev:Epip.Events.FeatureInitialization)","title":"RegisterFeatureInitializationListener"},{"location":"Documentation/Global%20Tables/Epip/#savedump","text":"function Epip.SaveDump(obj, opts, fileName) @param obj any @param opts any? @param fileName string?","title":"SaveDump"},{"location":"Documentation/Global%20Tables/Feature/","text":"Feature \u00b6 The Feature class is the base plugin class in Epip, which all end-user features inherit from. It provides a plethora of generic utilities useful for any sort of script, mainly in the form of integrations with other core Epip libraries. Features are the recommended way of working with Epip. You may use as many or as few parts of the class as you want; nothing is forced onto you, however its utilities generally speed up development and reduce boilerplate code by quite a lot. Features offer: Event and hook system Easy TSK registration Integration with libraries like Settings, Input, with automatic namespacing to prevent ID conflicts \"Disabling\" and re-enabling the feature at runtime Declaring mod dependencies All utilities from the Library class Features are registered and initialized from the Epip table . Features can be disabled by calling :Disable() , which may also be done automatically based on mod dependencies being missing or the game state being invalid. Disabling a feature has no intrinsic meaning . This does not \"unload\" nor stop their scripting; it's up to you to add :IsEnabled() checks to parts of your scripting that need only run while enabled. This is by design, so as to allow features to be disabled and re-enabled at any time, as well as to allow alternative logic to run while disabled - for example, you might want to show the user a message if they try to use your feature while it's disabled. Consider Features as analogous to GameObjects in Unity (and most other engines): game objects, when disabled, continue to exist in a reduced manner, and their public interfaces remain available (to an extent). Once the game object is re-enabled, its routines resume as normal. Features are intended to work in a similar manner. Features are not just used for scripts targeting the player user; in Epip they are also commonly used to create libraries or wrappers whose use is too specific to be made into a core library. Since Feature inherits from Library, all the tools to create good event-driven libraries remain available. You are encouraged to use Events and Hooks in any kind of feature to facilitate mod interoperability. Feature Class \u00b6 Inherits from Library . Methods \u00b6 Create \u00b6 function Feature.Create(modTable, id, feature) -> Feature WIP. Do not use! Use Epip.RegisterFeature() for the time being. @param modTable string @param id string @param feature Feature GetEnabledFunctor \u00b6 function Feature:GetEnabledFunctor() -> fun():boolean Returns a function that takes no parameters and returns whether the feature is enabled. Intended for use with Event options. GetFeatureID \u00b6 function Feature:GetFeatureID() -> string Returns the ID of the feature. GetModTable \u00b6 function Feature:GetModTable() -> modtable Returns the mod table of the feature. GetNamespace \u00b6 function Feature:GetNamespace() -> string Returns a string containing the feature's mod table and ID. Ex. \"MyModTable_MyFeature\" . GetSettingValue \u00b6 function Feature:GetSettingValue(setting) @param setting string|SettingsLib_Setting RegisterInputAction \u00b6 function Feature:RegisterInputAction(id, action) -> InputLib_Action Registers an InputLib action. @param id string Will be prefixed with the mod table and feature ID. @param action InputLib_Action RegisterSetting \u00b6 function Feature:RegisterSetting(id, data) -> SettingsLib_Setting Registers a setting with the feature's module ID. @param id string @param data SettingsLib_Setting RegisterTest \u00b6 function Feature:RegisterTest(name, func) -> Feature_Test @param name string @param func fun(inst:CoroutineInstance) SaveSettings \u00b6 function Feature:SaveSettings() SetSettingValue \u00b6 function Feature:SetSettingValue(setting, value) Sets the value of a setting. @param setting string|SettingsLib_Setting @param value any __Initialize \u00b6 ---@protected function Feature:__Initialize() Called after the feature is registered. Override to run initialization routines - this is preferable over initializing things at the root of your script, as it is hookable. @virtual __Setup \u00b6 ---@protected function Feature:__Setup() Invoked on SessionLoaded if the feature is not disabled. Override to run initialization routines. __Test \u00b6 ---@protected function Feature:__Test() Invoked on a small delay after SessionLoaded if Epip.IsDeveloperMode(true) is true and the feature is being debugged.","title":"Feature"},{"location":"Documentation/Global%20Tables/Feature/#feature","text":"The Feature class is the base plugin class in Epip, which all end-user features inherit from. It provides a plethora of generic utilities useful for any sort of script, mainly in the form of integrations with other core Epip libraries. Features are the recommended way of working with Epip. You may use as many or as few parts of the class as you want; nothing is forced onto you, however its utilities generally speed up development and reduce boilerplate code by quite a lot. Features offer: Event and hook system Easy TSK registration Integration with libraries like Settings, Input, with automatic namespacing to prevent ID conflicts \"Disabling\" and re-enabling the feature at runtime Declaring mod dependencies All utilities from the Library class Features are registered and initialized from the Epip table . Features can be disabled by calling :Disable() , which may also be done automatically based on mod dependencies being missing or the game state being invalid. Disabling a feature has no intrinsic meaning . This does not \"unload\" nor stop their scripting; it's up to you to add :IsEnabled() checks to parts of your scripting that need only run while enabled. This is by design, so as to allow features to be disabled and re-enabled at any time, as well as to allow alternative logic to run while disabled - for example, you might want to show the user a message if they try to use your feature while it's disabled. Consider Features as analogous to GameObjects in Unity (and most other engines): game objects, when disabled, continue to exist in a reduced manner, and their public interfaces remain available (to an extent). Once the game object is re-enabled, its routines resume as normal. Features are intended to work in a similar manner. Features are not just used for scripts targeting the player user; in Epip they are also commonly used to create libraries or wrappers whose use is too specific to be made into a core library. Since Feature inherits from Library, all the tools to create good event-driven libraries remain available. You are encouraged to use Events and Hooks in any kind of feature to facilitate mod interoperability.","title":"Feature"},{"location":"Documentation/Global%20Tables/Feature/#feature-class","text":"Inherits from Library .","title":"Feature Class"},{"location":"Documentation/Global%20Tables/Feature/#methods","text":"","title":"Methods"},{"location":"Documentation/Global%20Tables/Feature/#create","text":"function Feature.Create(modTable, id, feature) -> Feature WIP. Do not use! Use Epip.RegisterFeature() for the time being. @param modTable string @param id string @param feature Feature","title":"Create"},{"location":"Documentation/Global%20Tables/Feature/#getenabledfunctor","text":"function Feature:GetEnabledFunctor() -> fun():boolean Returns a function that takes no parameters and returns whether the feature is enabled. Intended for use with Event options.","title":"GetEnabledFunctor"},{"location":"Documentation/Global%20Tables/Feature/#getfeatureid","text":"function Feature:GetFeatureID() -> string Returns the ID of the feature.","title":"GetFeatureID"},{"location":"Documentation/Global%20Tables/Feature/#getmodtable","text":"function Feature:GetModTable() -> modtable Returns the mod table of the feature.","title":"GetModTable"},{"location":"Documentation/Global%20Tables/Feature/#getnamespace","text":"function Feature:GetNamespace() -> string Returns a string containing the feature's mod table and ID. Ex. \"MyModTable_MyFeature\" .","title":"GetNamespace"},{"location":"Documentation/Global%20Tables/Feature/#getsettingvalue","text":"function Feature:GetSettingValue(setting) @param setting string|SettingsLib_Setting","title":"GetSettingValue"},{"location":"Documentation/Global%20Tables/Feature/#registerinputaction","text":"function Feature:RegisterInputAction(id, action) -> InputLib_Action Registers an InputLib action. @param id string Will be prefixed with the mod table and feature ID. @param action InputLib_Action","title":"RegisterInputAction"},{"location":"Documentation/Global%20Tables/Feature/#registersetting","text":"function Feature:RegisterSetting(id, data) -> SettingsLib_Setting Registers a setting with the feature's module ID. @param id string @param data SettingsLib_Setting","title":"RegisterSetting"},{"location":"Documentation/Global%20Tables/Feature/#registertest","text":"function Feature:RegisterTest(name, func) -> Feature_Test @param name string @param func fun(inst:CoroutineInstance)","title":"RegisterTest"},{"location":"Documentation/Global%20Tables/Feature/#savesettings","text":"function Feature:SaveSettings()","title":"SaveSettings"},{"location":"Documentation/Global%20Tables/Feature/#setsettingvalue","text":"function Feature:SetSettingValue(setting, value) Sets the value of a setting. @param setting string|SettingsLib_Setting @param value any","title":"SetSettingValue"},{"location":"Documentation/Global%20Tables/Feature/#__initialize","text":"---@protected function Feature:__Initialize() Called after the feature is registered. Override to run initialization routines - this is preferable over initializing things at the root of your script, as it is hookable. @virtual","title":"__Initialize"},{"location":"Documentation/Global%20Tables/Feature/#__setup","text":"---@protected function Feature:__Setup() Invoked on SessionLoaded if the feature is not disabled. Override to run initialization routines.","title":"__Setup"},{"location":"Documentation/Global%20Tables/Feature/#__test","text":"---@protected function Feature:__Test() Invoked on a small delay after SessionLoaded if Epip.IsDeveloperMode(true) is true and the feature is being debugged.","title":"__Test"},{"location":"Documentation/Utilities/Artifact/","text":"Artifact \u00b6 This library is relevant for Epic Encounters only. The Artifact library contains data and methods related to Epic Encounters Artifacts . The ArtifactLib_ArtifactDefinition class holds information for each of the artifacts, including slot, item/rune templates, as well as the related keyword activators and mutators (defined manually). The data is not generated automatically. You must add your own artifacts by calling RegisterArtifact() with the data table filled out. Ideally, this should be done on both contexts, so client scripting can also query the information. ArtifactLib_ArtifactDefinition Class \u00b6 @field ID string @field Slot ItemSlot @field ItemTemplate GUID @field RuneTemplate GUID @field DescriptionHandle TranslatedStringHandle @field KeywordActivators Keyword[] @field KeywordMutators Keyword[] Methods \u00b6 GetDescription \u00b6 function ArtifactLib_ArtifactDefinition:GetDescription() -> string Returns the artifact power's description. GetName \u00b6 function ArtifactLib_ArtifactDefinition:GetName() -> string Returns the artifact's name. GetPowerTooltip \u00b6 function ArtifactLib_ArtifactDefinition:GetPowerTooltip() -> TooltipLib_Element[] Returns a full tooltip showing the artifact's name and power. HasKeyword \u00b6 function ArtifactLib_ArtifactDefinition:HasKeyword(keyword) Returns whether the artifact has a keyword activator or mutator. @param keyword Keyword ArtifactLib Class \u00b6 Inherits from Feature . Methods \u00b6 GetData \u00b6 function ArtifactLib.GetData(artifactID) -> ArtifactLib_ArtifactDefinition? Returns the definition for an artifact. @param artifactID string GetEquippedPowers \u00b6 function ArtifactLib.GetEquippedPowers(char) -- (Server-only) -> ArtifactLib_ArtifactDefinition[] Returns a list of artifact powers active on char. @param char EsvCharacter GetEquippedPowers \u00b6 function ArtifactLib.GetEquippedPowers(char) -- (Client-only) -> ArtifactLib_ArtifactDefinition[] Returns a list of artifact powers active on char. @param char EclCharacter IsEquipped \u00b6 function ArtifactLib.IsEquipped(char, artifact) -- (Server-only) -> boolean Returns whether char has the artifact power active. @param char EsvCharacter @param artifact ArtifactLib_ArtifactDefinition|string IsEquipped \u00b6 function ArtifactLib.IsEquipped(char, artifact) -- (Client-only) -> boolean Returns whether char has the artifact power active. @param char EclCharacter @param artifact ArtifactLib_ArtifactDefinition|string IsOwnedByParty \u00b6 function ArtifactLib.IsOwnedByParty(id) Returns whether the party owns an artifact. @param id string RegisterArtifact \u00b6 function ArtifactLib.RegisterArtifact(data) -> ArtifactLib_ArtifactDefinition Registers the data for an artifact. @param data ArtifactLib_ArtifactDefinition Usage examples \u00b6 This library is used in the Quick Examine UI to display tooltips for artifacts. It is additionally used in the stats tab to check the equipped artifacts of a character.","title":"Artifact"},{"location":"Documentation/Utilities/Artifact/#artifact","text":"This library is relevant for Epic Encounters only. The Artifact library contains data and methods related to Epic Encounters Artifacts . The ArtifactLib_ArtifactDefinition class holds information for each of the artifacts, including slot, item/rune templates, as well as the related keyword activators and mutators (defined manually). The data is not generated automatically. You must add your own artifacts by calling RegisterArtifact() with the data table filled out. Ideally, this should be done on both contexts, so client scripting can also query the information.","title":"Artifact"},{"location":"Documentation/Utilities/Artifact/#artifactlib_artifactdefinition-class","text":"@field ID string @field Slot ItemSlot @field ItemTemplate GUID @field RuneTemplate GUID @field DescriptionHandle TranslatedStringHandle @field KeywordActivators Keyword[] @field KeywordMutators Keyword[]","title":"ArtifactLib_ArtifactDefinition Class"},{"location":"Documentation/Utilities/Artifact/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Artifact/#getdescription","text":"function ArtifactLib_ArtifactDefinition:GetDescription() -> string Returns the artifact power's description.","title":"GetDescription"},{"location":"Documentation/Utilities/Artifact/#getname","text":"function ArtifactLib_ArtifactDefinition:GetName() -> string Returns the artifact's name.","title":"GetName"},{"location":"Documentation/Utilities/Artifact/#getpowertooltip","text":"function ArtifactLib_ArtifactDefinition:GetPowerTooltip() -> TooltipLib_Element[] Returns a full tooltip showing the artifact's name and power.","title":"GetPowerTooltip"},{"location":"Documentation/Utilities/Artifact/#haskeyword","text":"function ArtifactLib_ArtifactDefinition:HasKeyword(keyword) Returns whether the artifact has a keyword activator or mutator. @param keyword Keyword","title":"HasKeyword"},{"location":"Documentation/Utilities/Artifact/#artifactlib-class","text":"Inherits from Feature .","title":"ArtifactLib Class"},{"location":"Documentation/Utilities/Artifact/#methods_1","text":"","title":"Methods"},{"location":"Documentation/Utilities/Artifact/#getdata","text":"function ArtifactLib.GetData(artifactID) -> ArtifactLib_ArtifactDefinition? Returns the definition for an artifact. @param artifactID string","title":"GetData"},{"location":"Documentation/Utilities/Artifact/#getequippedpowers","text":"function ArtifactLib.GetEquippedPowers(char) -- (Server-only) -> ArtifactLib_ArtifactDefinition[] Returns a list of artifact powers active on char. @param char EsvCharacter","title":"GetEquippedPowers"},{"location":"Documentation/Utilities/Artifact/#getequippedpowers_1","text":"function ArtifactLib.GetEquippedPowers(char) -- (Client-only) -> ArtifactLib_ArtifactDefinition[] Returns a list of artifact powers active on char. @param char EclCharacter","title":"GetEquippedPowers"},{"location":"Documentation/Utilities/Artifact/#isequipped","text":"function ArtifactLib.IsEquipped(char, artifact) -- (Server-only) -> boolean Returns whether char has the artifact power active. @param char EsvCharacter @param artifact ArtifactLib_ArtifactDefinition|string","title":"IsEquipped"},{"location":"Documentation/Utilities/Artifact/#isequipped_1","text":"function ArtifactLib.IsEquipped(char, artifact) -- (Client-only) -> boolean Returns whether char has the artifact power active. @param char EclCharacter @param artifact ArtifactLib_ArtifactDefinition|string","title":"IsEquipped"},{"location":"Documentation/Utilities/Artifact/#isownedbyparty","text":"function ArtifactLib.IsOwnedByParty(id) Returns whether the party owns an artifact. @param id string","title":"IsOwnedByParty"},{"location":"Documentation/Utilities/Artifact/#registerartifact","text":"function ArtifactLib.RegisterArtifact(data) -> ArtifactLib_ArtifactDefinition Registers the data for an artifact. @param data ArtifactLib_ArtifactDefinition","title":"RegisterArtifact"},{"location":"Documentation/Utilities/Artifact/#usage-examples","text":"This library is used in the Quick Examine UI to display tooltips for artifacts. It is additionally used in the stats tab to check the equipped artifacts of a character.","title":"Usage examples"},{"location":"Documentation/Utilities/Character/","text":"Character \u00b6 The Character library contains utility methods relating to characters. The vast majority of them are available on both contexts. CharacterLib Class \u00b6 Inherits from Library . Events and Hooks \u00b6 StatusApplied (event) \u00b6 TODO move somewhere else, since victim could be an item @field SourceHandle EntityHandle @field Victim Character|Item @field Status EclStatus|EsvStatus ItemEquipped (event) \u00b6 @field Character Character @field Item Item @field Slot ItemSlot CreateEquipmentVisuals (hook) \u00b6 Client-only. @field Character EclCharacter @field Item EclItem @field Request EclEquipmentVisualSystemSetParam Hookable. @field RawEvent EclLuaCreateEquipmentVisualsRequestEvent Methods \u00b6 CanUseSkill \u00b6 function CharacterLib.CanUseSkill(char, skillID, itemSource) -> boolean Returns whether char can enter preparation state for a skill. @param char Character @param skillID string @param itemSource Item? Get \u00b6 function CharacterLib.Get(identifier, isFlashHandle) -> Character @param identifier GUID|PrefixedGUID|NetId|EntityHandle @param isFlashHandle boolean? If true, the identifier will be passed through DoubleToHandle() first. GetActionPoints \u00b6 function CharacterLib.GetActionPoints(char) -> integer, integer -- Current, maximum @param char Character GetCombatID \u00b6 function CharacterLib.GetCombatID(char) -> integer?, integer? -- The combat ID and team ID. `nil` if the character is not in combat. This is different from the osi query, which returns a reserved value. Returns the combat ID and team ID of char, if any. @param char Character GetCurrentSkill \u00b6 function CharacterLib.GetCurrentSkill(char) -> string? -- `nil` if the character has no active skill state. Returns the ID of the skill that char is preparing or casting. @param char Character GetDynamicStat \u00b6 function CharacterLib.GetDynamicStat(char, statName) @param char Character @param statName string GetEquippedItems \u00b6 function CharacterLib.GetEquippedItems(char) -> table<ItemSlot, EclItem> Returns the equipped items of char, per slot. @param char Character GetExperience \u00b6 function CharacterLib.GetExperience(char) -> integer Returns the current experience points of char. @param char Character GetExperienceRequiredForLevel \u00b6 function CharacterLib.GetExperienceRequiredForLevel(targetLevel) -> integer -- Experience points. Returns the cumulative experience required to reach a level. @param targetLevel integer GetGender \u00b6 function CharacterLib.GetGender(char) -> Gender Returns the gender of char. @param char Character GetHighestPartyAbility \u00b6 function CharacterLib.GetHighestPartyAbility(char, ability) -> integer Gets the highest stat score of all characters in char's party. @param char Character @param ability string Needs to be a property indexable in char.Stats GetInitiative \u00b6 function CharacterLib.GetInitiative(char) -> integer Returns the initiative of char. @param char Character GetLevel \u00b6 function CharacterLib.GetLevel(char) -> integer Returns the level of char. @param char Character GetMaxCarryWeight \u00b6 function CharacterLib.GetMaxCarryWeight(char) -> integer -- In \"grams\" Returns the maximum carry weight of char. @param char Character GetMovement \u00b6 function CharacterLib.GetMovement(char) -> number -- In centimeters. Returns the calculated movement stat of a character. @param char Character GetOwner \u00b6 function CharacterLib.GetOwner(char) -> Character? Returns the character's owner, if it is a summon or party follower(?). @param char Character GetPartyMembers \u00b6 function CharacterLib.GetPartyMembers(char) -- (Client-only) -> EclCharacter[] Includes the char passed per param.-- the char passed per param. Returns a list of party members of char's party. Char must be a player. Depends on PlayerInfo. @param char EclCharacter GetPartyMembers \u00b6 function CharacterLib.GetPartyMembers(char) -- (Server-only) -> EsvCharacter[] Includes the char passed per param.-- the char passed per param. Returns a list of party members of char's party. Char must be a player. @param char EsvCharacter GetRace \u00b6 function CharacterLib.GetRace(char) -> Race Returns the current race of char. @param char Character GetRealRace \u00b6 function CharacterLib.GetRealRace(char) -> Race Returns the original race of a player char, before any transforms. @param char Character Must be tagged with \"REALLY_{Race}\" GetResistance \u00b6 function CharacterLib.GetResistance(char, damageType, baseValuesOnly) -> integer Returns the computed resistance value of char. @param char Character @param damageType DamageType @param baseValuesOnly boolean? If `true`, base value will be returned. Defaults to `false`. GetSkillBarRowContents \u00b6 function CharacterLib.GetSkillBarRowContents(char, row, slotsPerRow) -> EocSkillBarItem[] Returns the contents of a character's skillbar row. @param char Character Must be a player. @param row integer @param slotsPerRow integer? Defaults to 29. GetSkillState \u00b6 function CharacterLib.GetSkillState(char) -> (EclSkillState|EsvSkillState)? Returns the current skill state of char. On the server, this can only return the state while using the skill. Preparation state cannot be accessed. @param char Character GetSourcePoints \u00b6 function CharacterLib.GetSourcePoints(char) -> integer, integer -- Current and maximum points. Returns the current and maximum source points of char. @param char Character GetStatusByHandle \u00b6 function CharacterLib.GetStatusByHandle(char, handle) -> EclStatus|EsvStatus Returns a status by handle. @param char Character @param handle EntityHandle GetStatusByNetID \u00b6 function CharacterLib.GetStatusByNetID(char, netID) -> EclStatus|EsvStatus Returns a status on char by its net ID. @param char Character @param netID NetId GetStatusesFromItems \u00b6 function CharacterLib.GetStatusesFromItems(char) -- (Client-only) -> CharacterLib_StatusFromItem[] Returns a list of statuses the character has from its equipped items. @param char Character HasDagger \u00b6 function CharacterLib.HasDagger(char) -> boolean Returns whether char has a dagger equipped in either slot. @param char Character HasImmunity \u00b6 function CharacterLib.HasImmunity(char, immunityName) -> boolean Returns wether char has a certain immunity. @param char Character @param immunityName StatsLib_ImmunityID HasMeleeWeapon \u00b6 function CharacterLib.HasMeleeWeapon(char) -> boolean Returns whether char has a melee weapon equipped in either slot. @param char Character HasOwner \u00b6 function CharacterLib.HasOwner(char) -> boolean Returns whether char has an owner. @param char Character HasRangedWeapon \u00b6 function CharacterLib.HasRangedWeapon(char) -> boolean Returns whether char has a bow or crossbow equipped. @param char Character HasShield \u00b6 function CharacterLib.HasShield(char) -> boolean Returns whether char has a shield equipped. @param char Character IsActive \u00b6 function CharacterLib.IsActive() -> boolean Returns whether char is currently the active character of any player. IsCastingSkill \u00b6 function CharacterLib.IsCastingSkill(char) -> boolean Returns whether char is casting a skill. @param char Character IsDead \u00b6 function CharacterLib.IsDead(char) -> boolean Returns true if the character is dead. @param char Character IsDisarmed \u00b6 function CharacterLib.IsDisarmed(char) -> boolean Returns whether char is disarmed. @param char Character IsIgnoredByAI \u00b6 function CharacterLib.IsIgnoredByAI(char) -> boolean Returns whether char is ignored by AI. @param char Character IsInCombat \u00b6 function CharacterLib.IsInCombat(char) -> boolean Returns whether the character is in a combat. @param char Character IsInStealth \u00b6 function CharacterLib.IsInStealth(char) -> boolean Returns whether char is sneaking or invisible. @param char Character IsInvisible \u00b6 function CharacterLib.IsInvisible(char) -> boolean Returns whether char is invisible - as in, has the INVISIBLE status. @param char Character IsMale \u00b6 function CharacterLib.IsMale(char) -> boolean Returns true if char is male. @param char Character IsMuted \u00b6 function CharacterLib.IsMuted(char) -> boolean Returns whether char is muted. @param char Character IsOrigin \u00b6 function CharacterLib.IsOrigin(char) -> boolean Returns whether char is a non-generic origin. @param char Character IsPlayer \u00b6 function CharacterLib.IsPlayer(char) -> boolean Returns whether char is a player. A player is any character that is controllable by the users, including summons and party followers. @param char Character IsPreferredByAI \u00b6 function CharacterLib.IsPreferredByAI(char) -> boolean @param char Character IsPreparingSkill \u00b6 function CharacterLib.IsPreparingSkill(char) -> boolean Returns whether char is preparing a skill. @param char Character IsSkillInnate \u00b6 function CharacterLib.IsSkillInnate(char, skillID) -> boolean Returns whether a skill is innate to a character. Returns false if the character doesn't have the skill in any way. @param char Character @param skillID string IsSkillLearnt \u00b6 function CharacterLib.IsSkillLearnt(char, skillID) -> boolean Returns whether char has a skill learnt. Returns true for innate skills. @param char Character @param skillID string IsSkillMemorized \u00b6 function CharacterLib.IsSkillMemorized(char, skillID) -> boolean Returns whether char has a skill memorized. Returns true for innate skills. @param char Character @param skillID string IsSneaking \u00b6 function CharacterLib.IsSneaking(char) -> boolean Returns whether char is sneaking. @param char Character IsSummon \u00b6 function CharacterLib.IsSummon(char) -> boolean Returns true if char is a summon. @param char Character IsUndead \u00b6 function CharacterLib.IsUndead(char) -> boolean Returns true if char is undead. @param char Character IsUnpreferredByAI \u00b6 function CharacterLib.IsUnpreferredByAI(char) -> boolean Returns whether char is unpreferred by AI. @param char Character IsUnsheathed \u00b6 function CharacterLib.IsUnsheathed(char) -> boolean Returns whether char has their weapon(s) unsheathed. @param char Character","title":"Character"},{"location":"Documentation/Utilities/Character/#character","text":"The Character library contains utility methods relating to characters. The vast majority of them are available on both contexts.","title":"Character"},{"location":"Documentation/Utilities/Character/#characterlib-class","text":"Inherits from Library .","title":"CharacterLib Class"},{"location":"Documentation/Utilities/Character/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/Character/#statusapplied-event","text":"TODO move somewhere else, since victim could be an item @field SourceHandle EntityHandle @field Victim Character|Item @field Status EclStatus|EsvStatus","title":"StatusApplied (event)"},{"location":"Documentation/Utilities/Character/#itemequipped-event","text":"@field Character Character @field Item Item @field Slot ItemSlot","title":"ItemEquipped (event)"},{"location":"Documentation/Utilities/Character/#createequipmentvisuals-hook","text":"Client-only. @field Character EclCharacter @field Item EclItem @field Request EclEquipmentVisualSystemSetParam Hookable. @field RawEvent EclLuaCreateEquipmentVisualsRequestEvent","title":"CreateEquipmentVisuals (hook)"},{"location":"Documentation/Utilities/Character/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Character/#canuseskill","text":"function CharacterLib.CanUseSkill(char, skillID, itemSource) -> boolean Returns whether char can enter preparation state for a skill. @param char Character @param skillID string @param itemSource Item?","title":"CanUseSkill"},{"location":"Documentation/Utilities/Character/#get","text":"function CharacterLib.Get(identifier, isFlashHandle) -> Character @param identifier GUID|PrefixedGUID|NetId|EntityHandle @param isFlashHandle boolean? If true, the identifier will be passed through DoubleToHandle() first.","title":"Get"},{"location":"Documentation/Utilities/Character/#getactionpoints","text":"function CharacterLib.GetActionPoints(char) -> integer, integer -- Current, maximum @param char Character","title":"GetActionPoints"},{"location":"Documentation/Utilities/Character/#getcombatid","text":"function CharacterLib.GetCombatID(char) -> integer?, integer? -- The combat ID and team ID. `nil` if the character is not in combat. This is different from the osi query, which returns a reserved value. Returns the combat ID and team ID of char, if any. @param char Character","title":"GetCombatID"},{"location":"Documentation/Utilities/Character/#getcurrentskill","text":"function CharacterLib.GetCurrentSkill(char) -> string? -- `nil` if the character has no active skill state. Returns the ID of the skill that char is preparing or casting. @param char Character","title":"GetCurrentSkill"},{"location":"Documentation/Utilities/Character/#getdynamicstat","text":"function CharacterLib.GetDynamicStat(char, statName) @param char Character @param statName string","title":"GetDynamicStat"},{"location":"Documentation/Utilities/Character/#getequippeditems","text":"function CharacterLib.GetEquippedItems(char) -> table<ItemSlot, EclItem> Returns the equipped items of char, per slot. @param char Character","title":"GetEquippedItems"},{"location":"Documentation/Utilities/Character/#getexperience","text":"function CharacterLib.GetExperience(char) -> integer Returns the current experience points of char. @param char Character","title":"GetExperience"},{"location":"Documentation/Utilities/Character/#getexperiencerequiredforlevel","text":"function CharacterLib.GetExperienceRequiredForLevel(targetLevel) -> integer -- Experience points. Returns the cumulative experience required to reach a level. @param targetLevel integer","title":"GetExperienceRequiredForLevel"},{"location":"Documentation/Utilities/Character/#getgender","text":"function CharacterLib.GetGender(char) -> Gender Returns the gender of char. @param char Character","title":"GetGender"},{"location":"Documentation/Utilities/Character/#gethighestpartyability","text":"function CharacterLib.GetHighestPartyAbility(char, ability) -> integer Gets the highest stat score of all characters in char's party. @param char Character @param ability string Needs to be a property indexable in char.Stats","title":"GetHighestPartyAbility"},{"location":"Documentation/Utilities/Character/#getinitiative","text":"function CharacterLib.GetInitiative(char) -> integer Returns the initiative of char. @param char Character","title":"GetInitiative"},{"location":"Documentation/Utilities/Character/#getlevel","text":"function CharacterLib.GetLevel(char) -> integer Returns the level of char. @param char Character","title":"GetLevel"},{"location":"Documentation/Utilities/Character/#getmaxcarryweight","text":"function CharacterLib.GetMaxCarryWeight(char) -> integer -- In \"grams\" Returns the maximum carry weight of char. @param char Character","title":"GetMaxCarryWeight"},{"location":"Documentation/Utilities/Character/#getmovement","text":"function CharacterLib.GetMovement(char) -> number -- In centimeters. Returns the calculated movement stat of a character. @param char Character","title":"GetMovement"},{"location":"Documentation/Utilities/Character/#getowner","text":"function CharacterLib.GetOwner(char) -> Character? Returns the character's owner, if it is a summon or party follower(?). @param char Character","title":"GetOwner"},{"location":"Documentation/Utilities/Character/#getpartymembers","text":"function CharacterLib.GetPartyMembers(char) -- (Client-only) -> EclCharacter[] Includes the char passed per param.-- the char passed per param. Returns a list of party members of char's party. Char must be a player. Depends on PlayerInfo. @param char EclCharacter","title":"GetPartyMembers"},{"location":"Documentation/Utilities/Character/#getpartymembers_1","text":"function CharacterLib.GetPartyMembers(char) -- (Server-only) -> EsvCharacter[] Includes the char passed per param.-- the char passed per param. Returns a list of party members of char's party. Char must be a player. @param char EsvCharacter","title":"GetPartyMembers"},{"location":"Documentation/Utilities/Character/#getrace","text":"function CharacterLib.GetRace(char) -> Race Returns the current race of char. @param char Character","title":"GetRace"},{"location":"Documentation/Utilities/Character/#getrealrace","text":"function CharacterLib.GetRealRace(char) -> Race Returns the original race of a player char, before any transforms. @param char Character Must be tagged with \"REALLY_{Race}\"","title":"GetRealRace"},{"location":"Documentation/Utilities/Character/#getresistance","text":"function CharacterLib.GetResistance(char, damageType, baseValuesOnly) -> integer Returns the computed resistance value of char. @param char Character @param damageType DamageType @param baseValuesOnly boolean? If `true`, base value will be returned. Defaults to `false`.","title":"GetResistance"},{"location":"Documentation/Utilities/Character/#getskillbarrowcontents","text":"function CharacterLib.GetSkillBarRowContents(char, row, slotsPerRow) -> EocSkillBarItem[] Returns the contents of a character's skillbar row. @param char Character Must be a player. @param row integer @param slotsPerRow integer? Defaults to 29.","title":"GetSkillBarRowContents"},{"location":"Documentation/Utilities/Character/#getskillstate","text":"function CharacterLib.GetSkillState(char) -> (EclSkillState|EsvSkillState)? Returns the current skill state of char. On the server, this can only return the state while using the skill. Preparation state cannot be accessed. @param char Character","title":"GetSkillState"},{"location":"Documentation/Utilities/Character/#getsourcepoints","text":"function CharacterLib.GetSourcePoints(char) -> integer, integer -- Current and maximum points. Returns the current and maximum source points of char. @param char Character","title":"GetSourcePoints"},{"location":"Documentation/Utilities/Character/#getstatusbyhandle","text":"function CharacterLib.GetStatusByHandle(char, handle) -> EclStatus|EsvStatus Returns a status by handle. @param char Character @param handle EntityHandle","title":"GetStatusByHandle"},{"location":"Documentation/Utilities/Character/#getstatusbynetid","text":"function CharacterLib.GetStatusByNetID(char, netID) -> EclStatus|EsvStatus Returns a status on char by its net ID. @param char Character @param netID NetId","title":"GetStatusByNetID"},{"location":"Documentation/Utilities/Character/#getstatusesfromitems","text":"function CharacterLib.GetStatusesFromItems(char) -- (Client-only) -> CharacterLib_StatusFromItem[] Returns a list of statuses the character has from its equipped items. @param char Character","title":"GetStatusesFromItems"},{"location":"Documentation/Utilities/Character/#hasdagger","text":"function CharacterLib.HasDagger(char) -> boolean Returns whether char has a dagger equipped in either slot. @param char Character","title":"HasDagger"},{"location":"Documentation/Utilities/Character/#hasimmunity","text":"function CharacterLib.HasImmunity(char, immunityName) -> boolean Returns wether char has a certain immunity. @param char Character @param immunityName StatsLib_ImmunityID","title":"HasImmunity"},{"location":"Documentation/Utilities/Character/#hasmeleeweapon","text":"function CharacterLib.HasMeleeWeapon(char) -> boolean Returns whether char has a melee weapon equipped in either slot. @param char Character","title":"HasMeleeWeapon"},{"location":"Documentation/Utilities/Character/#hasowner","text":"function CharacterLib.HasOwner(char) -> boolean Returns whether char has an owner. @param char Character","title":"HasOwner"},{"location":"Documentation/Utilities/Character/#hasrangedweapon","text":"function CharacterLib.HasRangedWeapon(char) -> boolean Returns whether char has a bow or crossbow equipped. @param char Character","title":"HasRangedWeapon"},{"location":"Documentation/Utilities/Character/#hasshield","text":"function CharacterLib.HasShield(char) -> boolean Returns whether char has a shield equipped. @param char Character","title":"HasShield"},{"location":"Documentation/Utilities/Character/#isactive","text":"function CharacterLib.IsActive() -> boolean Returns whether char is currently the active character of any player.","title":"IsActive"},{"location":"Documentation/Utilities/Character/#iscastingskill","text":"function CharacterLib.IsCastingSkill(char) -> boolean Returns whether char is casting a skill. @param char Character","title":"IsCastingSkill"},{"location":"Documentation/Utilities/Character/#isdead","text":"function CharacterLib.IsDead(char) -> boolean Returns true if the character is dead. @param char Character","title":"IsDead"},{"location":"Documentation/Utilities/Character/#isdisarmed","text":"function CharacterLib.IsDisarmed(char) -> boolean Returns whether char is disarmed. @param char Character","title":"IsDisarmed"},{"location":"Documentation/Utilities/Character/#isignoredbyai","text":"function CharacterLib.IsIgnoredByAI(char) -> boolean Returns whether char is ignored by AI. @param char Character","title":"IsIgnoredByAI"},{"location":"Documentation/Utilities/Character/#isincombat","text":"function CharacterLib.IsInCombat(char) -> boolean Returns whether the character is in a combat. @param char Character","title":"IsInCombat"},{"location":"Documentation/Utilities/Character/#isinstealth","text":"function CharacterLib.IsInStealth(char) -> boolean Returns whether char is sneaking or invisible. @param char Character","title":"IsInStealth"},{"location":"Documentation/Utilities/Character/#isinvisible","text":"function CharacterLib.IsInvisible(char) -> boolean Returns whether char is invisible - as in, has the INVISIBLE status. @param char Character","title":"IsInvisible"},{"location":"Documentation/Utilities/Character/#ismale","text":"function CharacterLib.IsMale(char) -> boolean Returns true if char is male. @param char Character","title":"IsMale"},{"location":"Documentation/Utilities/Character/#ismuted","text":"function CharacterLib.IsMuted(char) -> boolean Returns whether char is muted. @param char Character","title":"IsMuted"},{"location":"Documentation/Utilities/Character/#isorigin","text":"function CharacterLib.IsOrigin(char) -> boolean Returns whether char is a non-generic origin. @param char Character","title":"IsOrigin"},{"location":"Documentation/Utilities/Character/#isplayer","text":"function CharacterLib.IsPlayer(char) -> boolean Returns whether char is a player. A player is any character that is controllable by the users, including summons and party followers. @param char Character","title":"IsPlayer"},{"location":"Documentation/Utilities/Character/#ispreferredbyai","text":"function CharacterLib.IsPreferredByAI(char) -> boolean @param char Character","title":"IsPreferredByAI"},{"location":"Documentation/Utilities/Character/#ispreparingskill","text":"function CharacterLib.IsPreparingSkill(char) -> boolean Returns whether char is preparing a skill. @param char Character","title":"IsPreparingSkill"},{"location":"Documentation/Utilities/Character/#isskillinnate","text":"function CharacterLib.IsSkillInnate(char, skillID) -> boolean Returns whether a skill is innate to a character. Returns false if the character doesn't have the skill in any way. @param char Character @param skillID string","title":"IsSkillInnate"},{"location":"Documentation/Utilities/Character/#isskilllearnt","text":"function CharacterLib.IsSkillLearnt(char, skillID) -> boolean Returns whether char has a skill learnt. Returns true for innate skills. @param char Character @param skillID string","title":"IsSkillLearnt"},{"location":"Documentation/Utilities/Character/#isskillmemorized","text":"function CharacterLib.IsSkillMemorized(char, skillID) -> boolean Returns whether char has a skill memorized. Returns true for innate skills. @param char Character @param skillID string","title":"IsSkillMemorized"},{"location":"Documentation/Utilities/Character/#issneaking","text":"function CharacterLib.IsSneaking(char) -> boolean Returns whether char is sneaking. @param char Character","title":"IsSneaking"},{"location":"Documentation/Utilities/Character/#issummon","text":"function CharacterLib.IsSummon(char) -> boolean Returns true if char is a summon. @param char Character","title":"IsSummon"},{"location":"Documentation/Utilities/Character/#isundead","text":"function CharacterLib.IsUndead(char) -> boolean Returns true if char is undead. @param char Character","title":"IsUndead"},{"location":"Documentation/Utilities/Character/#isunpreferredbyai","text":"function CharacterLib.IsUnpreferredByAI(char) -> boolean Returns whether char is unpreferred by AI. @param char Character","title":"IsUnpreferredByAI"},{"location":"Documentation/Utilities/Character/#isunsheathed","text":"function CharacterLib.IsUnsheathed(char) -> boolean Returns whether char has their weapon(s) unsheathed. @param char Character","title":"IsUnsheathed"},{"location":"Documentation/Utilities/Color/","text":"Color \u00b6 The Color library offers utilities for working with colors, either through RGB, decimal, or hex. The constructor methods create an RGBColor table. The library also contains constants for common colors used by Larian. ColorLib Class \u00b6 Methods \u00b6 Clone \u00b6 function ColorLib.Clone(color) -> RGBColor -- New instance with same values. Clones a color instance. @param color RGBColor Create \u00b6 function ColorLib.Create(red, green, blue, alpha) -> RGBColor Alias for creating an RGBColor from RGBA values. @param red integer? @param green integer? @param blue integer? @param alpha integer? CreateFromDecimal \u00b6 function ColorLib.CreateFromDecimal(num) -> RGBColor Creates a color from a decimal value. Does not support alpha. @param num integer CreateFromHex \u00b6 function ColorLib.CreateFromHex(hex) -> RGBColor Creates a color from an html-format hex color code. Does not support alpha. @param hex string CreateFromRGB \u00b6 function ColorLib.CreateFromRGB(red, green, blue, alpha) -> RGBColor Creates a color from RGBA values. Expected range of values is [0-255]. @param red integer? @param green integer? @param blue integer? @param alpha integer? Lerp \u00b6 function ColorLib.Lerp(startColor, targetColor, progress) Creates a new color whose RGB components are linearly interpolated from one to another. Uses the alpha of the target color. @param startColor RGBColor @param targetColor RGBColor @param progress number Expected values are from 0.0 to 1.0. RGBColor Class \u00b6 Methods \u00b6 Clone \u00b6 function RGBColor:Clone() -> RGBColor Returns a new instance of RGBColor with the same values. Create \u00b6 function RGBColor.Create(r, g, b, a) -> RGBColor Creates a color from RGBA values. Expected range is [0-255] and will be clamped. @param r integer? @param g integer? @param b integer? @param a integer? Defaults to 255. CreateFromDecimal \u00b6 function RGBColor.CreateFromDecimal(num) -> RGBColor Creates a color from a decimal value. Does not support alpha. @param num integer CreateFromHex \u00b6 function RGBColor.CreateFromHex(hex) -> RGBColor Creates a color from a hexadecimal value. Does not support alpha. @param hex string Equals \u00b6 function RGBColor:Equals(color) -> boolean Returns whether 2 colors have the same RGBA values. @param color RGBColor ToDecimal \u00b6 function RGBColor:ToDecimal(addAlpha) -> integer Returns the decimal representation of the color. Actionscript expects colors to be represented in this way. @param addAlpha boolean? Defaults to false. ToFloats \u00b6 function RGBColor:ToFloats() -> number, number, number, number Returns the RGBA values as floats in the range[0.0 - 1.0] ToHex \u00b6 function RGBColor:ToHex(prefix, addAlpha) -> string Returns the hexadecimal representation of the color. @param prefix boolean? Prefix the string with #. Defaults to false. @param addAlpha boolean? Defaults to false. If enabled, resulting color will be in the format `#RRGGBBAA` Unpack \u00b6 function RGBColor:Unpack() -> integer ... Unpacks the color's RGB values, alpha included. __add \u00b6 ---@protected function RGBColor.__add(color1, color2) -> RGBColor __add overload. Adds the RGB values of both colors. @param color1 RGBColor @param color2 RGBColor __eq \u00b6 ---@protected function RGBColor.__eq(color1, color2) -> boolean __eq overload. Equivalent to calling RGBColor:Equals() @param color1 RGBColor @param color2 RGBColor __sub \u00b6 ---@protected function RGBColor.__sub(color1, color2) -> RGBColor __sub overload. Subtracts the RGB values. @param color1 RGBColor @param color2 RGBColor","title":"Color"},{"location":"Documentation/Utilities/Color/#color","text":"The Color library offers utilities for working with colors, either through RGB, decimal, or hex. The constructor methods create an RGBColor table. The library also contains constants for common colors used by Larian.","title":"Color"},{"location":"Documentation/Utilities/Color/#colorlib-class","text":"","title":"ColorLib Class"},{"location":"Documentation/Utilities/Color/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Color/#clone","text":"function ColorLib.Clone(color) -> RGBColor -- New instance with same values. Clones a color instance. @param color RGBColor","title":"Clone"},{"location":"Documentation/Utilities/Color/#create","text":"function ColorLib.Create(red, green, blue, alpha) -> RGBColor Alias for creating an RGBColor from RGBA values. @param red integer? @param green integer? @param blue integer? @param alpha integer?","title":"Create"},{"location":"Documentation/Utilities/Color/#createfromdecimal","text":"function ColorLib.CreateFromDecimal(num) -> RGBColor Creates a color from a decimal value. Does not support alpha. @param num integer","title":"CreateFromDecimal"},{"location":"Documentation/Utilities/Color/#createfromhex","text":"function ColorLib.CreateFromHex(hex) -> RGBColor Creates a color from an html-format hex color code. Does not support alpha. @param hex string","title":"CreateFromHex"},{"location":"Documentation/Utilities/Color/#createfromrgb","text":"function ColorLib.CreateFromRGB(red, green, blue, alpha) -> RGBColor Creates a color from RGBA values. Expected range of values is [0-255]. @param red integer? @param green integer? @param blue integer? @param alpha integer?","title":"CreateFromRGB"},{"location":"Documentation/Utilities/Color/#lerp","text":"function ColorLib.Lerp(startColor, targetColor, progress) Creates a new color whose RGB components are linearly interpolated from one to another. Uses the alpha of the target color. @param startColor RGBColor @param targetColor RGBColor @param progress number Expected values are from 0.0 to 1.0.","title":"Lerp"},{"location":"Documentation/Utilities/Color/#rgbcolor-class","text":"","title":"RGBColor Class"},{"location":"Documentation/Utilities/Color/#methods_1","text":"","title":"Methods"},{"location":"Documentation/Utilities/Color/#clone_1","text":"function RGBColor:Clone() -> RGBColor Returns a new instance of RGBColor with the same values.","title":"Clone"},{"location":"Documentation/Utilities/Color/#create_1","text":"function RGBColor.Create(r, g, b, a) -> RGBColor Creates a color from RGBA values. Expected range is [0-255] and will be clamped. @param r integer? @param g integer? @param b integer? @param a integer? Defaults to 255.","title":"Create"},{"location":"Documentation/Utilities/Color/#createfromdecimal_1","text":"function RGBColor.CreateFromDecimal(num) -> RGBColor Creates a color from a decimal value. Does not support alpha. @param num integer","title":"CreateFromDecimal"},{"location":"Documentation/Utilities/Color/#createfromhex_1","text":"function RGBColor.CreateFromHex(hex) -> RGBColor Creates a color from a hexadecimal value. Does not support alpha. @param hex string","title":"CreateFromHex"},{"location":"Documentation/Utilities/Color/#equals","text":"function RGBColor:Equals(color) -> boolean Returns whether 2 colors have the same RGBA values. @param color RGBColor","title":"Equals"},{"location":"Documentation/Utilities/Color/#todecimal","text":"function RGBColor:ToDecimal(addAlpha) -> integer Returns the decimal representation of the color. Actionscript expects colors to be represented in this way. @param addAlpha boolean? Defaults to false.","title":"ToDecimal"},{"location":"Documentation/Utilities/Color/#tofloats","text":"function RGBColor:ToFloats() -> number, number, number, number Returns the RGBA values as floats in the range[0.0 - 1.0]","title":"ToFloats"},{"location":"Documentation/Utilities/Color/#tohex","text":"function RGBColor:ToHex(prefix, addAlpha) -> string Returns the hexadecimal representation of the color. @param prefix boolean? Prefix the string with #. Defaults to false. @param addAlpha boolean? Defaults to false. If enabled, resulting color will be in the format `#RRGGBBAA`","title":"ToHex"},{"location":"Documentation/Utilities/Color/#unpack","text":"function RGBColor:Unpack() -> integer ... Unpacks the color's RGB values, alpha included.","title":"Unpack"},{"location":"Documentation/Utilities/Color/#__add","text":"---@protected function RGBColor.__add(color1, color2) -> RGBColor __add overload. Adds the RGB values of both colors. @param color1 RGBColor @param color2 RGBColor","title":"__add"},{"location":"Documentation/Utilities/Color/#__eq","text":"---@protected function RGBColor.__eq(color1, color2) -> boolean __eq overload. Equivalent to calling RGBColor:Equals() @param color1 RGBColor @param color2 RGBColor","title":"__eq"},{"location":"Documentation/Utilities/Color/#__sub","text":"---@protected function RGBColor.__sub(color1, color2) -> RGBColor __sub overload. Subtracts the RGB values. @param color1 RGBColor @param color2 RGBColor","title":"__sub"},{"location":"Documentation/Utilities/Combat/","text":"Combat \u00b6 The Combat library contains methods for querying information about ongoing combats. CombatLib Class \u00b6 Inherits from Library . Methods \u00b6 GetActiveCombatant \u00b6 function CombatLib.GetActiveCombatant() -> CombatLib_CombatCompatibleEntity Returns the current active combatant in a combat. GetCombat \u00b6 function CombatLib.GetCombat(combatID) -> EclTurnManagerCombat|EsvTurnManagerCombat @param combatID integer GetCombatComponent \u00b6 function CombatLib.GetCombatComponent(entity) -> EocCombatComponent? -- `nil` if the entity does not have the component. Returns the combat component of an entity. @param entity CombatLib_CombatCompatibleEntity GetCombatID \u00b6 function CombatLib.GetCombatID(entity) -> integer? -- `nil` if the entity is not in combat. Returns the combat ID of an entity. @param entity CombatLib_CombatCompatibleEntity GetTurnManager \u00b6 function CombatLib.GetTurnManager() -> EclTurnManager|EsvTurnManager GetTurnOrder \u00b6 function CombatLib.GetTurnOrder() -- (Client-only) -> CombatLib_TurnOrder Returns the character participants of a combat.","title":"Combat"},{"location":"Documentation/Utilities/Combat/#combat","text":"The Combat library contains methods for querying information about ongoing combats.","title":"Combat"},{"location":"Documentation/Utilities/Combat/#combatlib-class","text":"Inherits from Library .","title":"CombatLib Class"},{"location":"Documentation/Utilities/Combat/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Combat/#getactivecombatant","text":"function CombatLib.GetActiveCombatant() -> CombatLib_CombatCompatibleEntity Returns the current active combatant in a combat.","title":"GetActiveCombatant"},{"location":"Documentation/Utilities/Combat/#getcombat","text":"function CombatLib.GetCombat(combatID) -> EclTurnManagerCombat|EsvTurnManagerCombat @param combatID integer","title":"GetCombat"},{"location":"Documentation/Utilities/Combat/#getcombatcomponent","text":"function CombatLib.GetCombatComponent(entity) -> EocCombatComponent? -- `nil` if the entity does not have the component. Returns the combat component of an entity. @param entity CombatLib_CombatCompatibleEntity","title":"GetCombatComponent"},{"location":"Documentation/Utilities/Combat/#getcombatid","text":"function CombatLib.GetCombatID(entity) -> integer? -- `nil` if the entity is not in combat. Returns the combat ID of an entity. @param entity CombatLib_CombatCompatibleEntity","title":"GetCombatID"},{"location":"Documentation/Utilities/Combat/#getturnmanager","text":"function CombatLib.GetTurnManager() -> EclTurnManager|EsvTurnManager","title":"GetTurnManager"},{"location":"Documentation/Utilities/Combat/#getturnorder","text":"function CombatLib.GetTurnOrder() -- (Client-only) -> CombatLib_TurnOrder Returns the character participants of a combat.","title":"GetTurnOrder"},{"location":"Documentation/Utilities/Coroutine/","text":"Coroutine \u00b6 The Coroutine library offers coroutines that support sleeping for X seconds or until a predicate is met. CoroutineLib Class \u00b6 Inherits from Library . Methods \u00b6 Create \u00b6 function CoroutineLib.Create(fun) -> CoroutineInstance @param fun fun(inst:CoroutineInstance, ...) CoroutineInstance Class \u00b6 Events and Hooks \u00b6 Finished (event) \u00b6 An event object with no parameters. Methods \u00b6 Continue \u00b6 function CoroutineInstance:Continue() -> ... IsDead \u00b6 function CoroutineInstance:IsDead() -> boolean IsSleeping \u00b6 function CoroutineInstance:IsSleeping() -> boolean Sleep \u00b6 function CoroutineInstance:Sleep(time, ...) @param time number|function @param ... any Variables yielded. Discarded if the coroutine is resuming from sleeping, as there is no caller. Yield \u00b6 function CoroutineInstance:Yield()","title":"Coroutine"},{"location":"Documentation/Utilities/Coroutine/#coroutine","text":"The Coroutine library offers coroutines that support sleeping for X seconds or until a predicate is met.","title":"Coroutine"},{"location":"Documentation/Utilities/Coroutine/#coroutinelib-class","text":"Inherits from Library .","title":"CoroutineLib Class"},{"location":"Documentation/Utilities/Coroutine/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Coroutine/#create","text":"function CoroutineLib.Create(fun) -> CoroutineInstance @param fun fun(inst:CoroutineInstance, ...)","title":"Create"},{"location":"Documentation/Utilities/Coroutine/#coroutineinstance-class","text":"","title":"CoroutineInstance Class"},{"location":"Documentation/Utilities/Coroutine/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/Coroutine/#finished-event","text":"An event object with no parameters.","title":"Finished (event)"},{"location":"Documentation/Utilities/Coroutine/#methods_1","text":"","title":"Methods"},{"location":"Documentation/Utilities/Coroutine/#continue","text":"function CoroutineInstance:Continue() -> ...","title":"Continue"},{"location":"Documentation/Utilities/Coroutine/#isdead","text":"function CoroutineInstance:IsDead() -> boolean","title":"IsDead"},{"location":"Documentation/Utilities/Coroutine/#issleeping","text":"function CoroutineInstance:IsSleeping() -> boolean","title":"IsSleeping"},{"location":"Documentation/Utilities/Coroutine/#sleep","text":"function CoroutineInstance:Sleep(time, ...) @param time number|function @param ... any Variables yielded. Discarded if the coroutine is resuming from sleeping, as there is no caller.","title":"Sleep"},{"location":"Documentation/Utilities/Coroutine/#yield","text":"function CoroutineInstance:Yield()","title":"Yield"},{"location":"Documentation/Utilities/GameState/","text":"GameState \u00b6 The GameState library contains methods and events related to the global game state - that is, whether it's in a session, loading, paused, etc. Its events are helpful for initialization purposes. ClientReady , for example, fires when the client transitions from PrepareRunning to Running and is a great moment to initialize anything that could need the client character to be present and/or send messages to the server (both of which are not reliable to do before that point). GameStateLib Class \u00b6 Inherits from Feature . Events and Hooks \u00b6 GamePaused (event) \u00b6 GameUnpaused (event) \u00b6 StateChanged (event) \u00b6 @field From GameState @field To GameState GameReady (event) \u00b6 Fires when the game transitions from PrepareRunning to Running (on the client) or when transitioning from Sync to Running (on the server) Tick (event) \u00b6 Fired every tick. @field DeltaTime integer Milliseconds elapsed since last tick RunningTick (event) \u00b6 Fired every tick while the game is not paused. @field DeltaTime integer Milliseconds elapsed since last tick (NOT the last running tick) LuaResetted (event) \u00b6 An event object with no parameters. ClientReady (event) \u00b6 Fired when the client transitions from PrepareRunning to Running, as well as when lua is reset. @field CharacterNetID NetId @field ProfileGUID GUID RegionStarted (event) \u00b6 Server-only. @field LevelID string Methods \u00b6 GetState \u00b6 function GameStateLib.GetState() -- (Server-only) -> GameState GetState \u00b6 function GameStateLib.GetState() -- (Client-only) -> GameState IsInMainMenu \u00b6 function GameStateLib.IsInMainMenu() -> boolean Returns whether the game is in a main menu-related state. IsInRunningSession \u00b6 function GameStateLib.IsInRunningSession() -> boolean Returns whether the game state is within a running session (not paused) IsInSession \u00b6 function GameStateLib.IsInSession() -> boolean Returns whether the game state is currently in a session. IsLoading \u00b6 function GameStateLib.IsLoading() -> boolean Returns whether the game is within a loading-related state. IsPaused \u00b6 function GameStateLib.IsPaused() -- (Client-only) -> boolean IsPaused \u00b6 function GameStateLib.IsPaused() -- (Server-only) -> boolean IsSessionLoaded \u00b6 function GameStateLib.IsSessionLoaded() -- (Server-only) -> boolean","title":"GameState"},{"location":"Documentation/Utilities/GameState/#gamestate","text":"The GameState library contains methods and events related to the global game state - that is, whether it's in a session, loading, paused, etc. Its events are helpful for initialization purposes. ClientReady , for example, fires when the client transitions from PrepareRunning to Running and is a great moment to initialize anything that could need the client character to be present and/or send messages to the server (both of which are not reliable to do before that point).","title":"GameState"},{"location":"Documentation/Utilities/GameState/#gamestatelib-class","text":"Inherits from Feature .","title":"GameStateLib Class"},{"location":"Documentation/Utilities/GameState/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/GameState/#gamepaused-event","text":"","title":"GamePaused (event)"},{"location":"Documentation/Utilities/GameState/#gameunpaused-event","text":"","title":"GameUnpaused (event)"},{"location":"Documentation/Utilities/GameState/#statechanged-event","text":"@field From GameState @field To GameState","title":"StateChanged (event)"},{"location":"Documentation/Utilities/GameState/#gameready-event","text":"Fires when the game transitions from PrepareRunning to Running (on the client) or when transitioning from Sync to Running (on the server)","title":"GameReady (event)"},{"location":"Documentation/Utilities/GameState/#tick-event","text":"Fired every tick. @field DeltaTime integer Milliseconds elapsed since last tick","title":"Tick (event)"},{"location":"Documentation/Utilities/GameState/#runningtick-event","text":"Fired every tick while the game is not paused. @field DeltaTime integer Milliseconds elapsed since last tick (NOT the last running tick)","title":"RunningTick (event)"},{"location":"Documentation/Utilities/GameState/#luaresetted-event","text":"An event object with no parameters.","title":"LuaResetted (event)"},{"location":"Documentation/Utilities/GameState/#clientready-event","text":"Fired when the client transitions from PrepareRunning to Running, as well as when lua is reset. @field CharacterNetID NetId @field ProfileGUID GUID","title":"ClientReady (event)"},{"location":"Documentation/Utilities/GameState/#regionstarted-event","text":"Server-only. @field LevelID string","title":"RegionStarted (event)"},{"location":"Documentation/Utilities/GameState/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/GameState/#getstate","text":"function GameStateLib.GetState() -- (Server-only) -> GameState","title":"GetState"},{"location":"Documentation/Utilities/GameState/#getstate_1","text":"function GameStateLib.GetState() -- (Client-only) -> GameState","title":"GetState"},{"location":"Documentation/Utilities/GameState/#isinmainmenu","text":"function GameStateLib.IsInMainMenu() -> boolean Returns whether the game is in a main menu-related state.","title":"IsInMainMenu"},{"location":"Documentation/Utilities/GameState/#isinrunningsession","text":"function GameStateLib.IsInRunningSession() -> boolean Returns whether the game state is within a running session (not paused)","title":"IsInRunningSession"},{"location":"Documentation/Utilities/GameState/#isinsession","text":"function GameStateLib.IsInSession() -> boolean Returns whether the game state is currently in a session.","title":"IsInSession"},{"location":"Documentation/Utilities/GameState/#isloading","text":"function GameStateLib.IsLoading() -> boolean Returns whether the game is within a loading-related state.","title":"IsLoading"},{"location":"Documentation/Utilities/GameState/#ispaused","text":"function GameStateLib.IsPaused() -- (Client-only) -> boolean","title":"IsPaused"},{"location":"Documentation/Utilities/GameState/#ispaused_1","text":"function GameStateLib.IsPaused() -- (Server-only) -> boolean","title":"IsPaused"},{"location":"Documentation/Utilities/GameState/#issessionloaded","text":"function GameStateLib.IsSessionLoaded() -- (Server-only) -> boolean","title":"IsSessionLoaded"},{"location":"Documentation/Utilities/IO/","text":"IO \u00b6 The IO library contains wrapper methods for loading and saving files, automatically serializing/deserializing tables into/from json. InputOutputLib Class \u00b6 Methods \u00b6 LoadFile \u00b6 function InputOutputLib.LoadFile(filename, context, raw) -> any Loads a file. @param filename string @param context (InputOutputLib_UserFileContext)? Defaults to \"user\" @param raw boolean? Defaults to false. SaveFile \u00b6 function InputOutputLib.SaveFile(filename, contents, raw, clean) Serializes contents into json and saves them to a file. @param filename string @param contents any @param raw boolean? Defaults to false. @param clean boolean? Defaults to false. Calls table.clean() on the contents.","title":"IO"},{"location":"Documentation/Utilities/IO/#io","text":"The IO library contains wrapper methods for loading and saving files, automatically serializing/deserializing tables into/from json.","title":"IO"},{"location":"Documentation/Utilities/IO/#inputoutputlib-class","text":"","title":"InputOutputLib Class"},{"location":"Documentation/Utilities/IO/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/IO/#loadfile","text":"function InputOutputLib.LoadFile(filename, context, raw) -> any Loads a file. @param filename string @param context (InputOutputLib_UserFileContext)? Defaults to \"user\" @param raw boolean? Defaults to false.","title":"LoadFile"},{"location":"Documentation/Utilities/IO/#savefile","text":"function InputOutputLib.SaveFile(filename, contents, raw, clean) Serializes contents into json and saves them to a file. @param filename string @param contents any @param raw boolean? Defaults to false. @param clean boolean? Defaults to false. Calls table.clean() on the contents.","title":"SaveFile"},{"location":"Documentation/Utilities/Item/","text":"Item \u00b6 The Item library contains methods relating to item game objects. ItemLib Class \u00b6 Inherits from Library . Methods \u00b6 ApplyDye \u00b6 function ItemLib.ApplyDye(item, dye) -> boolean False if item is already dyed with the same dye, or if dye is ``nil``.-- if item is already dyed with the same dye, or if dye is ``nil``. Applies a dye to the item. @param item Item @param dye Dye CanUse \u00b6 function ItemLib.CanUse(char, item) -> boolean Returns whether char meets the requirements to use an item. @param char Character @param item Item CountItemsInInventory \u00b6 function ItemLib.CountItemsInInventory(entity, predicate) -> number Count the items in an entity's inventory that match a predicate function. Predicate is passed Item and should return true for items to be counted. @param entity Entity @param predicate fun(item: EsvItem) Get \u00b6 function ItemLib.Get(identifier, isFlashHandle) -> Item @param identifier GUID|NetId|EntityHandle @param isFlashHandle boolean? GetContainedItems \u00b6 function ItemLib.GetContainedItems(container, predicate) -> Item[] Returns the items contained within a container item, optionally filtered by predicate. @param container Item @param predicate (fun(item:Item):boolean)? The predicate should return `true` for items to be included. If `nil`, all items will be included. GetCurrentDye \u00b6 function ItemLib.GetCurrentDye(item) -> string,Dye The dye ID and data table.-- dye ID and data table. Returns the ID and data for the most recently-applied dye deltamod on the item. @param item Item GetEquipmentSubtype \u00b6 function ItemLib.GetEquipmentSubtype(item) -> ItemLib_EquipmentType|ItemSlot Returns the subtype of item (ex. \"Knife\" or \"Platemail\"). Returns ItemSlot for items with no subtypes. @param item Item GetEquippedItem \u00b6 function ItemLib.GetEquippedItem(char, slot) -> Item? @param char Character @param slot ItemSlot GetEquippedSlot \u00b6 function ItemLib.GetEquippedSlot(item, char) -> EquipSlot? Returns the slot that an item is equipped in, or nil if it is not. @param item Item @param char Character? Defaults to item's owner. GetIcon \u00b6 function ItemLib.GetIcon(item) -> string Returns the icon of the item. Fetching the icon is technically different per context; the server only cares about root template icon (except for the gold template). This function uses the client logic (which also checks icon override and icon from stats). @param item Item GetIdentifyRequirement \u00b6 function ItemLib.GetIdentifyRequirement(item) -> number Gets the amount of Loremaster necessary to identify an item. Ignores whether the item is already identified. @param item Item GetItemSlot \u00b6 function ItemLib.GetItemSlot(item) -> ItemSlot? -- Nil if the item has no stats. Alias for Item.Stats.ItemSlot @param item Item GetItemsInInventory \u00b6 function ItemLib.GetItemsInInventory(entity, predicate) -> Item[] Returns a list of the items in the entity's inventory that match an optional predicate function. Predicate is passed the EclItem/EsvItem and should return true for items to be included. @param entity Entity @param predicate fun(item: Item) GetItemsInPartyInventory \u00b6 function ItemLib.GetItemsInPartyInventory(char, predicate) Returns all items in the party inventory of char matching the predicate, or all if no predicate is passed. @param char Character @param predicate fun(item:Item) GetLevel \u00b6 function ItemLib.GetLevel(item) -> integer? -- `nil` if the item has no stats. Returns the level of an item. @param item Item GetNamedBoosts \u00b6 function ItemLib.GetNamedBoosts(item) -> string[] Returns a list of the named boosts on the item. @param item Item GetOwner \u00b6 function ItemLib.GetOwner(item) -> Character? Returns the current owner of the item. The owner will be nil if the character who owned the item died. @param item Item GetPartyTemplateCount \u00b6 function ItemLib.GetPartyTemplateCount(template) -- (Client-only) -> number Count the amount of template instances (prefix + guid) in the client party's inventory. @param template string GetRarityIcon \u00b6 function ItemLib.GetRarityIcon(rarity) -> icon? -- Not all rarities have icons. Returns the icon frame for a rarity, if any. @param rarity ItemLib_Rarity|EclItem GetRarityName \u00b6 function ItemLib.GetRarityName(rarity) Returns the name of a rarity. @param rarity Item|ItemLib_Rarity GetRune \u00b6 function ItemLib.GetRune(item, index) -> StatItem Gets the stats object of the rune inserted at rune index index on item. @param item Item @param index integer **0-based.** GetRuneSlots \u00b6 function ItemLib.GetRuneSlots(item) -> integer Returns the amount of rune slots an item has. @param item Item GetRuneSlotsIcon \u00b6 function ItemLib.GetRuneSlotsIcon(item) -> icon? -- `nil` if the item has no rune slots. Returns the icon displaying the state of item's rune slots. @param item Item GetRunes \u00b6 function ItemLib.GetRunes(item) -> table<number, StatItem> -- Empty slots are nil. Returns a list of runes on the item. @param item Item GetUseAPCost \u00b6 function ItemLib.GetUseAPCost(item) -> integer Returns the base AP cost of using an item, independent of the character. @param item Item GetUseActions \u00b6 function ItemLib.GetUseActions(item, actionType) -> IActionData[] Returns the use actions of an item, optionally filtered by type. @param item Item|ItemTemplate @param actionType ActionDataType HasFlag \u00b6 function ItemLib.HasFlag(item, flag) Returns whether the item has a flag. @param item Item @param flag EclItemFlags|EsvItemFlags|EclItemFlags2|EsvItemFlags2 HasRunes \u00b6 function ItemLib.HasRunes(item) -> boolean Returns true if item has any runes slotted. @param item Item HasUseAction \u00b6 function ItemLib.HasUseAction(item, useActionID) -> boolean Returns whether the item has a OnUsePeaceAction of the passed type. @param item Item @param useActionID ActionDataType HasUseActions \u00b6 function ItemLib.HasUseActions(item) -> boolean Returns whether an item has any use actions. @param item Item IsArtifact \u00b6 function ItemLib.IsArtifact(item) -> boolean Returns true if the item is an Artifact by checking the AMER_UNI tag. @param item Item IsContainer \u00b6 function ItemLib.IsContainer(item) -> boolean Returns whether an item is a container. @param item Item IsDagger \u00b6 function ItemLib.IsDagger(item) -> boolean Returns whether item is a dagger (satisfying a DaggerWeapon requirement) @param item Item IsDyeable \u00b6 function ItemLib.IsDyeable(item) -> boolean Returns true for dyeable items (equipment, except rings/amulet/belt). @param item Item IsEquipment \u00b6 function ItemLib.IsEquipment(item) -> boolean Returns true if the item is an armor piece or a weapon. @param item Item IsEquipped \u00b6 function ItemLib.IsEquipped(char, item) -> boolean Returns true if item is equipped by char. Assumes the item cannot be equipped into an unintended slot. Rings and weapons are checked for both slots. @param char Character @param item Item IsLegal \u00b6 function ItemLib.IsLegal(item) -> boolean Returns whether interacting with an item is legal. @param item Item IsMarkedAsWares \u00b6 function ItemLib.IsMarkedAsWares(item) -> boolean Returns whether an item is marked as wares. @param item Item IsMeleeWeapon \u00b6 function ItemLib.IsMeleeWeapon(item) -> boolean Returns whether item is a melee weapon (satisfying a MeleeWeapon requirement) Returns true for None-type weaponry. @param item Item IsRangedWeapon \u00b6 function ItemLib.IsRangedWeapon(item) -> boolean Returns whether item is a ranged weapon; bow or crossbow only! @param item Item IsRune \u00b6 function ItemLib.IsRune(item) -> boolean Returns whether the item is a rune. @param item Item IsShield \u00b6 function ItemLib.IsShield(item) -> boolean Returns whether item is a shield (satisfying a ShieldWeapon requirement) @param item Item IsUnique \u00b6 function ItemLib.IsUnique(item) -> boolean Returns whether an item is of Unique rarity. Returns true for Artifact items. @param item Item IsWeapon \u00b6 function ItemLib.IsWeapon(item) -> boolean Returns true if the item is a weapon (shields don't count!) @param item Item SetIconOverride \u00b6 function ItemLib.SetIconOverride(item, icon) -- (Client-only) Sets a custom icon for an item. Not persistent! @param item Item @param icon string","title":"Item"},{"location":"Documentation/Utilities/Item/#item","text":"The Item library contains methods relating to item game objects.","title":"Item"},{"location":"Documentation/Utilities/Item/#itemlib-class","text":"Inherits from Library .","title":"ItemLib Class"},{"location":"Documentation/Utilities/Item/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Item/#applydye","text":"function ItemLib.ApplyDye(item, dye) -> boolean False if item is already dyed with the same dye, or if dye is ``nil``.-- if item is already dyed with the same dye, or if dye is ``nil``. Applies a dye to the item. @param item Item @param dye Dye","title":"ApplyDye"},{"location":"Documentation/Utilities/Item/#canuse","text":"function ItemLib.CanUse(char, item) -> boolean Returns whether char meets the requirements to use an item. @param char Character @param item Item","title":"CanUse"},{"location":"Documentation/Utilities/Item/#countitemsininventory","text":"function ItemLib.CountItemsInInventory(entity, predicate) -> number Count the items in an entity's inventory that match a predicate function. Predicate is passed Item and should return true for items to be counted. @param entity Entity @param predicate fun(item: EsvItem)","title":"CountItemsInInventory"},{"location":"Documentation/Utilities/Item/#get","text":"function ItemLib.Get(identifier, isFlashHandle) -> Item @param identifier GUID|NetId|EntityHandle @param isFlashHandle boolean?","title":"Get"},{"location":"Documentation/Utilities/Item/#getcontaineditems","text":"function ItemLib.GetContainedItems(container, predicate) -> Item[] Returns the items contained within a container item, optionally filtered by predicate. @param container Item @param predicate (fun(item:Item):boolean)? The predicate should return `true` for items to be included. If `nil`, all items will be included.","title":"GetContainedItems"},{"location":"Documentation/Utilities/Item/#getcurrentdye","text":"function ItemLib.GetCurrentDye(item) -> string,Dye The dye ID and data table.-- dye ID and data table. Returns the ID and data for the most recently-applied dye deltamod on the item. @param item Item","title":"GetCurrentDye"},{"location":"Documentation/Utilities/Item/#getequipmentsubtype","text":"function ItemLib.GetEquipmentSubtype(item) -> ItemLib_EquipmentType|ItemSlot Returns the subtype of item (ex. \"Knife\" or \"Platemail\"). Returns ItemSlot for items with no subtypes. @param item Item","title":"GetEquipmentSubtype"},{"location":"Documentation/Utilities/Item/#getequippeditem","text":"function ItemLib.GetEquippedItem(char, slot) -> Item? @param char Character @param slot ItemSlot","title":"GetEquippedItem"},{"location":"Documentation/Utilities/Item/#getequippedslot","text":"function ItemLib.GetEquippedSlot(item, char) -> EquipSlot? Returns the slot that an item is equipped in, or nil if it is not. @param item Item @param char Character? Defaults to item's owner.","title":"GetEquippedSlot"},{"location":"Documentation/Utilities/Item/#geticon","text":"function ItemLib.GetIcon(item) -> string Returns the icon of the item. Fetching the icon is technically different per context; the server only cares about root template icon (except for the gold template). This function uses the client logic (which also checks icon override and icon from stats). @param item Item","title":"GetIcon"},{"location":"Documentation/Utilities/Item/#getidentifyrequirement","text":"function ItemLib.GetIdentifyRequirement(item) -> number Gets the amount of Loremaster necessary to identify an item. Ignores whether the item is already identified. @param item Item","title":"GetIdentifyRequirement"},{"location":"Documentation/Utilities/Item/#getitemslot","text":"function ItemLib.GetItemSlot(item) -> ItemSlot? -- Nil if the item has no stats. Alias for Item.Stats.ItemSlot @param item Item","title":"GetItemSlot"},{"location":"Documentation/Utilities/Item/#getitemsininventory","text":"function ItemLib.GetItemsInInventory(entity, predicate) -> Item[] Returns a list of the items in the entity's inventory that match an optional predicate function. Predicate is passed the EclItem/EsvItem and should return true for items to be included. @param entity Entity @param predicate fun(item: Item)","title":"GetItemsInInventory"},{"location":"Documentation/Utilities/Item/#getitemsinpartyinventory","text":"function ItemLib.GetItemsInPartyInventory(char, predicate) Returns all items in the party inventory of char matching the predicate, or all if no predicate is passed. @param char Character @param predicate fun(item:Item)","title":"GetItemsInPartyInventory"},{"location":"Documentation/Utilities/Item/#getlevel","text":"function ItemLib.GetLevel(item) -> integer? -- `nil` if the item has no stats. Returns the level of an item. @param item Item","title":"GetLevel"},{"location":"Documentation/Utilities/Item/#getnamedboosts","text":"function ItemLib.GetNamedBoosts(item) -> string[] Returns a list of the named boosts on the item. @param item Item","title":"GetNamedBoosts"},{"location":"Documentation/Utilities/Item/#getowner","text":"function ItemLib.GetOwner(item) -> Character? Returns the current owner of the item. The owner will be nil if the character who owned the item died. @param item Item","title":"GetOwner"},{"location":"Documentation/Utilities/Item/#getpartytemplatecount","text":"function ItemLib.GetPartyTemplateCount(template) -- (Client-only) -> number Count the amount of template instances (prefix + guid) in the client party's inventory. @param template string","title":"GetPartyTemplateCount"},{"location":"Documentation/Utilities/Item/#getrarityicon","text":"function ItemLib.GetRarityIcon(rarity) -> icon? -- Not all rarities have icons. Returns the icon frame for a rarity, if any. @param rarity ItemLib_Rarity|EclItem","title":"GetRarityIcon"},{"location":"Documentation/Utilities/Item/#getrarityname","text":"function ItemLib.GetRarityName(rarity) Returns the name of a rarity. @param rarity Item|ItemLib_Rarity","title":"GetRarityName"},{"location":"Documentation/Utilities/Item/#getrune","text":"function ItemLib.GetRune(item, index) -> StatItem Gets the stats object of the rune inserted at rune index index on item. @param item Item @param index integer **0-based.**","title":"GetRune"},{"location":"Documentation/Utilities/Item/#getruneslots","text":"function ItemLib.GetRuneSlots(item) -> integer Returns the amount of rune slots an item has. @param item Item","title":"GetRuneSlots"},{"location":"Documentation/Utilities/Item/#getruneslotsicon","text":"function ItemLib.GetRuneSlotsIcon(item) -> icon? -- `nil` if the item has no rune slots. Returns the icon displaying the state of item's rune slots. @param item Item","title":"GetRuneSlotsIcon"},{"location":"Documentation/Utilities/Item/#getrunes","text":"function ItemLib.GetRunes(item) -> table<number, StatItem> -- Empty slots are nil. Returns a list of runes on the item. @param item Item","title":"GetRunes"},{"location":"Documentation/Utilities/Item/#getuseapcost","text":"function ItemLib.GetUseAPCost(item) -> integer Returns the base AP cost of using an item, independent of the character. @param item Item","title":"GetUseAPCost"},{"location":"Documentation/Utilities/Item/#getuseactions","text":"function ItemLib.GetUseActions(item, actionType) -> IActionData[] Returns the use actions of an item, optionally filtered by type. @param item Item|ItemTemplate @param actionType ActionDataType","title":"GetUseActions"},{"location":"Documentation/Utilities/Item/#hasflag","text":"function ItemLib.HasFlag(item, flag) Returns whether the item has a flag. @param item Item @param flag EclItemFlags|EsvItemFlags|EclItemFlags2|EsvItemFlags2","title":"HasFlag"},{"location":"Documentation/Utilities/Item/#hasrunes","text":"function ItemLib.HasRunes(item) -> boolean Returns true if item has any runes slotted. @param item Item","title":"HasRunes"},{"location":"Documentation/Utilities/Item/#hasuseaction","text":"function ItemLib.HasUseAction(item, useActionID) -> boolean Returns whether the item has a OnUsePeaceAction of the passed type. @param item Item @param useActionID ActionDataType","title":"HasUseAction"},{"location":"Documentation/Utilities/Item/#hasuseactions","text":"function ItemLib.HasUseActions(item) -> boolean Returns whether an item has any use actions. @param item Item","title":"HasUseActions"},{"location":"Documentation/Utilities/Item/#isartifact","text":"function ItemLib.IsArtifact(item) -> boolean Returns true if the item is an Artifact by checking the AMER_UNI tag. @param item Item","title":"IsArtifact"},{"location":"Documentation/Utilities/Item/#iscontainer","text":"function ItemLib.IsContainer(item) -> boolean Returns whether an item is a container. @param item Item","title":"IsContainer"},{"location":"Documentation/Utilities/Item/#isdagger","text":"function ItemLib.IsDagger(item) -> boolean Returns whether item is a dagger (satisfying a DaggerWeapon requirement) @param item Item","title":"IsDagger"},{"location":"Documentation/Utilities/Item/#isdyeable","text":"function ItemLib.IsDyeable(item) -> boolean Returns true for dyeable items (equipment, except rings/amulet/belt). @param item Item","title":"IsDyeable"},{"location":"Documentation/Utilities/Item/#isequipment","text":"function ItemLib.IsEquipment(item) -> boolean Returns true if the item is an armor piece or a weapon. @param item Item","title":"IsEquipment"},{"location":"Documentation/Utilities/Item/#isequipped","text":"function ItemLib.IsEquipped(char, item) -> boolean Returns true if item is equipped by char. Assumes the item cannot be equipped into an unintended slot. Rings and weapons are checked for both slots. @param char Character @param item Item","title":"IsEquipped"},{"location":"Documentation/Utilities/Item/#islegal","text":"function ItemLib.IsLegal(item) -> boolean Returns whether interacting with an item is legal. @param item Item","title":"IsLegal"},{"location":"Documentation/Utilities/Item/#ismarkedaswares","text":"function ItemLib.IsMarkedAsWares(item) -> boolean Returns whether an item is marked as wares. @param item Item","title":"IsMarkedAsWares"},{"location":"Documentation/Utilities/Item/#ismeleeweapon","text":"function ItemLib.IsMeleeWeapon(item) -> boolean Returns whether item is a melee weapon (satisfying a MeleeWeapon requirement) Returns true for None-type weaponry. @param item Item","title":"IsMeleeWeapon"},{"location":"Documentation/Utilities/Item/#israngedweapon","text":"function ItemLib.IsRangedWeapon(item) -> boolean Returns whether item is a ranged weapon; bow or crossbow only! @param item Item","title":"IsRangedWeapon"},{"location":"Documentation/Utilities/Item/#isrune","text":"function ItemLib.IsRune(item) -> boolean Returns whether the item is a rune. @param item Item","title":"IsRune"},{"location":"Documentation/Utilities/Item/#isshield","text":"function ItemLib.IsShield(item) -> boolean Returns whether item is a shield (satisfying a ShieldWeapon requirement) @param item Item","title":"IsShield"},{"location":"Documentation/Utilities/Item/#isunique","text":"function ItemLib.IsUnique(item) -> boolean Returns whether an item is of Unique rarity. Returns true for Artifact items. @param item Item","title":"IsUnique"},{"location":"Documentation/Utilities/Item/#isweapon","text":"function ItemLib.IsWeapon(item) -> boolean Returns true if the item is a weapon (shields don't count!) @param item Item","title":"IsWeapon"},{"location":"Documentation/Utilities/Item/#seticonoverride","text":"function ItemLib.SetIconOverride(item, icon) -- (Client-only) Sets a custom icon for an item. Not persistent! @param item Item @param icon string","title":"SetIconOverride"},{"location":"Documentation/Utilities/Library/","text":"Library \u00b6 The Library class is the internal base class for libraries in Epip. It offers general-purpose utility methods, such as logging, debug flags, event systems, as well as integrations with some core Epip libraries to simplify the registration of resources. Epip.InitializeLibrary() is meant to be used to define libraries, though you are not intended to do so in your own mod - use Features instead. Library contains integrations with the following core Epip libraries: Text (for TSK registration and organizing TSKs by library/feature within the localization sheet) UserVars (for namespacing ) OOP (for containing related subclasses) Perceptive readers will realize that these integrations indeed create circular dependencies. This concern is however pretty low on the list. The class includes some methods to filter out unwanted logging, however the recommended way to filter it is to use the \"control panel\" UI ( Feature_DebugMenu , defaults to LCtrl + B ) to set the logging level instead of calling the methods yourself anywhere. Library Class \u00b6 Inherits from Class . Methods \u00b6 AddProfilingStep \u00b6 function Library:AddProfilingStep(stepID) Adds a step to the current profiling session. Does nothing outside of Debug mode. @param stepID string AddSubscribableEvent \u00b6 function Library:AddSubscribableEvent(evName, preventable) -> Event Registers a new event. @param evName string @param preventable boolean? Defaults to false. AddSubscribableHook \u00b6 function Library:AddSubscribableHook(evName, preventable) -> Event Registers a new hook. @param evName string @param preventable boolean? Defaults to false. Create \u00b6 function Library.Create(modTable, id, data) -> Library Initializes a table as a Library. @param modTable string @param id string @param data Library Debug \u00b6 function Library:Debug() Show debug-level logging from this library. Only works in Developer mode. DebugLog \u00b6 function Library:DebugLog() Log a value in Debug mode. Dump \u00b6 function Library:Dump(msg) Dump a value to the console, in Debug mode. @param msg any EndProfiling \u00b6 function Library:EndProfiling() Ends the current profiling session. Does nothing outside of Debug mode. Error \u00b6 function Library:Error(method) Throws an error prefixed by the thrower method name. @param method string GetClass \u00b6 function Library:GetClass(className) -> `T` Returns a class's base table. @param className `T` GetModVariable \u00b6 function Library:GetModVariable(modGUID, name) -> any Returns the value of a mod variable. @param modGUID GUID @param name string GetPackagePrefix \u00b6 function Library:GetPackagePrefix() -> string Returns the package prefix for this library's subclasses. GetTranslatedStringHandleForKey \u00b6 function Library:GetTranslatedStringHandleForKey(localKey) -> TranslatedStringHandle? @param localKey string GetUserVariable \u00b6 function Library:GetUserVariable(component, variable) -> any Gets the value of a user variable on an entity component. @param component UserVarsLib_CompatibleComponent @param variable string|UserVarsLib_UserVar IsDebug \u00b6 function Library:IsDebug() -> boolean Returns whether :Debug() has been ran successfully. Log \u00b6 function Library:Log(...) Log a value. @param ... any LogError \u00b6 function Library:LogError(...) Log an error. @param ... any LogMethod \u00b6 function Library:LogMethod(method, ...) Log a message in the format \"[MODULE] method(): msg\" @param method any @param ... any LogNotImplemented \u00b6 function Library:LogNotImplemented(methodName) Logs a \"Not implemented\" warning. Use as a placeholder. @param methodName string LogWarning \u00b6 function Library:LogWarning(...) Log a warning. Requires logging level to be set to WARN or lower. @param ... any Mute \u00b6 function Library:Mute() Stop all non-error, non-warning logging from this feature. RawLog \u00b6 function Library:RawLog(...) Log values without any prefixing. @param ... any RegisterClass \u00b6 function Library:RegisterClass(className, class, parentClasses) -> `T` Registers a class. @param className `T` @param class table Class table. @param parentClasses string[]? Classes this one inherits from. RegisterModVariable \u00b6 function Library:RegisterModVariable(modGUID, name, data) Registers a mod variable. @param modGUID GUID @param name string @param data UserVarsLib_ModVar RegisterTranslatedString \u00b6 function Library:RegisterTranslatedString(handle, tsk) -> Library_TranslatedString Registers a TSK. @param handle TranslatedStringHandle @param tsk Library_TranslatedString ModTable, FeatureID and Handle fields are auto-initialized. RegisterUserVariable \u00b6 function Library:RegisterUserVariable(name, data) Registers a user variable. @param name string @param data UserVarsLib_UserVar? SetModVariable \u00b6 function Library:SetModVariable(modGUID, name, value) Sets the value of a mod variable. @param modGUID GUID @param name string @param value any SetUserVariable \u00b6 function Library:SetUserVariable(component, variable, value) Sets the value of a user variable. @param component UserVarsLib_CompatibleComponent @param variable string|UserVarsLib_UserVar @param value any ShutUp \u00b6 function Library:ShutUp() Stop all non-error logging. StartProfiling \u00b6 function Library:StartProfiling(id) Starts a profiling session. Does nothing outside of Debug mode. @param id string Session ID. ThrowNotImplemented \u00b6 function Library:ThrowNotImplemented(methodName) Throws a \"Not implemented\" error. Use as a placeholder. @param methodName string","title":"Library"},{"location":"Documentation/Utilities/Library/#library","text":"The Library class is the internal base class for libraries in Epip. It offers general-purpose utility methods, such as logging, debug flags, event systems, as well as integrations with some core Epip libraries to simplify the registration of resources. Epip.InitializeLibrary() is meant to be used to define libraries, though you are not intended to do so in your own mod - use Features instead. Library contains integrations with the following core Epip libraries: Text (for TSK registration and organizing TSKs by library/feature within the localization sheet) UserVars (for namespacing ) OOP (for containing related subclasses) Perceptive readers will realize that these integrations indeed create circular dependencies. This concern is however pretty low on the list. The class includes some methods to filter out unwanted logging, however the recommended way to filter it is to use the \"control panel\" UI ( Feature_DebugMenu , defaults to LCtrl + B ) to set the logging level instead of calling the methods yourself anywhere.","title":"Library"},{"location":"Documentation/Utilities/Library/#library-class","text":"Inherits from Class .","title":"Library Class"},{"location":"Documentation/Utilities/Library/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Library/#addprofilingstep","text":"function Library:AddProfilingStep(stepID) Adds a step to the current profiling session. Does nothing outside of Debug mode. @param stepID string","title":"AddProfilingStep"},{"location":"Documentation/Utilities/Library/#addsubscribableevent","text":"function Library:AddSubscribableEvent(evName, preventable) -> Event Registers a new event. @param evName string @param preventable boolean? Defaults to false.","title":"AddSubscribableEvent"},{"location":"Documentation/Utilities/Library/#addsubscribablehook","text":"function Library:AddSubscribableHook(evName, preventable) -> Event Registers a new hook. @param evName string @param preventable boolean? Defaults to false.","title":"AddSubscribableHook"},{"location":"Documentation/Utilities/Library/#create","text":"function Library.Create(modTable, id, data) -> Library Initializes a table as a Library. @param modTable string @param id string @param data Library","title":"Create"},{"location":"Documentation/Utilities/Library/#debug","text":"function Library:Debug() Show debug-level logging from this library. Only works in Developer mode.","title":"Debug"},{"location":"Documentation/Utilities/Library/#debuglog","text":"function Library:DebugLog() Log a value in Debug mode.","title":"DebugLog"},{"location":"Documentation/Utilities/Library/#dump","text":"function Library:Dump(msg) Dump a value to the console, in Debug mode. @param msg any","title":"Dump"},{"location":"Documentation/Utilities/Library/#endprofiling","text":"function Library:EndProfiling() Ends the current profiling session. Does nothing outside of Debug mode.","title":"EndProfiling"},{"location":"Documentation/Utilities/Library/#error","text":"function Library:Error(method) Throws an error prefixed by the thrower method name. @param method string","title":"Error"},{"location":"Documentation/Utilities/Library/#getclass","text":"function Library:GetClass(className) -> `T` Returns a class's base table. @param className `T`","title":"GetClass"},{"location":"Documentation/Utilities/Library/#getmodvariable","text":"function Library:GetModVariable(modGUID, name) -> any Returns the value of a mod variable. @param modGUID GUID @param name string","title":"GetModVariable"},{"location":"Documentation/Utilities/Library/#getpackageprefix","text":"function Library:GetPackagePrefix() -> string Returns the package prefix for this library's subclasses.","title":"GetPackagePrefix"},{"location":"Documentation/Utilities/Library/#gettranslatedstringhandleforkey","text":"function Library:GetTranslatedStringHandleForKey(localKey) -> TranslatedStringHandle? @param localKey string","title":"GetTranslatedStringHandleForKey"},{"location":"Documentation/Utilities/Library/#getuservariable","text":"function Library:GetUserVariable(component, variable) -> any Gets the value of a user variable on an entity component. @param component UserVarsLib_CompatibleComponent @param variable string|UserVarsLib_UserVar","title":"GetUserVariable"},{"location":"Documentation/Utilities/Library/#isdebug","text":"function Library:IsDebug() -> boolean Returns whether :Debug() has been ran successfully.","title":"IsDebug"},{"location":"Documentation/Utilities/Library/#log","text":"function Library:Log(...) Log a value. @param ... any","title":"Log"},{"location":"Documentation/Utilities/Library/#logerror","text":"function Library:LogError(...) Log an error. @param ... any","title":"LogError"},{"location":"Documentation/Utilities/Library/#logmethod","text":"function Library:LogMethod(method, ...) Log a message in the format \"[MODULE] method(): msg\" @param method any @param ... any","title":"LogMethod"},{"location":"Documentation/Utilities/Library/#lognotimplemented","text":"function Library:LogNotImplemented(methodName) Logs a \"Not implemented\" warning. Use as a placeholder. @param methodName string","title":"LogNotImplemented"},{"location":"Documentation/Utilities/Library/#logwarning","text":"function Library:LogWarning(...) Log a warning. Requires logging level to be set to WARN or lower. @param ... any","title":"LogWarning"},{"location":"Documentation/Utilities/Library/#mute","text":"function Library:Mute() Stop all non-error, non-warning logging from this feature.","title":"Mute"},{"location":"Documentation/Utilities/Library/#rawlog","text":"function Library:RawLog(...) Log values without any prefixing. @param ... any","title":"RawLog"},{"location":"Documentation/Utilities/Library/#registerclass","text":"function Library:RegisterClass(className, class, parentClasses) -> `T` Registers a class. @param className `T` @param class table Class table. @param parentClasses string[]? Classes this one inherits from.","title":"RegisterClass"},{"location":"Documentation/Utilities/Library/#registermodvariable","text":"function Library:RegisterModVariable(modGUID, name, data) Registers a mod variable. @param modGUID GUID @param name string @param data UserVarsLib_ModVar","title":"RegisterModVariable"},{"location":"Documentation/Utilities/Library/#registertranslatedstring","text":"function Library:RegisterTranslatedString(handle, tsk) -> Library_TranslatedString Registers a TSK. @param handle TranslatedStringHandle @param tsk Library_TranslatedString ModTable, FeatureID and Handle fields are auto-initialized.","title":"RegisterTranslatedString"},{"location":"Documentation/Utilities/Library/#registeruservariable","text":"function Library:RegisterUserVariable(name, data) Registers a user variable. @param name string @param data UserVarsLib_UserVar?","title":"RegisterUserVariable"},{"location":"Documentation/Utilities/Library/#setmodvariable","text":"function Library:SetModVariable(modGUID, name, value) Sets the value of a mod variable. @param modGUID GUID @param name string @param value any","title":"SetModVariable"},{"location":"Documentation/Utilities/Library/#setuservariable","text":"function Library:SetUserVariable(component, variable, value) Sets the value of a user variable. @param component UserVarsLib_CompatibleComponent @param variable string|UserVarsLib_UserVar @param value any","title":"SetUserVariable"},{"location":"Documentation/Utilities/Library/#shutup","text":"function Library:ShutUp() Stop all non-error logging.","title":"ShutUp"},{"location":"Documentation/Utilities/Library/#startprofiling","text":"function Library:StartProfiling(id) Starts a profiling session. Does nothing outside of Debug mode. @param id string Session ID.","title":"StartProfiling"},{"location":"Documentation/Utilities/Library/#thrownotimplemented","text":"function Library:ThrowNotImplemented(methodName) Throws a \"Not implemented\" error. Use as a placeholder. @param methodName string","title":"ThrowNotImplemented"},{"location":"Documentation/Utilities/Mod/","text":"Mod \u00b6 The Mod library contains wrapper methods for querying mod-related information. The GUIDS table contains the GUIDs of various notable mods. ModLib Class \u00b6 Methods \u00b6 Get \u00b6 function ModLib.Get() -> Module Returns a mod by its guid. GetCurrentContext \u00b6 function ModLib.GetCurrentContext() -> \"Client\"|\"Server\" Returns the context the caller script is running in. GetLoadOrder \u00b6 function ModLib.GetLoadOrder() -> Module[] Returns a list of the currently loaded mods. GetStoryVersion \u00b6 function ModLib.GetStoryVersion(guid) -> integer?, integer?, integer?, integer? -- Major, minor, revision, build version. Fails if the mod is not loaded. Returns the story version of a mod. @param guid GUID IsLoaded \u00b6 function ModLib.IsLoaded(guid) Returns whether a mod is loaded. @param guid GUID","title":"Mod"},{"location":"Documentation/Utilities/Mod/#mod","text":"The Mod library contains wrapper methods for querying mod-related information. The GUIDS table contains the GUIDs of various notable mods.","title":"Mod"},{"location":"Documentation/Utilities/Mod/#modlib-class","text":"","title":"ModLib Class"},{"location":"Documentation/Utilities/Mod/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Mod/#get","text":"function ModLib.Get() -> Module Returns a mod by its guid.","title":"Get"},{"location":"Documentation/Utilities/Mod/#getcurrentcontext","text":"function ModLib.GetCurrentContext() -> \"Client\"|\"Server\" Returns the context the caller script is running in.","title":"GetCurrentContext"},{"location":"Documentation/Utilities/Mod/#getloadorder","text":"function ModLib.GetLoadOrder() -> Module[] Returns a list of the currently loaded mods.","title":"GetLoadOrder"},{"location":"Documentation/Utilities/Mod/#getstoryversion","text":"function ModLib.GetStoryVersion(guid) -> integer?, integer?, integer?, integer? -- Major, minor, revision, build version. Fails if the mod is not loaded. Returns the story version of a mod. @param guid GUID","title":"GetStoryVersion"},{"location":"Documentation/Utilities/Mod/#isloaded","text":"function ModLib.IsLoaded(guid) Returns whether a mod is loaded. @param guid GUID","title":"IsLoaded"},{"location":"Documentation/Utilities/Net/","text":"Net \u00b6 The Net library offers wrapper methods to make working with network messages easier. Its main feature is automatically stringifying messages, removing the need to do so explicitly when using tables. Additionally, Net.RegisterListener() provides a way to register net listeners with IDE hints for the function parameters. This is done by defining a class with the name of the net message, for example: ---@class EPIPENCOUNTERS_Vanity_ApplyAura : NetMessage, Net_SimpleMessage_NetID ---@field AuraID string ---@field BoneID string Net.RegisterListener(\"EPIPENCOUNTERS_Vanity_ApplyAura\", function(payload) -- The payload variable here will be of the type EPIPENCOUNTERS_Vanity_ApplyAura and offer auto-completion! end) Additionally, for purposes of semantic clarity, a NetMessage class exists for denoting net events. Several other net message classes are defined with commonly used fields like CharacterNetID . You may have your net message classes inherit from these to reduce annotation duplication and to clarify the class's purpose as a net message. NetLib Class \u00b6 Inherits from Library . Events and Hooks \u00b6 MessageReceived (event) \u00b6 @field Channel string @field Message `T`|any Will be a primitive if the payload sent wasn't a table. @field UserID UserId Methods \u00b6 Broadcast \u00b6 function NetLib.Broadcast(channel, message, excludedChar) Sends a message to all peers. @param channel `T` @param message T? @param excludedChar GUID? PostToCharacter \u00b6 function NetLib.PostToCharacter(char, channel, message) Sends a message to the user that currently controls char. Fails if char is a summon. @param char Character|GUID|NetId @param channel `T` @param message T? PostToOwner \u00b6 function NetLib.PostToOwner(char, channel, message) Sends a message to the owner of char. Use if you suspect the char might be a summon. @param char Character @param channel string @param message any PostToUser \u00b6 function NetLib.PostToUser(user, channel, message, excludedChar) Sends a message to a user. @param user UserId @param channel `T` @param message T @param excludedChar GUID? RegisterListener \u00b6 function NetLib.RegisterListener(channel, func) Wrapper for Ext.RegisterNetListener that parses json payloads and fires an event afterwards. @param channel `T` @param func fun(payload:`T`)","title":"Net"},{"location":"Documentation/Utilities/Net/#net","text":"The Net library offers wrapper methods to make working with network messages easier. Its main feature is automatically stringifying messages, removing the need to do so explicitly when using tables. Additionally, Net.RegisterListener() provides a way to register net listeners with IDE hints for the function parameters. This is done by defining a class with the name of the net message, for example: ---@class EPIPENCOUNTERS_Vanity_ApplyAura : NetMessage, Net_SimpleMessage_NetID ---@field AuraID string ---@field BoneID string Net.RegisterListener(\"EPIPENCOUNTERS_Vanity_ApplyAura\", function(payload) -- The payload variable here will be of the type EPIPENCOUNTERS_Vanity_ApplyAura and offer auto-completion! end) Additionally, for purposes of semantic clarity, a NetMessage class exists for denoting net events. Several other net message classes are defined with commonly used fields like CharacterNetID . You may have your net message classes inherit from these to reduce annotation duplication and to clarify the class's purpose as a net message.","title":"Net"},{"location":"Documentation/Utilities/Net/#netlib-class","text":"Inherits from Library .","title":"NetLib Class"},{"location":"Documentation/Utilities/Net/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/Net/#messagereceived-event","text":"@field Channel string @field Message `T`|any Will be a primitive if the payload sent wasn't a table. @field UserID UserId","title":"MessageReceived (event)"},{"location":"Documentation/Utilities/Net/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Net/#broadcast","text":"function NetLib.Broadcast(channel, message, excludedChar) Sends a message to all peers. @param channel `T` @param message T? @param excludedChar GUID?","title":"Broadcast"},{"location":"Documentation/Utilities/Net/#posttocharacter","text":"function NetLib.PostToCharacter(char, channel, message) Sends a message to the user that currently controls char. Fails if char is a summon. @param char Character|GUID|NetId @param channel `T` @param message T?","title":"PostToCharacter"},{"location":"Documentation/Utilities/Net/#posttoowner","text":"function NetLib.PostToOwner(char, channel, message) Sends a message to the owner of char. Use if you suspect the char might be a summon. @param char Character @param channel string @param message any","title":"PostToOwner"},{"location":"Documentation/Utilities/Net/#posttouser","text":"function NetLib.PostToUser(user, channel, message, excludedChar) Sends a message to a user. @param user UserId @param channel `T` @param message T @param excludedChar GUID?","title":"PostToUser"},{"location":"Documentation/Utilities/Net/#registerlistener","text":"function NetLib.RegisterListener(channel, func) Wrapper for Ext.RegisterNetListener that parses json payloads and fires an event afterwards. @param channel `T` @param func fun(payload:`T`)","title":"RegisterListener"},{"location":"Documentation/Utilities/OOP/","text":"OOP \u00b6 The OOP library implements a OOP system that supports multiple inheritance. A class is defined by a class definition table , passed onto RegisterClass() to initialize and register it. Classes to inherit from are defined during this call and cannot be changed afterwards. Instances of the classes will inherit keys from their class definition table. Inheritance is done via metatables, however special logic is used to extend this functionality to allow for multiple inheritance. If class A inherits from class B and C, indexing an instance (or the definition) of class A will: Check for the presence of the key within the instance/definition of A Check for the presence of the key within each superclass, in order of inheritance established during RegisterClass() (from first to last). This is done recursively for any superclasses those classes might have. Invoke __index of the class. There is currently no support for multiple inheritance of metamethods. They will only be checked in the direct superclass. There is no public constructor for classes by design; it is up to you to explicitly declare one. In Epip, these are typically called Create() . __call is not used for clarity reasons, as well as limitations in how it can be annotated (ex. no comments for parameters). Constructors must call ClassDefinition:__Create() to create an instance. This method takes an optional table parameter; if present, that table will become the class instance, keeping any keys it had already set. This is typically also the parameter of the public constructor, so as to avoid bloating the constructor's formal parameters, instead providing them via a table. Within your constructor you may afterwards perform any initializations of your own as necessary. As mentioned before, an instance must be of a single class type, and there are no public constructors; as a result, it is not possible to make an \"anonymous\" class that inherits from multiple classes. You must register an explicit class that inherits from the classes you want. Class instances are of the Class type. This type provides several utility methods for type-checking. When annotating your classes, be sure to make them inherit from Class to denote they use the OOP system as well as to expose the utility methods in the IDE. Note that Feature has integration with this library that allows registering and fetching classes related to the feature itself. If working with features, their calls should be used instead, as they will likely get automatic namespacing in the future. Currently, class names must be unique, lest new registrations will overwrite the previous definition. OOPLib Class \u00b6 Methods \u00b6 GetClass \u00b6 function OOPLib.GetClass(className) -> `T` Returns the base table for a class. Throws if the class is not registered. @param className `T` IsClass \u00b6 function OOPLib.IsClass(tbl, className) -> boolean Returns whether a table is a class table or instance. @param tbl table @param className string? If present, `true` will only be returned if the table *is* the requested class. RegisterClass \u00b6 function OOPLib.RegisterClass(className, class, parentClasses) -> `T` Registers a class. @param className string|`T` @param class table @param parentClasses string[]? Classes this one inherits from. SetMetatable \u00b6 function OOPLib.SetMetatable(table, metatable) Sets a table's metatable. __index is set to index the metatable itself, using the metatable's __index as a fallback. @param table table Mutated. @param metatable table Class Class \u00b6 Methods \u00b6 GetClassDefinition \u00b6 function Class:GetClassDefinition() -> Class Returns the main table that defines this class instance. GetClassName \u00b6 function Class:GetClassName() -> string Returns the name of the class. GetParentClasses \u00b6 function Class:GetParentClasses() -> Class[] Returns the parent classes of the class. ImplementsClass \u00b6 function Class:ImplementsClass(className) -> boolean Returns whether this class implements another. Hierarchies are considered. @param className string __Create \u00b6 ---@protected function Class:__Create(data) -> Class Creates a new instance of the class. @param data table? Table with the initial fields of the instance.","title":"OOP"},{"location":"Documentation/Utilities/OOP/#oop","text":"The OOP library implements a OOP system that supports multiple inheritance. A class is defined by a class definition table , passed onto RegisterClass() to initialize and register it. Classes to inherit from are defined during this call and cannot be changed afterwards. Instances of the classes will inherit keys from their class definition table. Inheritance is done via metatables, however special logic is used to extend this functionality to allow for multiple inheritance. If class A inherits from class B and C, indexing an instance (or the definition) of class A will: Check for the presence of the key within the instance/definition of A Check for the presence of the key within each superclass, in order of inheritance established during RegisterClass() (from first to last). This is done recursively for any superclasses those classes might have. Invoke __index of the class. There is currently no support for multiple inheritance of metamethods. They will only be checked in the direct superclass. There is no public constructor for classes by design; it is up to you to explicitly declare one. In Epip, these are typically called Create() . __call is not used for clarity reasons, as well as limitations in how it can be annotated (ex. no comments for parameters). Constructors must call ClassDefinition:__Create() to create an instance. This method takes an optional table parameter; if present, that table will become the class instance, keeping any keys it had already set. This is typically also the parameter of the public constructor, so as to avoid bloating the constructor's formal parameters, instead providing them via a table. Within your constructor you may afterwards perform any initializations of your own as necessary. As mentioned before, an instance must be of a single class type, and there are no public constructors; as a result, it is not possible to make an \"anonymous\" class that inherits from multiple classes. You must register an explicit class that inherits from the classes you want. Class instances are of the Class type. This type provides several utility methods for type-checking. When annotating your classes, be sure to make them inherit from Class to denote they use the OOP system as well as to expose the utility methods in the IDE. Note that Feature has integration with this library that allows registering and fetching classes related to the feature itself. If working with features, their calls should be used instead, as they will likely get automatic namespacing in the future. Currently, class names must be unique, lest new registrations will overwrite the previous definition.","title":"OOP"},{"location":"Documentation/Utilities/OOP/#ooplib-class","text":"","title":"OOPLib Class"},{"location":"Documentation/Utilities/OOP/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/OOP/#getclass","text":"function OOPLib.GetClass(className) -> `T` Returns the base table for a class. Throws if the class is not registered. @param className `T`","title":"GetClass"},{"location":"Documentation/Utilities/OOP/#isclass","text":"function OOPLib.IsClass(tbl, className) -> boolean Returns whether a table is a class table or instance. @param tbl table @param className string? If present, `true` will only be returned if the table *is* the requested class.","title":"IsClass"},{"location":"Documentation/Utilities/OOP/#registerclass","text":"function OOPLib.RegisterClass(className, class, parentClasses) -> `T` Registers a class. @param className string|`T` @param class table @param parentClasses string[]? Classes this one inherits from.","title":"RegisterClass"},{"location":"Documentation/Utilities/OOP/#setmetatable","text":"function OOPLib.SetMetatable(table, metatable) Sets a table's metatable. __index is set to index the metatable itself, using the metatable's __index as a fallback. @param table table Mutated. @param metatable table","title":"SetMetatable"},{"location":"Documentation/Utilities/OOP/#class-class","text":"","title":"Class Class"},{"location":"Documentation/Utilities/OOP/#methods_1","text":"","title":"Methods"},{"location":"Documentation/Utilities/OOP/#getclassdefinition","text":"function Class:GetClassDefinition() -> Class Returns the main table that defines this class instance.","title":"GetClassDefinition"},{"location":"Documentation/Utilities/OOP/#getclassname","text":"function Class:GetClassName() -> string Returns the name of the class.","title":"GetClassName"},{"location":"Documentation/Utilities/OOP/#getparentclasses","text":"function Class:GetParentClasses() -> Class[] Returns the parent classes of the class.","title":"GetParentClasses"},{"location":"Documentation/Utilities/OOP/#implementsclass","text":"function Class:ImplementsClass(className) -> boolean Returns whether this class implements another. Hierarchies are considered. @param className string","title":"ImplementsClass"},{"location":"Documentation/Utilities/OOP/#__create","text":"---@protected function Class:__Create(data) -> Class Creates a new instance of the class. @param data table? Table with the initial fields of the instance.","title":"__Create"},{"location":"Documentation/Utilities/Pointer/","text":"Pointer \u00b6 Client-only The Pointer library offers methods and events related to the state of the pointer - that is, what the user is selecting with their cursor. This includes world objects as well as drag-drop. It's primarily a wrapper around Ext.UI.GetPickingState() . In addition to methods to quickly fetch its entities, it offers events for when they change (when the user starts/stops hovering over a new entity). PointerLib Class \u00b6 Inherits from Library . Events and Hooks \u00b6 HoverCharacterChanged (event) \u00b6 @field Character EclCharacter? HoverCharacter2Changed (event) \u00b6 Fired when the corpse character over the pointer changes. @field Character EclCharacter? HoverItemChanged (event) \u00b6 @field Item EclItem? HoverEntityChanged (event) \u00b6 @field Entity Entity? DragDropStateChanged (event) \u00b6 Fired when a player starts or ends a drag drop. @field State DragDropManagerPlayerDragInfo? `nil` if the player stopped dragging. @field PlayerIndex integer Methods \u00b6 GetCurrentCharacter \u00b6 function PointerLib.GetCurrentCharacter(playerIndex, includeDead) -- (Client-only) -> EclCharacter? @param playerIndex integer? Defaults to 1. @param includeDead boolean? Defaults to false. GetCurrentEntity \u00b6 function PointerLib.GetCurrentEntity(playerIndex) -- (Client-only) -> Entity? @param playerIndex integer? Defaults to 1. GetCurrentItem \u00b6 function PointerLib.GetCurrentItem(playerIndex) -- (Client-only) -> EclItem? @param playerIndex integer? Defaults to 1. GetDragDropState \u00b6 function PointerLib.GetDragDropState(playerIndex) -- (Client-only) -> DragDropManagerPlayerDragInfo Returns the drag-drop system state for a player. @param playerIndex integer? Defaults to 1. GetDraggedItem \u00b6 function PointerLib.GetDraggedItem(playerIndex) -- (Client-only) -> EclItem? Returns the item being dragged by a player. @param playerIndex integer? Defaults to 1. GetDraggedSkill \u00b6 function PointerLib.GetDraggedSkill(playerIndex) -- (Client-only) -> string? -- Can be an action as well. Returns the skill being dragged by a player. @param playerIndex integer? Defaults to 1. GetWalkablePosition \u00b6 function PointerLib.GetWalkablePosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1. GetWorldPosition \u00b6 function PointerLib.GetWorldPosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1. IsDragging \u00b6 function PointerLib.IsDragging(playerIndex) -- (Client-only) -> boolean Returns whether the player's cursor is dragging anything. @param playerIndex integer? Defaults to 1.","title":"Pointer"},{"location":"Documentation/Utilities/Pointer/#pointer","text":"Client-only The Pointer library offers methods and events related to the state of the pointer - that is, what the user is selecting with their cursor. This includes world objects as well as drag-drop. It's primarily a wrapper around Ext.UI.GetPickingState() . In addition to methods to quickly fetch its entities, it offers events for when they change (when the user starts/stops hovering over a new entity).","title":"Pointer"},{"location":"Documentation/Utilities/Pointer/#pointerlib-class","text":"Inherits from Library .","title":"PointerLib Class"},{"location":"Documentation/Utilities/Pointer/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/Pointer/#hovercharacterchanged-event","text":"@field Character EclCharacter?","title":"HoverCharacterChanged (event)"},{"location":"Documentation/Utilities/Pointer/#hovercharacter2changed-event","text":"Fired when the corpse character over the pointer changes. @field Character EclCharacter?","title":"HoverCharacter2Changed (event)"},{"location":"Documentation/Utilities/Pointer/#hoveritemchanged-event","text":"@field Item EclItem?","title":"HoverItemChanged (event)"},{"location":"Documentation/Utilities/Pointer/#hoverentitychanged-event","text":"@field Entity Entity?","title":"HoverEntityChanged (event)"},{"location":"Documentation/Utilities/Pointer/#dragdropstatechanged-event","text":"Fired when a player starts or ends a drag drop. @field State DragDropManagerPlayerDragInfo? `nil` if the player stopped dragging. @field PlayerIndex integer","title":"DragDropStateChanged (event)"},{"location":"Documentation/Utilities/Pointer/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Pointer/#getcurrentcharacter","text":"function PointerLib.GetCurrentCharacter(playerIndex, includeDead) -- (Client-only) -> EclCharacter? @param playerIndex integer? Defaults to 1. @param includeDead boolean? Defaults to false.","title":"GetCurrentCharacter"},{"location":"Documentation/Utilities/Pointer/#getcurrententity","text":"function PointerLib.GetCurrentEntity(playerIndex) -- (Client-only) -> Entity? @param playerIndex integer? Defaults to 1.","title":"GetCurrentEntity"},{"location":"Documentation/Utilities/Pointer/#getcurrentitem","text":"function PointerLib.GetCurrentItem(playerIndex) -- (Client-only) -> EclItem? @param playerIndex integer? Defaults to 1.","title":"GetCurrentItem"},{"location":"Documentation/Utilities/Pointer/#getdragdropstate","text":"function PointerLib.GetDragDropState(playerIndex) -- (Client-only) -> DragDropManagerPlayerDragInfo Returns the drag-drop system state for a player. @param playerIndex integer? Defaults to 1.","title":"GetDragDropState"},{"location":"Documentation/Utilities/Pointer/#getdraggeditem","text":"function PointerLib.GetDraggedItem(playerIndex) -- (Client-only) -> EclItem? Returns the item being dragged by a player. @param playerIndex integer? Defaults to 1.","title":"GetDraggedItem"},{"location":"Documentation/Utilities/Pointer/#getdraggedskill","text":"function PointerLib.GetDraggedSkill(playerIndex) -- (Client-only) -> string? -- Can be an action as well. Returns the skill being dragged by a player. @param playerIndex integer? Defaults to 1.","title":"GetDraggedSkill"},{"location":"Documentation/Utilities/Pointer/#getwalkableposition","text":"function PointerLib.GetWalkablePosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1.","title":"GetWalkablePosition"},{"location":"Documentation/Utilities/Pointer/#getworldposition","text":"function PointerLib.GetWorldPosition(playerIndex) -- (Client-only) -> Vector3D @param playerIndex integer? Defaults to 1.","title":"GetWorldPosition"},{"location":"Documentation/Utilities/Pointer/#isdragging","text":"function PointerLib.IsDragging(playerIndex) -- (Client-only) -> boolean Returns whether the player's cursor is dragging anything. @param playerIndex integer? Defaults to 1.","title":"IsDragging"},{"location":"Documentation/Utilities/Text/","text":"Text \u00b6 The Text table offers utility methods for working with text and formatting tags. It also power's Epip custom TSK system, intended to make exporting strings for translation more easily, through the TextLib_TranslatedString class. This class contains not only the handle and default text of a string, but also contextual data that is later used to populate the public translation sheets. Internally, Epip TSKs still use the game's handle system. However, translations are created and loaded differently, through .json files. When lua loads, Epip looks for these translation files in the \\Data\\Mods\\{Mod}_{GUID}\\Localization\\Epip\\{Game language}\\{Mod table}.json folder for each mod, following the load order. {Mod table}.json files are checked for every other mod present. This allows mods to provide translations or string overrides for any other mod using Epip's TSK system. Epip itself also uses this system to load the publicly contributed translations. A single mod can provide translation files for multiple mods, by creating multiple {Mod table}.json files within a language folder. The game language IDs correspond to the ones used by the game: English Amlatspanish Chinese Chinesetraditional Czech French German Italian Japanese Korean Polish Portuguesebrazil Russian Spanish It's worth noting that the game supports adding custom languages by editing the Language field in config.lsx (thereby changing the ChatLanguage global switch). Epip's system will consider such cases for loading translations. For information on how the public translation sheets are handled, see this page . CommonStrings \u00b6 CommonStrings.lua contains TSKs for generic strings that are reused across many different contexts. Strings should be added here if they are of general usage and their translation won't differ across different contexts. These are accessed via the Text.CommonStrings , a raw table with no particularities. The following VSC snippet is used to add entries to CommonStrings: \"commonstring\": { \"scope\": \"lua\", \"prefix\": \"commonstring\", \"body\": [ \"Text.CommonStrings.$1 = Text.RegisterTranslatedString({\", \" Handle = \\\"h${UUID/[\\\\-]/g/g}\\\",\", \" Text = \\\"$1\\\",\", \"})\", ], }, TextLib Class \u00b6 Inherits from Library . Events and Hooks \u00b6 GetTranslationTemplateEntry (hook) \u00b6 @field Entry TextLib_LocalizationTemplate_Entry Hookable. Set to nil to prevent an entry from getting exported. @field TranslatedString TextLib_TranslatedString Methods \u00b6 AddPadding \u00b6 function TextLib.AddPadding(str, minLength, paddingCharacter, direction) -> string Adds padding characters to a string to meet a minimum length. @param str string @param minLength integer @param paddingCharacter string? Defaults to `\" \"` @param direction (\"front\"|\"back\")? Defaults to `\"front\"`. AppendLine \u00b6 function TextLib.AppendLine(str1, str2) -> string Joins two strings inserting a line break between them. @param str1 string The line break is not added if this string is empty. @param str2 string Capitalize \u00b6 function TextLib.Capitalize(str) -> string Capitalizes the first letter of the string. https://stackoverflow.com/a/2421746 @param str string Contains \u00b6 function TextLib.Contains(str, pattern) Returns whether str contains the pattern. @param str string @param pattern pattern Dump \u00b6 function TextLib.Dump(obj, opts) -> string Shorthand for Ext.DumpExport() which does not require you to explicitly define the default options (Beautify, StringifyInternalTypes, etc.) @param obj any @param opts unknown? TODO specify type EqualizeSpace \u00b6 function TextLib.EqualizeSpace(str1, str2, space) -> string Concatenates 2 strings and adds enough whitespace padding inbetween them to ensure a specific length. @param str1 string @param str2 string @param space integer EscapePatternCharacters \u00b6 function TextLib.EscapePatternCharacters(str) -> string Escapes characters that have a special meaning in lua patterns. Source: https://github.com/lua-nucleo/lua-nucleo/blob/v0.1.0/lua-nucleo/string.lua#L245-L267 @param str string Format \u00b6 function TextLib.Format(str, formatData) -> string Format a string. @param str string @param formatData TextFormatData GenerateGUID \u00b6 function TextLib.GenerateGUID(pattern) -> GUID Generate a random GUID. Source: https://gist.github.com/jrus/3197011 @param pattern pattern? Defaults to GUID4 pattern. GenerateLocalizationTemplate \u00b6 function TextLib.GenerateLocalizationTemplate(modTable, existingTemplate) -> TextLib_LocalizationTemplate, integer[]?, integer[]? -- Second param is new strings, third is outdated strings. Second param onwards is only returned while patching. Generates a template file for localizing strings registered through this library. @param modTable string? Defaults to \"EpipEncounters\" @param existingTemplate TextLib_LocalizationTemplate? If present, translated strings from this template will be patched into the new one, if the reference text is still up-to-date. GenerateTranslatedStringHandle \u00b6 function TextLib.GenerateTranslatedStringHandle() -> TranslatedStringHandle Generates a random handle in the format that Larian uses for TranslatedStringHandle. GetCurrentLanguage \u00b6 function TextLib.GetCurrentLanguage() -> string Returns the language the game is set to. GetTranslatedString \u00b6 function TextLib.GetTranslatedString(handle, fallBack) -> string -- Defaults to the handle, or fallBack if specified. Returns the string bound to a TranslatedStringHandle, or a key. @param handle TranslatedStringHandle|string|TextLib_TranslatedString Accepts handles or keys. @param fallBack string? GetTranslatedStringTranslation \u00b6 function TextLib.GetTranslatedStringTranslation(handle, language) -> string? -- `nil` if the handle is not translated Returns the translation for a handle. @param handle TranslatedStringHandle @param language string? Defaults to current language. IsTranslatedStringRegistered \u00b6 function TextLib.IsTranslatedStringRegistered(handle) -> boolean Returns whether a TSK handle was registered through the Text library. @param handle TranslatedStringHandle Join \u00b6 function TextLib.Join(str1, str2, separator) Joins two strings together. @param str1 string @param str2 string @param separator string? Defaults to ` ` LoadLocalization \u00b6 function TextLib.LoadLocalization(language, filePath) Loads a localization file. Must be in the format generated by GenerateLocalizationTemplate() @param language string @param filePath string RegisterTranslatedString \u00b6 function TextLib.RegisterTranslatedString(handle, text) -> TextLib_TranslatedString Registers a translated string. @param handle TranslatedStringHandle @param text string RemoveGUIDPrefix \u00b6 function TextLib.RemoveGUIDPrefix(guid) -> GUID Returns the GUID passed by parameter with any prefixes removed. @param guid PrefixedGUID RemoveTrailingZeros \u00b6 function TextLib.RemoveTrailingZeros(num) -> string Removes trailing zeros from a number and returns it as string. @param num number Round \u00b6 function TextLib.Round(value, decimals) -> string Returns a string representation of a number, rounded. @param value number @param decimals integer Defaults to 0. SeparatePascalCase \u00b6 function TextLib.SeparatePascalCase(str) -> string Returns a string with spaces inserted inbetween PascalCase words. @param str string SetStringKey \u00b6 function TextLib.SetStringKey(key, handle) Binds a TSK to a string key. @param key string @param handle TranslatedStringHandle SetTranslatedString \u00b6 function TextLib.SetTranslatedString(handle, text) Sets the text of a translated string. @param handle TranslatedStringHandle @param text string SetTranslatedStringTranslation \u00b6 function TextLib.SetTranslatedStringTranslation(handle, language, text) Sets the translation of a TSK. The handle's bound text will be updated if the game's language matches. @param handle TranslatedStringHandle @param language string @param text string Split \u00b6 function TextLib.Split(inputstr, sep) -> string[] Split a string by delimiter. Source: https://stackoverflow.com/questions/1426954/split-string-in-lua @param inputstr string @param sep string Split_2 \u00b6 function TextLib.Split_2() StripFontTags \u00b6 function TextLib.StripFontTags(str) -> string Removes all tags from a string. WIP! @param str string","title":"Text"},{"location":"Documentation/Utilities/Text/#text","text":"The Text table offers utility methods for working with text and formatting tags. It also power's Epip custom TSK system, intended to make exporting strings for translation more easily, through the TextLib_TranslatedString class. This class contains not only the handle and default text of a string, but also contextual data that is later used to populate the public translation sheets. Internally, Epip TSKs still use the game's handle system. However, translations are created and loaded differently, through .json files. When lua loads, Epip looks for these translation files in the \\Data\\Mods\\{Mod}_{GUID}\\Localization\\Epip\\{Game language}\\{Mod table}.json folder for each mod, following the load order. {Mod table}.json files are checked for every other mod present. This allows mods to provide translations or string overrides for any other mod using Epip's TSK system. Epip itself also uses this system to load the publicly contributed translations. A single mod can provide translation files for multiple mods, by creating multiple {Mod table}.json files within a language folder. The game language IDs correspond to the ones used by the game: English Amlatspanish Chinese Chinesetraditional Czech French German Italian Japanese Korean Polish Portuguesebrazil Russian Spanish It's worth noting that the game supports adding custom languages by editing the Language field in config.lsx (thereby changing the ChatLanguage global switch). Epip's system will consider such cases for loading translations. For information on how the public translation sheets are handled, see this page .","title":"Text"},{"location":"Documentation/Utilities/Text/#commonstrings","text":"CommonStrings.lua contains TSKs for generic strings that are reused across many different contexts. Strings should be added here if they are of general usage and their translation won't differ across different contexts. These are accessed via the Text.CommonStrings , a raw table with no particularities. The following VSC snippet is used to add entries to CommonStrings: \"commonstring\": { \"scope\": \"lua\", \"prefix\": \"commonstring\", \"body\": [ \"Text.CommonStrings.$1 = Text.RegisterTranslatedString({\", \" Handle = \\\"h${UUID/[\\\\-]/g/g}\\\",\", \" Text = \\\"$1\\\",\", \"})\", ], },","title":"CommonStrings"},{"location":"Documentation/Utilities/Text/#textlib-class","text":"Inherits from Library .","title":"TextLib Class"},{"location":"Documentation/Utilities/Text/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/Text/#gettranslationtemplateentry-hook","text":"@field Entry TextLib_LocalizationTemplate_Entry Hookable. Set to nil to prevent an entry from getting exported. @field TranslatedString TextLib_TranslatedString","title":"GetTranslationTemplateEntry (hook)"},{"location":"Documentation/Utilities/Text/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Text/#addpadding","text":"function TextLib.AddPadding(str, minLength, paddingCharacter, direction) -> string Adds padding characters to a string to meet a minimum length. @param str string @param minLength integer @param paddingCharacter string? Defaults to `\" \"` @param direction (\"front\"|\"back\")? Defaults to `\"front\"`.","title":"AddPadding"},{"location":"Documentation/Utilities/Text/#appendline","text":"function TextLib.AppendLine(str1, str2) -> string Joins two strings inserting a line break between them. @param str1 string The line break is not added if this string is empty. @param str2 string","title":"AppendLine"},{"location":"Documentation/Utilities/Text/#capitalize","text":"function TextLib.Capitalize(str) -> string Capitalizes the first letter of the string. https://stackoverflow.com/a/2421746 @param str string","title":"Capitalize"},{"location":"Documentation/Utilities/Text/#contains","text":"function TextLib.Contains(str, pattern) Returns whether str contains the pattern. @param str string @param pattern pattern","title":"Contains"},{"location":"Documentation/Utilities/Text/#dump","text":"function TextLib.Dump(obj, opts) -> string Shorthand for Ext.DumpExport() which does not require you to explicitly define the default options (Beautify, StringifyInternalTypes, etc.) @param obj any @param opts unknown? TODO specify type","title":"Dump"},{"location":"Documentation/Utilities/Text/#equalizespace","text":"function TextLib.EqualizeSpace(str1, str2, space) -> string Concatenates 2 strings and adds enough whitespace padding inbetween them to ensure a specific length. @param str1 string @param str2 string @param space integer","title":"EqualizeSpace"},{"location":"Documentation/Utilities/Text/#escapepatterncharacters","text":"function TextLib.EscapePatternCharacters(str) -> string Escapes characters that have a special meaning in lua patterns. Source: https://github.com/lua-nucleo/lua-nucleo/blob/v0.1.0/lua-nucleo/string.lua#L245-L267 @param str string","title":"EscapePatternCharacters"},{"location":"Documentation/Utilities/Text/#format","text":"function TextLib.Format(str, formatData) -> string Format a string. @param str string @param formatData TextFormatData","title":"Format"},{"location":"Documentation/Utilities/Text/#generateguid","text":"function TextLib.GenerateGUID(pattern) -> GUID Generate a random GUID. Source: https://gist.github.com/jrus/3197011 @param pattern pattern? Defaults to GUID4 pattern.","title":"GenerateGUID"},{"location":"Documentation/Utilities/Text/#generatelocalizationtemplate","text":"function TextLib.GenerateLocalizationTemplate(modTable, existingTemplate) -> TextLib_LocalizationTemplate, integer[]?, integer[]? -- Second param is new strings, third is outdated strings. Second param onwards is only returned while patching. Generates a template file for localizing strings registered through this library. @param modTable string? Defaults to \"EpipEncounters\" @param existingTemplate TextLib_LocalizationTemplate? If present, translated strings from this template will be patched into the new one, if the reference text is still up-to-date.","title":"GenerateLocalizationTemplate"},{"location":"Documentation/Utilities/Text/#generatetranslatedstringhandle","text":"function TextLib.GenerateTranslatedStringHandle() -> TranslatedStringHandle Generates a random handle in the format that Larian uses for TranslatedStringHandle.","title":"GenerateTranslatedStringHandle"},{"location":"Documentation/Utilities/Text/#getcurrentlanguage","text":"function TextLib.GetCurrentLanguage() -> string Returns the language the game is set to.","title":"GetCurrentLanguage"},{"location":"Documentation/Utilities/Text/#gettranslatedstring","text":"function TextLib.GetTranslatedString(handle, fallBack) -> string -- Defaults to the handle, or fallBack if specified. Returns the string bound to a TranslatedStringHandle, or a key. @param handle TranslatedStringHandle|string|TextLib_TranslatedString Accepts handles or keys. @param fallBack string?","title":"GetTranslatedString"},{"location":"Documentation/Utilities/Text/#gettranslatedstringtranslation","text":"function TextLib.GetTranslatedStringTranslation(handle, language) -> string? -- `nil` if the handle is not translated Returns the translation for a handle. @param handle TranslatedStringHandle @param language string? Defaults to current language.","title":"GetTranslatedStringTranslation"},{"location":"Documentation/Utilities/Text/#istranslatedstringregistered","text":"function TextLib.IsTranslatedStringRegistered(handle) -> boolean Returns whether a TSK handle was registered through the Text library. @param handle TranslatedStringHandle","title":"IsTranslatedStringRegistered"},{"location":"Documentation/Utilities/Text/#join","text":"function TextLib.Join(str1, str2, separator) Joins two strings together. @param str1 string @param str2 string @param separator string? Defaults to ` `","title":"Join"},{"location":"Documentation/Utilities/Text/#loadlocalization","text":"function TextLib.LoadLocalization(language, filePath) Loads a localization file. Must be in the format generated by GenerateLocalizationTemplate() @param language string @param filePath string","title":"LoadLocalization"},{"location":"Documentation/Utilities/Text/#registertranslatedstring","text":"function TextLib.RegisterTranslatedString(handle, text) -> TextLib_TranslatedString Registers a translated string. @param handle TranslatedStringHandle @param text string","title":"RegisterTranslatedString"},{"location":"Documentation/Utilities/Text/#removeguidprefix","text":"function TextLib.RemoveGUIDPrefix(guid) -> GUID Returns the GUID passed by parameter with any prefixes removed. @param guid PrefixedGUID","title":"RemoveGUIDPrefix"},{"location":"Documentation/Utilities/Text/#removetrailingzeros","text":"function TextLib.RemoveTrailingZeros(num) -> string Removes trailing zeros from a number and returns it as string. @param num number","title":"RemoveTrailingZeros"},{"location":"Documentation/Utilities/Text/#round","text":"function TextLib.Round(value, decimals) -> string Returns a string representation of a number, rounded. @param value number @param decimals integer Defaults to 0.","title":"Round"},{"location":"Documentation/Utilities/Text/#separatepascalcase","text":"function TextLib.SeparatePascalCase(str) -> string Returns a string with spaces inserted inbetween PascalCase words. @param str string","title":"SeparatePascalCase"},{"location":"Documentation/Utilities/Text/#setstringkey","text":"function TextLib.SetStringKey(key, handle) Binds a TSK to a string key. @param key string @param handle TranslatedStringHandle","title":"SetStringKey"},{"location":"Documentation/Utilities/Text/#settranslatedstring","text":"function TextLib.SetTranslatedString(handle, text) Sets the text of a translated string. @param handle TranslatedStringHandle @param text string","title":"SetTranslatedString"},{"location":"Documentation/Utilities/Text/#settranslatedstringtranslation","text":"function TextLib.SetTranslatedStringTranslation(handle, language, text) Sets the translation of a TSK. The handle's bound text will be updated if the game's language matches. @param handle TranslatedStringHandle @param language string @param text string","title":"SetTranslatedStringTranslation"},{"location":"Documentation/Utilities/Text/#split","text":"function TextLib.Split(inputstr, sep) -> string[] Split a string by delimiter. Source: https://stackoverflow.com/questions/1426954/split-string-in-lua @param inputstr string @param sep string","title":"Split"},{"location":"Documentation/Utilities/Text/#split_2","text":"function TextLib.Split_2()","title":"Split_2"},{"location":"Documentation/Utilities/Text/#stripfonttags","text":"function TextLib.StripFontTags(str) -> string Removes all tags from a string. WIP! @param str string","title":"StripFontTags"},{"location":"Documentation/Utilities/Texture/","text":"Texture \u00b6 The Texture library is used to store and reference texture resources. It is mainly used to store UI textures used for Generic styles, via the Feature_GenericUITextures feature.. TextureLib_Texture Class \u00b6 @field Name string Resource name. @field GUID GUID TextureLib Class \u00b6 Inherits from Library . Methods \u00b6 GetTexture \u00b6 function TextureLib.GetTexture(name) -> TextureLib_Texture Returns a texture by name. @param name string RegisterTexture \u00b6 function TextureLib.RegisterTexture(name, data) -> TextureLib_Texture Registers a texture resource. @param name string @param data TextureLib_Texture `Name` is auto-initialized.","title":"Texture"},{"location":"Documentation/Utilities/Texture/#texture","text":"The Texture library is used to store and reference texture resources. It is mainly used to store UI textures used for Generic styles, via the Feature_GenericUITextures feature..","title":"Texture"},{"location":"Documentation/Utilities/Texture/#texturelib_texture-class","text":"@field Name string Resource name. @field GUID GUID","title":"TextureLib_Texture Class"},{"location":"Documentation/Utilities/Texture/#texturelib-class","text":"Inherits from Library .","title":"TextureLib Class"},{"location":"Documentation/Utilities/Texture/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Texture/#gettexture","text":"function TextureLib.GetTexture(name) -> TextureLib_Texture Returns a texture by name. @param name string","title":"GetTexture"},{"location":"Documentation/Utilities/Texture/#registertexture","text":"function TextureLib.RegisterTexture(name, data) -> TextureLib_Texture Registers a texture resource. @param name string @param data TextureLib_Texture `Name` is auto-initialized.","title":"RegisterTexture"},{"location":"Documentation/Utilities/Timer/","text":"Timer \u00b6 The Timer library implements timers, for running scripting with a delay. Since listeners for the timers ending can be registered in-line, they are usually cleaner to use than the Osiris timers. Additionally, they are available on the client. TimerLib Class \u00b6 Inherits from Feature . Events and Hooks \u00b6 TimerCompleted (event) \u00b6 @field Timer TimerLib_Entry Methods \u00b6 GetTimer \u00b6 function TimerLib.GetTimer(stringID) -> TimerLib_Entry Returns the timer with the passed string ID. @param stringID string Remove \u00b6 function TimerLib.Remove(timer) @param timer TimerLib_Entry Start \u00b6 function TimerLib.Start(id, seconds, handler, timerType) -> TimerLib_Entry|TimerLib_TickTimerEntry @param id string? @param seconds number @param handler fun(ev:TimerLib_Event_TimerCompleted) @param timerType (\"Normal\"|\"Tick\")? Defaults to `\"Normal\"` StartTickTimer \u00b6 function TimerLib.StartTickTimer(id, ticks, handler) -> TimerLib_TickTimerEntry @param id string? @param ticks number @param handler fun(ev:TimerLib_Event_TimerCompleted) __Test \u00b6 ---@protected function TimerLib:__Test()","title":"Timer"},{"location":"Documentation/Utilities/Timer/#timer","text":"The Timer library implements timers, for running scripting with a delay. Since listeners for the timers ending can be registered in-line, they are usually cleaner to use than the Osiris timers. Additionally, they are available on the client.","title":"Timer"},{"location":"Documentation/Utilities/Timer/#timerlib-class","text":"Inherits from Feature .","title":"TimerLib Class"},{"location":"Documentation/Utilities/Timer/#events-and-hooks","text":"","title":"Events and Hooks"},{"location":"Documentation/Utilities/Timer/#timercompleted-event","text":"@field Timer TimerLib_Entry","title":"TimerCompleted (event)"},{"location":"Documentation/Utilities/Timer/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Timer/#gettimer","text":"function TimerLib.GetTimer(stringID) -> TimerLib_Entry Returns the timer with the passed string ID. @param stringID string","title":"GetTimer"},{"location":"Documentation/Utilities/Timer/#remove","text":"function TimerLib.Remove(timer) @param timer TimerLib_Entry","title":"Remove"},{"location":"Documentation/Utilities/Timer/#start","text":"function TimerLib.Start(id, seconds, handler, timerType) -> TimerLib_Entry|TimerLib_TickTimerEntry @param id string? @param seconds number @param handler fun(ev:TimerLib_Event_TimerCompleted) @param timerType (\"Normal\"|\"Tick\")? Defaults to `\"Normal\"`","title":"Start"},{"location":"Documentation/Utilities/Timer/#startticktimer","text":"function TimerLib.StartTickTimer(id, ticks, handler) -> TimerLib_TickTimerEntry @param id string? @param ticks number @param handler fun(ev:TimerLib_Event_TimerCompleted)","title":"StartTickTimer"},{"location":"Documentation/Utilities/Timer/#__test","text":"---@protected function TimerLib:__Test()","title":"__Test"},{"location":"Documentation/Utilities/UserVars/","text":"UserVars \u00b6 The UserVars library contains wrapper methods for working with UserVars and ModVars. It allows fetching definitions of variables as well as their values. You may also define default values to return if a variable is unset on the component/modvar. UserVarsLib_UserVar Class \u00b6 @field ID string @field Client boolean @field Server boolean @field WriteableOnServer boolean Defaults to `true`. @field WriteableOnClient boolean Defaults to `false`. @field Persistent boolean @field SyncToClient boolean Defaults to `true`. @field SyncToServer boolean Defaults to `true`. @field SyncOnWrite boolean Defaults to `false`. @field SyncOnTick boolean Defaults to `true`. @field DontCache boolean Defaults to `false` @field DefaultValue any? UserVarsLib Class \u00b6 Inherits from Library . Methods \u00b6 GetModVarDefinition \u00b6 function UserVarsLib.GetModVarDefinition(modGUID, var) -> UserVarsLib_ModVar Returns the definition of a mod variable. @param modGUID GUID @param var string GetModVarValue \u00b6 function UserVarsLib.GetModVarValue(modGUID, varName) -> any? -- Defaults to `DefaultValue`. Returns the value of a mod var. @param modGUID GUID @param varName string GetModVariables \u00b6 function UserVarsLib.GetModVariables(modGUID) -> table Returns the mod variables of a mod. @param modGUID GUID GetUserVarDefinition \u00b6 function UserVarsLib.GetUserVarDefinition(varName) -> UserVarsLib_UserVar Returns the definition of a user variable. @param varName string GetUserVarValue \u00b6 function UserVarsLib.GetUserVarValue(component, varName) -> any? -- Defaults to `DefaultValue`. Returns the value of a user variable for an entity. @param component UserVarsLib_CompatibleComponent @param varName string RegisterModVariable \u00b6 function UserVarsLib.RegisterModVariable(modGUID, name, data) -> UserVarsLib_ModVar Registers a mod variable. @param modGUID GUID @param name string @param data UserVarsLib_ModVar? Defaults to default values (see class). RegisterUserVariable \u00b6 function UserVarsLib.RegisterUserVariable(name, data) -> UserVarsLib_UserVar Registers a user variable. Must be done once for each context where you want the variable to exist. @param name string @param data UserVarsLib_UserVar? Defaults to default values (see class).","title":"UserVars"},{"location":"Documentation/Utilities/UserVars/#uservars","text":"The UserVars library contains wrapper methods for working with UserVars and ModVars. It allows fetching definitions of variables as well as their values. You may also define default values to return if a variable is unset on the component/modvar.","title":"UserVars"},{"location":"Documentation/Utilities/UserVars/#uservarslib_uservar-class","text":"@field ID string @field Client boolean @field Server boolean @field WriteableOnServer boolean Defaults to `true`. @field WriteableOnClient boolean Defaults to `false`. @field Persistent boolean @field SyncToClient boolean Defaults to `true`. @field SyncToServer boolean Defaults to `true`. @field SyncOnWrite boolean Defaults to `false`. @field SyncOnTick boolean Defaults to `true`. @field DontCache boolean Defaults to `false` @field DefaultValue any?","title":"UserVarsLib_UserVar Class"},{"location":"Documentation/Utilities/UserVars/#uservarslib-class","text":"Inherits from Library .","title":"UserVarsLib Class"},{"location":"Documentation/Utilities/UserVars/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/UserVars/#getmodvardefinition","text":"function UserVarsLib.GetModVarDefinition(modGUID, var) -> UserVarsLib_ModVar Returns the definition of a mod variable. @param modGUID GUID @param var string","title":"GetModVarDefinition"},{"location":"Documentation/Utilities/UserVars/#getmodvarvalue","text":"function UserVarsLib.GetModVarValue(modGUID, varName) -> any? -- Defaults to `DefaultValue`. Returns the value of a mod var. @param modGUID GUID @param varName string","title":"GetModVarValue"},{"location":"Documentation/Utilities/UserVars/#getmodvariables","text":"function UserVarsLib.GetModVariables(modGUID) -> table Returns the mod variables of a mod. @param modGUID GUID","title":"GetModVariables"},{"location":"Documentation/Utilities/UserVars/#getuservardefinition","text":"function UserVarsLib.GetUserVarDefinition(varName) -> UserVarsLib_UserVar Returns the definition of a user variable. @param varName string","title":"GetUserVarDefinition"},{"location":"Documentation/Utilities/UserVars/#getuservarvalue","text":"function UserVarsLib.GetUserVarValue(component, varName) -> any? -- Defaults to `DefaultValue`. Returns the value of a user variable for an entity. @param component UserVarsLib_CompatibleComponent @param varName string","title":"GetUserVarValue"},{"location":"Documentation/Utilities/UserVars/#registermodvariable","text":"function UserVarsLib.RegisterModVariable(modGUID, name, data) -> UserVarsLib_ModVar Registers a mod variable. @param modGUID GUID @param name string @param data UserVarsLib_ModVar? Defaults to default values (see class).","title":"RegisterModVariable"},{"location":"Documentation/Utilities/UserVars/#registeruservariable","text":"function UserVarsLib.RegisterUserVariable(name, data) -> UserVarsLib_UserVar Registers a user variable. Must be done once for each context where you want the variable to exist. @param name string @param data UserVarsLib_UserVar? Defaults to default values (see class).","title":"RegisterUserVariable"},{"location":"Documentation/Utilities/Vector/","text":"Vector \u00b6 The Vector library offers a numeric vector data structure and methods to work with them. They are intended to be used as immutables. All methods and operators return a new instance of the output vector. Vector objects implement various operators; the binary ones only usable for vectors of the same arity: + : sum of components. - : subtraction of components. * : dot product. ^ : negation; inverts the sign of all components. Additionally, vector.Arity or vector.Length will return the amount of elements in the vector. In Epip, their primary use is semantic clarity for functions that require 2D coordinates as parameters. VectorLib Class \u00b6 Inherits from Library . Methods \u00b6 AreEqual \u00b6 function VectorLib.AreEqual(v1, v2) Returns whether 2 vectors are equal. Vectors are equal if they have the same arity and components. @param v1 Vector @param v2 Vector Clone \u00b6 function VectorLib.Clone(vector) -> Vector @param vector Vector Create \u00b6 function VectorLib.Create() -> Vector Creates a vector of variable length. DotProduct \u00b6 function VectorLib.DotProduct(v1, v2) -> number Performs a dot product between two vectors of the same dimensions. @param v1 Vector @param v2 Vector GetLength \u00b6 function VectorLib.GetLength(vector) -> number @param vector Vector GetNormalized \u00b6 function VectorLib.GetNormalized(vector) -> Vector New instance; does not mutate.-- instance; does not mutate. @param vector Vector Negate \u00b6 function VectorLib.Negate(v) -> Vector @param v Vector ScalarProduct \u00b6 function VectorLib.ScalarProduct(v, scalar) -> Vector Performs a scalar product of a vector, multiplying each of its components. @param v Vector @param scalar number Subtract \u00b6 function VectorLib.Subtract(v1, v2) -> Vector Subtracts the components of two vectors of the same dimension. @param v1 Vector @param v2 Vector Sum \u00b6 function VectorLib.Sum(v1, v2) -> Vector Sums the components of two vectors of the same dimensions. @param v1 Vector @param v2 Vector","title":"Vector"},{"location":"Documentation/Utilities/Vector/#vector","text":"The Vector library offers a numeric vector data structure and methods to work with them. They are intended to be used as immutables. All methods and operators return a new instance of the output vector. Vector objects implement various operators; the binary ones only usable for vectors of the same arity: + : sum of components. - : subtraction of components. * : dot product. ^ : negation; inverts the sign of all components. Additionally, vector.Arity or vector.Length will return the amount of elements in the vector. In Epip, their primary use is semantic clarity for functions that require 2D coordinates as parameters.","title":"Vector"},{"location":"Documentation/Utilities/Vector/#vectorlib-class","text":"Inherits from Library .","title":"VectorLib Class"},{"location":"Documentation/Utilities/Vector/#methods","text":"","title":"Methods"},{"location":"Documentation/Utilities/Vector/#areequal","text":"function VectorLib.AreEqual(v1, v2) Returns whether 2 vectors are equal. Vectors are equal if they have the same arity and components. @param v1 Vector @param v2 Vector","title":"AreEqual"},{"location":"Documentation/Utilities/Vector/#clone","text":"function VectorLib.Clone(vector) -> Vector @param vector Vector","title":"Clone"},{"location":"Documentation/Utilities/Vector/#create","text":"function VectorLib.Create() -> Vector Creates a vector of variable length.","title":"Create"},{"location":"Documentation/Utilities/Vector/#dotproduct","text":"function VectorLib.DotProduct(v1, v2) -> number Performs a dot product between two vectors of the same dimensions. @param v1 Vector @param v2 Vector","title":"DotProduct"},{"location":"Documentation/Utilities/Vector/#getlength","text":"function VectorLib.GetLength(vector) -> number @param vector Vector","title":"GetLength"},{"location":"Documentation/Utilities/Vector/#getnormalized","text":"function VectorLib.GetNormalized(vector) -> Vector New instance; does not mutate.-- instance; does not mutate. @param vector Vector","title":"GetNormalized"},{"location":"Documentation/Utilities/Vector/#negate","text":"function VectorLib.Negate(v) -> Vector @param v Vector","title":"Negate"},{"location":"Documentation/Utilities/Vector/#scalarproduct","text":"function VectorLib.ScalarProduct(v, scalar) -> Vector Performs a scalar product of a vector, multiplying each of its components. @param v Vector @param scalar number","title":"ScalarProduct"},{"location":"Documentation/Utilities/Vector/#subtract","text":"function VectorLib.Subtract(v1, v2) -> Vector Subtracts the components of two vectors of the same dimension. @param v1 Vector @param v2 Vector","title":"Subtract"},{"location":"Documentation/Utilities/Vector/#sum","text":"function VectorLib.Sum(v1, v2) -> Vector Sums the components of two vectors of the same dimensions. @param v1 Vector @param v2 Vector","title":"Sum"},{"location":"Epip/","text":"Epip \u00b6 The Epip table stores Features and metadata related to the mod. (documentation pending)","title":"Epip"},{"location":"Epip/#epip","text":"The Epip table stores Features and metadata related to the mod. (documentation pending)","title":"Epip"},{"location":"Epip/EpicEnemies/","text":"Epic Enemies \u00b6 Epic Enemies is a randomizer feature that gives enemies in combat random keyword effects, artifacts and other boons. It is accessed from its own settings tab in the settings menu. Creating Effects \u00b6 An Effect is a perk that an enemy can roll if Epic Enemies is enabled. Effects can belong to a category; each category gets their own settings sliders for all its effects in the UI. If you wish to add effects, you should register your own category for them with RegisterEffectCategory() . You may define the effects while defining the category (of type EpicEnemiesEffect ), and they will be automatically registered as well. Registering effects directly with RegisterEffect() does not bind them to any category by default, meaning they will not appear in the UI and will not be customizable - this is great if you wish to create auxiliary effects with 0 weight and script their applications yourself. Effects can be rolled on a character with InitializeCharacter() . By default, this happens when they enter combat, and numerous characters are excluded: players, summons, and already initialized characters. You may tag characters with PIP_EpicEnemies_Ineligible to exclude them as well. Effects from a character can be removed with CleanupCharacter() ; this will cause their stat boosts, Special Logic, and other perks from their effects to be cleaned up as well. By default, this only happens when lua is reset (for debugging). When InitializeCharacter() is called, effects are rolled randomly based on their weight and eligibility . You may hook IsEffectApplicable to control which effects a character can receive. The EpicEnemiesEffectTemplates feature script does so to prevent keyword mutators from being granted to characters that do not possess an activator effect. The EpicEnemiesEffectTemplates feature script also implements multiple types of effects that power generic functionality: SpecialLogic Artifacts Summons Statuses ExtendedStats FlexStats RequiredSkills This is done by extending the the EpicEnemiesEffect class into EpicEnemiesExtendedEffect - you need only to add its extra fields to your effect definitions, and the event listeners from that script will take care of making them work. Of course, you may also add functionality yourself the same way, as detailed in the next section. Scripting Effects \u00b6 Effects can be in 2 states: applied and activated. \"Applied\" means the character has the effect, but its benefits are dormant and not yet active. \"Activated\" effects grant their benefits (stats, Special Logic, etc.). The condition for effects is based on the ActivationCondition field. If unspecified, it defaults to the \"EffectApplied\" type, which causes the effect to be activated as soon as it is applied (during initialization). If you specify a custom ActivationCondition , you will have to activate the effect's perks manually. The EpicEnemiesEffectConditions feature script implements some custom ActivationConditions: TurnStart : effect activates at the start of X turn, optionally repeating (effects support multiple activations). HealthThreshold : effect activates when beneath a Vitality/Armor threshold. BatteredHarried : effect activates upon reaching X B/H. StatusGained : effect activates upon gaining a certain status. Activation attempts are done through the ActivateEffects() call, which takes an ActivationCondition type (the string ID) as well as some params (for example, activation attemps of BatteredHarried pass the B/H stack count). This call in turn invokes the CanActivateEffect hook where scripts must judge if the parameters of the activation attempt are correct to activate each of the effects with that ActivationCondition. Example of how TurnStart works: A PROC_AMER_Combat_TurnStarted listener calls ActivateEffects(char, \"TurnStart\", {Round = round}) The EpicEnemies main script invokes the CanActivateEffect hook for each effect with the corresponding ActivationCondition type, as well as the params from the ActivateEffects() call. A listener of said hook checks if the activation condition type is \"TurnStart\", and if it is, returns a boolean indicating if the params received match the conditions defined in the effect. For example, the following effect activates on turn 2, meaning the enemy only becomes hasted on turn 2, since the listeners that manage the TurnStart activation condition compare Round and Repeat with the parameters from the activation attempt. The effect is however always visible in the tooltip, along with its activation condition, so players can plan around it. { Name = \"TurnStart Activation Test\", ID = \"TestStatus2\", Description = \"Hasted on turn 2.\", Status = { StatusID = \"HASTED\", Duration = 2, }, ActivationCondition = { Type = \"TurnStart\", Round = 2, Repeat = false, }, }, Events/Hooks \u00b6 ---@hook GetActivationConditionDescription ---@field RegisterHook fun(self, handler:fun(text:string, condition:EpicEnemiesActivationCondition, char:EclCharacter)) ---@field Return fun(self, text:string, condition:EpicEnemiesActivationCondition, char:EclCharacter) ---@event EffectApplied ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@event EffectRemoved ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@hook IsEligible ---@field RegisterHook fun(self, handler:fun(eligible:boolean, char:EsvCharacter)) ---@field Return fun(self, eligible:boolean, char:EsvCharacter) ---@hook IsEffectApplicable ---@field RegisterHook fun(self, handler:fun(applicable:boolean, effect:EpicEnemiesEffect, char:EsvCharacter, activeEffects:EpicEnemiesEffect[])) ---@field Return fun(self, applicable:boolean, effect:EpicEnemiesEffect, char:EsvCharacter, activeEffects:EpicEnemiesEffect[]) ---@event EffectActivated ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@event EffectDeactivated ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@hook CanActivateEffect ---@field RegisterHook fun(self, handler:fun(activate:boolean, char:EsvCharacter, effect:EpicEnemiesEffect, params:any)) ---@field Return fun(self, activate:boolean, char:EsvCharacter, effect:EpicEnemiesEffect, params:any) ---@hook GetPointsForCharacter ---@field RegisterHook fun(self, handler:fun(points:integer, char:EsvCharacter)) ---@field Return fun(self, points:integer, char:EsvCharacter) ---@event CharacterInitialized ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effects:EpicEnemiesEffect[])) ---@field Fire fun(self, char:EsvCharacter, effects:EpicEnemiesEffect[]) ---@event CharacterCleanedUp ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter)) ---@field Fire fun(self, char:EsvCharacter) Methods \u00b6 function EpicEnemies.IsInitialized(char) ---@param char EsvCharacter function EpicEnemies.InitializeCharacter(char) ---Remove all effects from a character. ---@param char EsvCharacter function EpicEnemies.CleanupCharacter(char) ---Returns true if the character is eligible to receive Epic Enemies effects. ---@param char EsvCharacter function EpicEnemies.IsEligible(char) ---@param char EsvCharacter ---@param effect EpicEnemiesEffect function EpicEnemies.ApplyEffect(char, effect) ---@param char EsvCharacter ---@param effect EpicEnemiesEffect function EpicEnemies.ActivateEffect(char, effect) ---@param char EsvCharacter ---@param predicate fun(char:EsvCharacter, effect:EpicEnemiesEffect)? ---@return table<string, EpicEnemiesEffect> function EpicEnemies.GetAppliedEffects(char, predicate) ---@param char EsvCharacter ---@param effect EpicEnemiesCharacter ---@return boolean function EpicEnemies.EffectIsActive(char, effect) ---@param char EsvCharacter ---@param effect EpicEnemiesCharacter ---@return integer function EpicEnemies.GetEffectActivationCount(char, effect) ---@param char EsvCharacter ---@param effectType string ---@param params table? function EpicEnemies.ActivateEffects(char, effectType, params) ---@param char EsvCharacter ---@param effect EpicEnemiesEffect ---@param charges integer? Defaults to 1. function EpicEnemies.DeactivateEffect(char, effect, charges) ---Remove an effect from a character. ---@param char EsvCharacter ---@param effectID string function EpicEnemies.RemoveEffect(char, effectID) ---@param char EsvCharacter ---@param effectPool table<string, EpicEnemiesEffect> ---@param activeEffects? EpicEnemiesEffect[] function EpicEnemies.GetRandomEffect(char, effectPool, activeEffects) ---@param char EsvCharacter function EpicEnemies.GetPointsForCharacter(char) ---Get the cost of an effect. function _EpicEnemiesEffect:GetCost() function _EpicEnemiesEffect:GetWeight() ---@param char Character|GUID function EpicEnemies.IsInitialized(char) ---@param id string ---@return EpicEnemiesEffect function EpicEnemies.GetEffectData(id) ---@param category EpicEnemiesEffectsCategory function EpicEnemies.RegisterEffectCategory(category) ---@param id string ---@param effect EpicEnemiesEffect function EpicEnemies.RegisterEffect(id, effect) ---@param effect EpicEnemiesEffect function EpicEnemies.GenerateOptionData(effect) Objects \u00b6 ---@class EpicEnemiesActivationCondition ---@field Type string ---@field MaxActivations integer ---@class EpicEnemiesEffect ---@field ID string ---@field Name string ---@field Description string ---@field Cost integer ---@field Weight integer ---@field DefaultWeight integer ---@field DefaultCost integer ---@field ActivationCondition EpicEnemiesActivationCondition ---@field Category string? ---@field Visible boolean? Whether this effect appears in tooltips. Defaults to true. ---@class EpicEnemiesKeywordData ---@field Keyword Keyword ---@field BoonType KeywordBoonType ---@class EpicEnemiesEffectsCategory ---@field Name string ---@field ID string ---@field Effects string[]|EpicEnemiesEffect[] Can be an array of EpicEnemiesEffect while calling the register method. Will be turned into an ID array afterwards. The scripts that implement the basic effect functionality define the following objects: ---@class EpicEnemiesExtendedEffect : EpicEnemiesEffect ---@field SpecialLogic? string Special logic to grant when the effect is rolled. ---@field Artifact? string Artifact power to grant when the effect is rolled. ---@field Keyword? EpicEnemiesKeywordData Used for activation conditions; certain keyword mutators will not be granted if the target has no activators of the keyword. ---@field Summon? GUID Template to summon. ---@field Status? EpicEnemiesStatus[] ---@field ExtendedStats? EpicEnemiesExtendedStat[] ---@field FlexStats? EpicEnemiesFlexStat[] ---@field RequiredSkills? string[] The effect is ineligible if the character does not have any of the required skills. ---@class EpicEnemiesStatus ---@field StatusID string ---@field Duration integer ---@class EpicEnemiesFlexStat ---@field Type string ---@field Stat string ---@field Amount number ---@class EpicEnemiesExtendedStat ---@field StatID string The ID of the ExtendedStat. ---@field Amount number ---@field Property1 string? ---@field Property2 string? ---@field Property3 string? ---@class EpicEnemiesCondition_TurnStart : EpicEnemiesActivationCondition ---@field Round integer Which round to activate the effect on. ---@field Repeat boolean Whether to re-activate the effect on subsequent rounds as well. ---@field RepeatFrequency uint64? How many turns must pass between re-activations if Repeat is true. Defaults to 1. ---@class EpicEnemiesCondition_HealthThreshold : EpicEnemiesActivationCondition ---@field Vitality number From 0-1. Use 0 to ignore this health metric. ---@field PhysicalArmor number From 0-1. Use 0 to ignore this health metric. ---@field MagicArmor number From 0-1. Use 0 to ignore this health metric. ---@field RequireAll boolean If true, all thresholds must be met for the activation. ---@class EpicEnemiesCondition_BatteredHarried : EpicEnemiesActivationCondition ---@field StackType StackType ---@field Amount integer ---@class EpicEnemiesCondition_StatusGained : EpicEnemiesActivationCondition ---@field StatusID string","title":"EpicEnemies"},{"location":"Epip/EpicEnemies/#epic-enemies","text":"Epic Enemies is a randomizer feature that gives enemies in combat random keyword effects, artifacts and other boons. It is accessed from its own settings tab in the settings menu.","title":"Epic Enemies"},{"location":"Epip/EpicEnemies/#creating-effects","text":"An Effect is a perk that an enemy can roll if Epic Enemies is enabled. Effects can belong to a category; each category gets their own settings sliders for all its effects in the UI. If you wish to add effects, you should register your own category for them with RegisterEffectCategory() . You may define the effects while defining the category (of type EpicEnemiesEffect ), and they will be automatically registered as well. Registering effects directly with RegisterEffect() does not bind them to any category by default, meaning they will not appear in the UI and will not be customizable - this is great if you wish to create auxiliary effects with 0 weight and script their applications yourself. Effects can be rolled on a character with InitializeCharacter() . By default, this happens when they enter combat, and numerous characters are excluded: players, summons, and already initialized characters. You may tag characters with PIP_EpicEnemies_Ineligible to exclude them as well. Effects from a character can be removed with CleanupCharacter() ; this will cause their stat boosts, Special Logic, and other perks from their effects to be cleaned up as well. By default, this only happens when lua is reset (for debugging). When InitializeCharacter() is called, effects are rolled randomly based on their weight and eligibility . You may hook IsEffectApplicable to control which effects a character can receive. The EpicEnemiesEffectTemplates feature script does so to prevent keyword mutators from being granted to characters that do not possess an activator effect. The EpicEnemiesEffectTemplates feature script also implements multiple types of effects that power generic functionality: SpecialLogic Artifacts Summons Statuses ExtendedStats FlexStats RequiredSkills This is done by extending the the EpicEnemiesEffect class into EpicEnemiesExtendedEffect - you need only to add its extra fields to your effect definitions, and the event listeners from that script will take care of making them work. Of course, you may also add functionality yourself the same way, as detailed in the next section.","title":"Creating Effects"},{"location":"Epip/EpicEnemies/#scripting-effects","text":"Effects can be in 2 states: applied and activated. \"Applied\" means the character has the effect, but its benefits are dormant and not yet active. \"Activated\" effects grant their benefits (stats, Special Logic, etc.). The condition for effects is based on the ActivationCondition field. If unspecified, it defaults to the \"EffectApplied\" type, which causes the effect to be activated as soon as it is applied (during initialization). If you specify a custom ActivationCondition , you will have to activate the effect's perks manually. The EpicEnemiesEffectConditions feature script implements some custom ActivationConditions: TurnStart : effect activates at the start of X turn, optionally repeating (effects support multiple activations). HealthThreshold : effect activates when beneath a Vitality/Armor threshold. BatteredHarried : effect activates upon reaching X B/H. StatusGained : effect activates upon gaining a certain status. Activation attempts are done through the ActivateEffects() call, which takes an ActivationCondition type (the string ID) as well as some params (for example, activation attemps of BatteredHarried pass the B/H stack count). This call in turn invokes the CanActivateEffect hook where scripts must judge if the parameters of the activation attempt are correct to activate each of the effects with that ActivationCondition. Example of how TurnStart works: A PROC_AMER_Combat_TurnStarted listener calls ActivateEffects(char, \"TurnStart\", {Round = round}) The EpicEnemies main script invokes the CanActivateEffect hook for each effect with the corresponding ActivationCondition type, as well as the params from the ActivateEffects() call. A listener of said hook checks if the activation condition type is \"TurnStart\", and if it is, returns a boolean indicating if the params received match the conditions defined in the effect. For example, the following effect activates on turn 2, meaning the enemy only becomes hasted on turn 2, since the listeners that manage the TurnStart activation condition compare Round and Repeat with the parameters from the activation attempt. The effect is however always visible in the tooltip, along with its activation condition, so players can plan around it. { Name = \"TurnStart Activation Test\", ID = \"TestStatus2\", Description = \"Hasted on turn 2.\", Status = { StatusID = \"HASTED\", Duration = 2, }, ActivationCondition = { Type = \"TurnStart\", Round = 2, Repeat = false, }, },","title":"Scripting Effects"},{"location":"Epip/EpicEnemies/#eventshooks","text":"---@hook GetActivationConditionDescription ---@field RegisterHook fun(self, handler:fun(text:string, condition:EpicEnemiesActivationCondition, char:EclCharacter)) ---@field Return fun(self, text:string, condition:EpicEnemiesActivationCondition, char:EclCharacter) ---@event EffectApplied ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@event EffectRemoved ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@hook IsEligible ---@field RegisterHook fun(self, handler:fun(eligible:boolean, char:EsvCharacter)) ---@field Return fun(self, eligible:boolean, char:EsvCharacter) ---@hook IsEffectApplicable ---@field RegisterHook fun(self, handler:fun(applicable:boolean, effect:EpicEnemiesEffect, char:EsvCharacter, activeEffects:EpicEnemiesEffect[])) ---@field Return fun(self, applicable:boolean, effect:EpicEnemiesEffect, char:EsvCharacter, activeEffects:EpicEnemiesEffect[]) ---@event EffectActivated ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@event EffectDeactivated ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effect:EpicEnemiesEffect)) ---@field Fire fun(self, char:EsvCharacter, effect:EpicEnemiesEffect) ---@hook CanActivateEffect ---@field RegisterHook fun(self, handler:fun(activate:boolean, char:EsvCharacter, effect:EpicEnemiesEffect, params:any)) ---@field Return fun(self, activate:boolean, char:EsvCharacter, effect:EpicEnemiesEffect, params:any) ---@hook GetPointsForCharacter ---@field RegisterHook fun(self, handler:fun(points:integer, char:EsvCharacter)) ---@field Return fun(self, points:integer, char:EsvCharacter) ---@event CharacterInitialized ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter, effects:EpicEnemiesEffect[])) ---@field Fire fun(self, char:EsvCharacter, effects:EpicEnemiesEffect[]) ---@event CharacterCleanedUp ---@field RegisterListener fun(self, listener:fun(char:EsvCharacter)) ---@field Fire fun(self, char:EsvCharacter)","title":"Events/Hooks"},{"location":"Epip/EpicEnemies/#methods","text":"function EpicEnemies.IsInitialized(char) ---@param char EsvCharacter function EpicEnemies.InitializeCharacter(char) ---Remove all effects from a character. ---@param char EsvCharacter function EpicEnemies.CleanupCharacter(char) ---Returns true if the character is eligible to receive Epic Enemies effects. ---@param char EsvCharacter function EpicEnemies.IsEligible(char) ---@param char EsvCharacter ---@param effect EpicEnemiesEffect function EpicEnemies.ApplyEffect(char, effect) ---@param char EsvCharacter ---@param effect EpicEnemiesEffect function EpicEnemies.ActivateEffect(char, effect) ---@param char EsvCharacter ---@param predicate fun(char:EsvCharacter, effect:EpicEnemiesEffect)? ---@return table<string, EpicEnemiesEffect> function EpicEnemies.GetAppliedEffects(char, predicate) ---@param char EsvCharacter ---@param effect EpicEnemiesCharacter ---@return boolean function EpicEnemies.EffectIsActive(char, effect) ---@param char EsvCharacter ---@param effect EpicEnemiesCharacter ---@return integer function EpicEnemies.GetEffectActivationCount(char, effect) ---@param char EsvCharacter ---@param effectType string ---@param params table? function EpicEnemies.ActivateEffects(char, effectType, params) ---@param char EsvCharacter ---@param effect EpicEnemiesEffect ---@param charges integer? Defaults to 1. function EpicEnemies.DeactivateEffect(char, effect, charges) ---Remove an effect from a character. ---@param char EsvCharacter ---@param effectID string function EpicEnemies.RemoveEffect(char, effectID) ---@param char EsvCharacter ---@param effectPool table<string, EpicEnemiesEffect> ---@param activeEffects? EpicEnemiesEffect[] function EpicEnemies.GetRandomEffect(char, effectPool, activeEffects) ---@param char EsvCharacter function EpicEnemies.GetPointsForCharacter(char) ---Get the cost of an effect. function _EpicEnemiesEffect:GetCost() function _EpicEnemiesEffect:GetWeight() ---@param char Character|GUID function EpicEnemies.IsInitialized(char) ---@param id string ---@return EpicEnemiesEffect function EpicEnemies.GetEffectData(id) ---@param category EpicEnemiesEffectsCategory function EpicEnemies.RegisterEffectCategory(category) ---@param id string ---@param effect EpicEnemiesEffect function EpicEnemies.RegisterEffect(id, effect) ---@param effect EpicEnemiesEffect function EpicEnemies.GenerateOptionData(effect)","title":"Methods"},{"location":"Epip/EpicEnemies/#objects","text":"---@class EpicEnemiesActivationCondition ---@field Type string ---@field MaxActivations integer ---@class EpicEnemiesEffect ---@field ID string ---@field Name string ---@field Description string ---@field Cost integer ---@field Weight integer ---@field DefaultWeight integer ---@field DefaultCost integer ---@field ActivationCondition EpicEnemiesActivationCondition ---@field Category string? ---@field Visible boolean? Whether this effect appears in tooltips. Defaults to true. ---@class EpicEnemiesKeywordData ---@field Keyword Keyword ---@field BoonType KeywordBoonType ---@class EpicEnemiesEffectsCategory ---@field Name string ---@field ID string ---@field Effects string[]|EpicEnemiesEffect[] Can be an array of EpicEnemiesEffect while calling the register method. Will be turned into an ID array afterwards. The scripts that implement the basic effect functionality define the following objects: ---@class EpicEnemiesExtendedEffect : EpicEnemiesEffect ---@field SpecialLogic? string Special logic to grant when the effect is rolled. ---@field Artifact? string Artifact power to grant when the effect is rolled. ---@field Keyword? EpicEnemiesKeywordData Used for activation conditions; certain keyword mutators will not be granted if the target has no activators of the keyword. ---@field Summon? GUID Template to summon. ---@field Status? EpicEnemiesStatus[] ---@field ExtendedStats? EpicEnemiesExtendedStat[] ---@field FlexStats? EpicEnemiesFlexStat[] ---@field RequiredSkills? string[] The effect is ineligible if the character does not have any of the required skills. ---@class EpicEnemiesStatus ---@field StatusID string ---@field Duration integer ---@class EpicEnemiesFlexStat ---@field Type string ---@field Stat string ---@field Amount number ---@class EpicEnemiesExtendedStat ---@field StatID string The ID of the ExtendedStat. ---@field Amount number ---@field Property1 string? ---@field Property2 string? ---@field Property3 string? ---@class EpicEnemiesCondition_TurnStart : EpicEnemiesActivationCondition ---@field Round integer Which round to activate the effect on. ---@field Repeat boolean Whether to re-activate the effect on subsequent rounds as well. ---@field RepeatFrequency uint64? How many turns must pass between re-activations if Repeat is true. Defaults to 1. ---@class EpicEnemiesCondition_HealthThreshold : EpicEnemiesActivationCondition ---@field Vitality number From 0-1. Use 0 to ignore this health metric. ---@field PhysicalArmor number From 0-1. Use 0 to ignore this health metric. ---@field MagicArmor number From 0-1. Use 0 to ignore this health metric. ---@field RequireAll boolean If true, all thresholds must be met for the activation. ---@class EpicEnemiesCondition_BatteredHarried : EpicEnemiesActivationCondition ---@field StackType StackType ---@field Amount integer ---@class EpicEnemiesCondition_StatusGained : EpicEnemiesActivationCondition ---@field StatusID string","title":"Objects"},{"location":"Epip/StatsTab/","text":"StatsTab \u00b6 Epip.Features.StatsTab implements collapsable categories for the Character Sheet stats tab, as well as Ascension node stats, server-side value calculations and synching, and all stats present in the mod by default. Is this decoupling overengineered? Possibly, but it's a good showcase of how easily extensible systems can be if you stuff them with events. TODO document the rest of the system - Only Shared.lua is here atm. Creating Stats \u00b6 There's 3 steps to creating a stat. Steps 1 and 2 have to be done on both contexts. Define the stat; it's name, tooltip, how it displays, etc. Put it into a category (or create one for it) Set/update it's value when requested, through RegisterStatValueHook You can define a stat with RegisterStat(id: string, data: EpipStat) . The structure of a stat is the following: StatsTab.RegisterStat(\"RegenLifeCalculated\", { Name = \"Missing Life Regen\", Description = \"Restores a percentage of your missing Vitality at the start of your turn.\", Footnote = \"Missing Regeneration is capped at 50%.\", Suffix = \"%\", }) Next, you need to append it into a category with AddStatToCategory(statID: string, categoryID: string, index?: integer) . You can omit index and it will be placed at the bottom. StatsTab.AddStatToCategory(\"RegenLifeCalculated\", \"Vitals\") Finally, you need to register a hook to update the stat's value. This can be done in 2 ways: on client or on server (do not do both). If the stat's value can be queried from the client context, you only need a simple hook on the client: StatsTab.RegisterStatValueHook(\"PartyFunds_Gold\", function(value, data, char) return Game.Items.GetPartyTemplateCount(\"LOOT_Gold_A_1c3c9c74-34a1-4685-989e-410dc080be6f\") end) For stats that require info from the server, there is a special system in place that synchronizes stat values with tags. To set a stat's value from the server context, you need to use a different event (note it's not a hook, you must call UpdateTaggedStat yourself). On the client, the stat's value will be queried automatically from such tag if it is set; the advantage here being that there is no need to request stats from the server every time the tab is opened. StatsTab.RegisterStatUpdateListener(\"Keyword_VitalityVoid_Power\", function(char, data) Osi.QRY_AMER_KeywordStat_VitalityVoid_GetPower(char.MyGuid, 1) local value = Osi.DB_AMER_KeywordStat_OUTPUT_Real:Get(nil)[1][1] * 100 EpipStats.UpdateTaggedStat(char, \"Keyword_VitalityVoid_Power\", value) end) Creating Ascension Node Stats \u00b6 Stats related to Ascension nodes are automatically updated if their ID follows a specific format. All you need to do is define one; no further event listeners required. It will also be automatically put into the relevant keyword's category. You can create such stat with StatsTab.AddNodeStat(clusterId: string, nodeIndex: number, nodeSubIndex: number, keyword: Keyword, keywordType: KeywordBoonType, statData: EpipStat) . StatData is the stat definition, like with a normal stat. The indexes are 0-based. ClusterId is the ID of the Aspect, ex. Force_TheFalcon . There's just one small catch: owned nodes are only tracked if there's a stat defined for them. When you add stats in an update, you should call StatsTab.RecalculateNodeStats() on the server during the patch routine. You can also call NRD_ModCall(\"EpipEncounters\", \"PerformFullStatsUpdate\"); from Osiris, but this will be removed in the future. Creating Categories \u00b6 A category holds stats, and can be collapsed in the menu. Stats only render if they're within a category that is open. They can be added with RegisterCategory(id: string, data: EpipStatCategory, index?: integer) . See the EpipStatCategory struct. StatsTab.RegisterCategory(\"Vitals\", { Header = \"<font size='21'>\u2014\u2014\u2014\u2014\u2014 Vitals \u2014\u2014\u2014\u2014\u2014</font>\", Name = \"Vitals\", Behaviour = \"GreyOut\", Stats = { \"RegenLifeCalculated\", \"RegenPhysicalArmorCalculated\", \"RegenMagicArmorCalculated\", \"LifeSteal\", }, }) Modifying Stats \u00b6 Stat definitions are stored in StatsTab.STATS . You may screw with them at any time. Categories are in CATEGORIES instead, and their rendering order is defined in CATEGORIES_ORDER . Methods \u00b6 ---Registers a stat bound to an Ascension node. ---@param clusterId string ---@param nodeIndex number ---@param nodeSubIndex number ---@param keyword Keyword ---@param keywordType KeywordBoonType ---@param statData EpipStat Stat metadata. function EpipStats.AddNodeStat(clusterId, nodeIndex, nodeSubIndex, keyword, keywordType, statData) --RequireBothContexts ---Register a stat. ---@param id string ---@param data EpipStat function EpipStats.RegisterStat(id, data) --RequireBothContexts ---Register a category. ---@param id string ---@param data EpipStatCategory ---@param index? integer Order in the stats tab relative to other categories. function EpipStats.RegisterCategory(id, data, index) --RequireBothContexts ---Add a stat to a category. ---@param statID string ---@param categoryID string ---@param index? integer function EpipStats.AddStatToCategory(statID, categoryID, index) --RequireBothContexts Objects \u00b6 ---@class EpipStats ---@field CATEGORIES table<string, EpipStatCategory> Category definitions. ---@field CATEGORIES_ORDER string[] ---@field STATS table<string, EpipStat> ---@field MISSING_REGEN_CAP number TODO move ---@field STAT_VALUE_TAG string Pattern for stat tags. ---@field STAT_VALUE_TAG_PREFIX string ---@field TOOLTIP_TALENT number TODO remove ---@field TOOLTIP_TALENT_NAME string TODO remove ---@class EpipStat ---@field Name string ---@field Description string Fallback description in case a formatted Tooltip isn't set. ---@field Tooltip TooltipData ---@field Footnote string Italic text after description, in new paragraph. ---@field Suffix string Suffix for value display. ---@field Prefix string Prefix for value display. ---@field Boolean boolean Boolean stats show no value label. ---@field MaxCharges string If specified, this stat will display as \"{Value}/{Value of MaxCharges stat}\" ---@field IgnoreForHiding boolean If true, this stat will not be considered as added when determining if a Hidden category should display. ---@class EpipStatCategory ---@field Header string Name of the collapsable stat. ---@field Name string Name of the category in the tooltip. ---@field Behaviour EpipStatCategoryBehaviour Controls how default-value stats are shown. GreyOut greys out their label and value, hidden hides them - and the whole category - if no stats are owned. ---@field Stats string[] Stats displayed in the category, ordered.","title":"StatsTab"},{"location":"Epip/StatsTab/#statstab","text":"Epip.Features.StatsTab implements collapsable categories for the Character Sheet stats tab, as well as Ascension node stats, server-side value calculations and synching, and all stats present in the mod by default. Is this decoupling overengineered? Possibly, but it's a good showcase of how easily extensible systems can be if you stuff them with events. TODO document the rest of the system - Only Shared.lua is here atm.","title":"StatsTab"},{"location":"Epip/StatsTab/#creating-stats","text":"There's 3 steps to creating a stat. Steps 1 and 2 have to be done on both contexts. Define the stat; it's name, tooltip, how it displays, etc. Put it into a category (or create one for it) Set/update it's value when requested, through RegisterStatValueHook You can define a stat with RegisterStat(id: string, data: EpipStat) . The structure of a stat is the following: StatsTab.RegisterStat(\"RegenLifeCalculated\", { Name = \"Missing Life Regen\", Description = \"Restores a percentage of your missing Vitality at the start of your turn.\", Footnote = \"Missing Regeneration is capped at 50%.\", Suffix = \"%\", }) Next, you need to append it into a category with AddStatToCategory(statID: string, categoryID: string, index?: integer) . You can omit index and it will be placed at the bottom. StatsTab.AddStatToCategory(\"RegenLifeCalculated\", \"Vitals\") Finally, you need to register a hook to update the stat's value. This can be done in 2 ways: on client or on server (do not do both). If the stat's value can be queried from the client context, you only need a simple hook on the client: StatsTab.RegisterStatValueHook(\"PartyFunds_Gold\", function(value, data, char) return Game.Items.GetPartyTemplateCount(\"LOOT_Gold_A_1c3c9c74-34a1-4685-989e-410dc080be6f\") end) For stats that require info from the server, there is a special system in place that synchronizes stat values with tags. To set a stat's value from the server context, you need to use a different event (note it's not a hook, you must call UpdateTaggedStat yourself). On the client, the stat's value will be queried automatically from such tag if it is set; the advantage here being that there is no need to request stats from the server every time the tab is opened. StatsTab.RegisterStatUpdateListener(\"Keyword_VitalityVoid_Power\", function(char, data) Osi.QRY_AMER_KeywordStat_VitalityVoid_GetPower(char.MyGuid, 1) local value = Osi.DB_AMER_KeywordStat_OUTPUT_Real:Get(nil)[1][1] * 100 EpipStats.UpdateTaggedStat(char, \"Keyword_VitalityVoid_Power\", value) end)","title":"Creating Stats"},{"location":"Epip/StatsTab/#creating-ascension-node-stats","text":"Stats related to Ascension nodes are automatically updated if their ID follows a specific format. All you need to do is define one; no further event listeners required. It will also be automatically put into the relevant keyword's category. You can create such stat with StatsTab.AddNodeStat(clusterId: string, nodeIndex: number, nodeSubIndex: number, keyword: Keyword, keywordType: KeywordBoonType, statData: EpipStat) . StatData is the stat definition, like with a normal stat. The indexes are 0-based. ClusterId is the ID of the Aspect, ex. Force_TheFalcon . There's just one small catch: owned nodes are only tracked if there's a stat defined for them. When you add stats in an update, you should call StatsTab.RecalculateNodeStats() on the server during the patch routine. You can also call NRD_ModCall(\"EpipEncounters\", \"PerformFullStatsUpdate\"); from Osiris, but this will be removed in the future.","title":"Creating Ascension Node Stats"},{"location":"Epip/StatsTab/#creating-categories","text":"A category holds stats, and can be collapsed in the menu. Stats only render if they're within a category that is open. They can be added with RegisterCategory(id: string, data: EpipStatCategory, index?: integer) . See the EpipStatCategory struct. StatsTab.RegisterCategory(\"Vitals\", { Header = \"<font size='21'>\u2014\u2014\u2014\u2014\u2014 Vitals \u2014\u2014\u2014\u2014\u2014</font>\", Name = \"Vitals\", Behaviour = \"GreyOut\", Stats = { \"RegenLifeCalculated\", \"RegenPhysicalArmorCalculated\", \"RegenMagicArmorCalculated\", \"LifeSteal\", }, })","title":"Creating Categories"},{"location":"Epip/StatsTab/#modifying-stats","text":"Stat definitions are stored in StatsTab.STATS . You may screw with them at any time. Categories are in CATEGORIES instead, and their rendering order is defined in CATEGORIES_ORDER .","title":"Modifying Stats"},{"location":"Epip/StatsTab/#methods","text":"---Registers a stat bound to an Ascension node. ---@param clusterId string ---@param nodeIndex number ---@param nodeSubIndex number ---@param keyword Keyword ---@param keywordType KeywordBoonType ---@param statData EpipStat Stat metadata. function EpipStats.AddNodeStat(clusterId, nodeIndex, nodeSubIndex, keyword, keywordType, statData) --RequireBothContexts ---Register a stat. ---@param id string ---@param data EpipStat function EpipStats.RegisterStat(id, data) --RequireBothContexts ---Register a category. ---@param id string ---@param data EpipStatCategory ---@param index? integer Order in the stats tab relative to other categories. function EpipStats.RegisterCategory(id, data, index) --RequireBothContexts ---Add a stat to a category. ---@param statID string ---@param categoryID string ---@param index? integer function EpipStats.AddStatToCategory(statID, categoryID, index) --RequireBothContexts","title":"Methods"},{"location":"Epip/StatsTab/#objects","text":"---@class EpipStats ---@field CATEGORIES table<string, EpipStatCategory> Category definitions. ---@field CATEGORIES_ORDER string[] ---@field STATS table<string, EpipStat> ---@field MISSING_REGEN_CAP number TODO move ---@field STAT_VALUE_TAG string Pattern for stat tags. ---@field STAT_VALUE_TAG_PREFIX string ---@field TOOLTIP_TALENT number TODO remove ---@field TOOLTIP_TALENT_NAME string TODO remove ---@class EpipStat ---@field Name string ---@field Description string Fallback description in case a formatted Tooltip isn't set. ---@field Tooltip TooltipData ---@field Footnote string Italic text after description, in new paragraph. ---@field Suffix string Suffix for value display. ---@field Prefix string Prefix for value display. ---@field Boolean boolean Boolean stats show no value label. ---@field MaxCharges string If specified, this stat will display as \"{Value}/{Value of MaxCharges stat}\" ---@field IgnoreForHiding boolean If true, this stat will not be considered as added when determining if a Hidden category should display. ---@class EpipStatCategory ---@field Header string Name of the collapsable stat. ---@field Name string Name of the category in the tooltip. ---@field Behaviour EpipStatCategoryBehaviour Controls how default-value stats are shown. GreyOut greys out their label and value, hidden hides them - and the whole category - if no stats are owned. ---@field Stats string[] Stats displayed in the category, ordered.","title":"Objects"},{"location":"Features/Camera/","text":"Camera \u00b6 The Epip settings menu features a dedicated tab for customizing camera properties such as the zoom, angle, and field of view. Example of the maximum zoom out level. Angles \u00b6 For each camera mode, the game accepts two angles: one used when zoomed in as much as possible, and the second used when the camera is zoomed out as much as possible. Any zoom level inbetween the minimum and maximum will have its angle resolved through linear interpolation. These angles are actually position offsets applied to the camera, with the values being multiplied by the zoom level. This means that raising \"Angle value 2\" will result in the camera being higher up. However, the game camera always points towards the ground or the focused character, and as such, raising the Y level also means it will point more towards the ground. Example of an angle with a low Y (angle value 2)","title":"Camera"},{"location":"Features/Camera/#camera","text":"The Epip settings menu features a dedicated tab for customizing camera properties such as the zoom, angle, and field of view. Example of the maximum zoom out level.","title":"Camera"},{"location":"Features/Camera/#angles","text":"For each camera mode, the game accepts two angles: one used when zoomed in as much as possible, and the second used when the camera is zoomed out as much as possible. Any zoom level inbetween the minimum and maximum will have its angle resolved through linear interpolation. These angles are actually position offsets applied to the camera, with the values being multiplied by the zoom level. This means that raising \"Angle value 2\" will result in the camera being higher up. However, the game camera always points towards the ground or the focused character, and as such, raising the Y level also means it will point more towards the ground. Example of an angle with a low Y (angle value 2)","title":"Angles"},{"location":"Features/QuickFind/","text":"Quick Find \u00b6 Quick Find is a new UI that displays a filtered view of the party inventory. You may use it to efficiently search for equipment, consumables and other items through a plethora of filter options. You may directly use or drag items from the UI. There's no need to organize your inventory when you can find what you need in the blink of an eye! Quick Find is opened using LCtrl + F by default. You may also right-click an equipped item and select the \"Quick Swap...\" option to bring up the UI with filters configured to show items that go in the selected item slot. The following filter options are available: Equipment Item slot Rarity (including Artifact) Weapon & armor type (ex. bow, dagger, heavy armor...) Culled items (EE) Equipped items Stat boost: you may do a text search for bonuses such as +Warfare Consumables Potions Grenades & scrolls Food & drinks Skillbooks Skillbooks with unlearnt skills Ability school","title":"Quick Find"},{"location":"Features/QuickFind/#quick-find","text":"Quick Find is a new UI that displays a filtered view of the party inventory. You may use it to efficiently search for equipment, consumables and other items through a plethora of filter options. You may directly use or drag items from the UI. There's no need to organize your inventory when you can find what you need in the blink of an eye! Quick Find is opened using LCtrl + F by default. You may also right-click an equipped item and select the \"Quick Swap...\" option to bring up the UI with filters configured to show items that go in the selected item slot. The following filter options are available: Equipment Item slot Rarity (including Artifact) Weapon & armor type (ex. bow, dagger, heavy armor...) Culled items (EE) Equipped items Stat boost: you may do a text search for bonuses such as +Warfare Consumables Potions Grenades & scrolls Food & drinks Skillbooks Skillbooks with unlearnt skills Ability school","title":"Quick Find"},{"location":"Features/TooltipAdjustments/","text":"Tooltip Adjustments \u00b6 Numerous fixes and additions have been made to tooltips to improve their clarity. Some of these may be toggled off from the Tooltips tab in the settings menu. General \u00b6 Delay for simple tooltips appearing is customizable in the settings menu. Skill tooltips now account for effects that increase or decrease AP costs. Status tooltips show who applied the status (if anyone), as well as whether the status comes from an equipped item. Deltamods that previously did not show clearly in tooltips (+range, +elemental damage) now have blue labels in tooltips, like others. Holding shift will cause skill tooltips to display damage multipliers instead. Does not work for all skills. Removed the skull icon introduced by GB5 that appeared on negative status effects (unlikely to have been intentional). Added a keybind to scroll tooltips, useful for 3-socket items whose tooltips often overflow the screen. Books that have been read and keys that have been used now have a green label in their tooltip. Long item tooltips will be top-anchored, helping with the issue of being unable to compare items while wielding a heavily upgraded item. Fixed cone and zone-type skill tooltips saying that their range is boosted by Astrologer's Gaze (Far-out Man in vanilla), as they are not actually affected. Surface tooltips now show their owner as well as a hint regarding damage scaling. Surface tooltips now render on top of the hotbar. In developer mode, statuses and skills show their IDs in their tooltips. A debug keybind exists to copy these identifiers to the clipboard. Active Defense statuses now show their charges and max charges. Holding shift in combat displays partial AP costs for movement. EE-specific \u00b6 \"Stat Adjustments\" in tooltips are now merged into one line. Added a label for items that have been Masterworked. While infusing a spell or holding shift, skill tooltips now highlight Source Infusions you don't meet the requirements for. Holding shift also displays your relevant ability score in the tooltip. Most statuses that deal damage now show the calculated damage, rather than showing \"(before modifiers)\". Tooltips for randomly generated EE items now show a \"quality\" label, which indicates how good the damage/armor rolls were for that item. A 100% quality indicates the best roll, possibly only on divine items. The word \"Set: \" has been removed from tooltips due to confusion and redundancy. The damage tooltip in the character sheet has been made less confusing by removing the mention of damage from gear and dummied out LW values. Additionally, it now makes it clear that the weapon abilities grant multiplicative damage increases. Artifacts display with a special rarity and item color, hand-picked by the EE devs. This change has been made available in the base EE mod as well. Additionally, artifact runes now show a \"Cannot equip.\" warning for slots that they are incompatible with. Added a hint in the quest rewards screen which explains that deltamods are only generated after picking the item. EE rune crafting materials now have a hint explaining their usage.","title":"Tooltip Adjustments"},{"location":"Features/TooltipAdjustments/#tooltip-adjustments","text":"Numerous fixes and additions have been made to tooltips to improve their clarity. Some of these may be toggled off from the Tooltips tab in the settings menu.","title":"Tooltip Adjustments"},{"location":"Features/TooltipAdjustments/#general","text":"Delay for simple tooltips appearing is customizable in the settings menu. Skill tooltips now account for effects that increase or decrease AP costs. Status tooltips show who applied the status (if anyone), as well as whether the status comes from an equipped item. Deltamods that previously did not show clearly in tooltips (+range, +elemental damage) now have blue labels in tooltips, like others. Holding shift will cause skill tooltips to display damage multipliers instead. Does not work for all skills. Removed the skull icon introduced by GB5 that appeared on negative status effects (unlikely to have been intentional). Added a keybind to scroll tooltips, useful for 3-socket items whose tooltips often overflow the screen. Books that have been read and keys that have been used now have a green label in their tooltip. Long item tooltips will be top-anchored, helping with the issue of being unable to compare items while wielding a heavily upgraded item. Fixed cone and zone-type skill tooltips saying that their range is boosted by Astrologer's Gaze (Far-out Man in vanilla), as they are not actually affected. Surface tooltips now show their owner as well as a hint regarding damage scaling. Surface tooltips now render on top of the hotbar. In developer mode, statuses and skills show their IDs in their tooltips. A debug keybind exists to copy these identifiers to the clipboard. Active Defense statuses now show their charges and max charges. Holding shift in combat displays partial AP costs for movement.","title":"General"},{"location":"Features/TooltipAdjustments/#ee-specific","text":"\"Stat Adjustments\" in tooltips are now merged into one line. Added a label for items that have been Masterworked. While infusing a spell or holding shift, skill tooltips now highlight Source Infusions you don't meet the requirements for. Holding shift also displays your relevant ability score in the tooltip. Most statuses that deal damage now show the calculated damage, rather than showing \"(before modifiers)\". Tooltips for randomly generated EE items now show a \"quality\" label, which indicates how good the damage/armor rolls were for that item. A 100% quality indicates the best roll, possibly only on divine items. The word \"Set: \" has been removed from tooltips due to confusion and redundancy. The damage tooltip in the character sheet has been made less confusing by removing the mention of damage from gear and dummied out LW values. Additionally, it now makes it clear that the weapon abilities grant multiplicative damage increases. Artifacts display with a special rarity and item color, hand-picked by the EE devs. This change has been made available in the base EE mod as well. Additionally, artifact runes now show a \"Cannot equip.\" warning for slots that they are incompatible with. Added a hint in the quest rewards screen which explains that deltamods are only generated after picking the item. EE rune crafting materials now have a hint explaining their usage.","title":"EE-specific"},{"location":"Features/UI/","text":"UI improvements \u00b6 Epip contains a plethora of functional and cosmetic improvements over the base game UI. Big thanks to Elric for the new art assets used! Target Status Bar \u00b6 Resistance and B/H Display \u00b6 The health bar at the top of the screen now shows character's resistances as well as their Battered and Harried stacks. The B/H icons will light up if the target has enough of them to suffer a Tier 3 status, and will blink when the duration of the stacks is 1 turn or fewer. Actual B/H statuses are now hidden to reduce clutter. Alternative Display \u00b6 Holding the \"show sneak cones\" button (Shift by default) will replace the resistances display with the character's current AP, Source and Initiative - very handy for planning and foreseeing enemy turns. Additionally, it will lower the opacity of status effects on the health bar. Level Display \u00b6 An option to customize the position of targeted character level display was added. By default it's displayed in alternate status bar mode (while Shift is held). Showcase Accessible through Options -> Epip settings -> General -> Character Level Display . Hidden: After Name: Below Health Bar: When holding Shift: Aggro Display \u00b6 An option to display aggro-related information was added. It shows current Taunt source, if exists, as well as whether a character is Preferred, Unpreferred or Ignored by enemies. You can adjust whether this info is shown in the default or alternative health bar display. Disabled by default. Showcase Accessible through Options -> Epip settings -> General -> Show Aggro Information . Preferred: Unpreferred: Ignored: Taunted: Aggro tags explanation AI chooses its targets based on a number of parameters, such as target's effective HP, how easy it is to get to the target and so on. Its behavior is also influenced by aggro tags. No tag: AI has no preference on whether to choose this character as the primary attack target or not. However, AI will actively try to hit this character with AOE attacks. Most characters will not have any aggro tag by default. Preferred: AI will actively try to make this character its primary attack target. This aggro tag is manually provided to some important NPCs and is not normally obtainable during gameplay. Unpreferred: AI will try not to make this character its primary target. However, AI will still actively try to AOE this character. This tag is usually acquired by using Subjugated status, and is also manually provided to some characters, mostly summons. Ignored: AI will try to act as if this character does not exist. Taunted: this AI will consider the source of Taunt a Preferred target. This information is only relevant for Epic Encounters 2! Treasure Display \u00b6 An option has been added to display noteworthy item drops of enemies and containers on their health bar. For characters, this only shows while holding shift. Accessible through Options -> Epip settings -> General -> Character Level Display , disabled by default. Player Status Bar \u00b6 The player health bar now shows its values at all times (you needn't hover over it anymore), and the Physical/Magic Armor text was removed to improve readability. Additionally, your AP display now features dividers every 4 AP, making it easier to see at a quick glance how much AP you've got left. Your maximum SP is also shown at all times. Further minor graphical tweaks were made, such as properly centering AP/SP displays and adding a dropshadow to AP bar to improve its readability. Player Portraits \u00b6 The status bar on your characters now wraps onto a second row once there are more than 6 statuses, preventing it from obscuring the middle of the screen during intense fights. Summon portraits no longer show statuses and are shrunk while the status bar is wrapping. In the settings you may also enable a Battered/Harried display on these portraits. You can right-click your portraits to open a context menu where you can hide the status bar and summons, as well as access the Debug Cheats if you're in developer mode. Other settings Options -> Epip settings -> Player portraits Display B/H on player portraits Display nice, big B/H indicators right over player portaits. Disabled by default. Status Opacity in Combat Make statuses less visible. Hovering over statuses will always show them at full opacity. Character Sheet \u00b6 The character sheet now shows physical and piercing resistances. The tags tab is replaced with a brand new \"Keywords and misc.\" tab. It's full of useful information, such as: Remaining reaction charges. Currently equipped Artifacts, with descriptions. Active keyword activators and mutators, with descriptions. Your combat stats. It's not perfect, but it's a good reference. Other miscellaneous other info, e.g. your passive regeneration rates. Rewards UI \u00b6 An option has been added to allow viewing the character sheet while within the quest rewards screen, allowing you to compare rewards to your party's currently equipped items. Located in Options -> Epip settings -> Inventory -> Show Character Sheet in Reward UI . Disabled by default.","title":"UI improvements"},{"location":"Features/UI/#ui-improvements","text":"Epip contains a plethora of functional and cosmetic improvements over the base game UI. Big thanks to Elric for the new art assets used!","title":"UI improvements"},{"location":"Features/UI/#target-status-bar","text":"","title":"Target Status Bar"},{"location":"Features/UI/#resistance-and-bh-display","text":"The health bar at the top of the screen now shows character's resistances as well as their Battered and Harried stacks. The B/H icons will light up if the target has enough of them to suffer a Tier 3 status, and will blink when the duration of the stacks is 1 turn or fewer. Actual B/H statuses are now hidden to reduce clutter.","title":"Resistance and B/H Display"},{"location":"Features/UI/#alternative-display","text":"Holding the \"show sneak cones\" button (Shift by default) will replace the resistances display with the character's current AP, Source and Initiative - very handy for planning and foreseeing enemy turns. Additionally, it will lower the opacity of status effects on the health bar.","title":"Alternative Display"},{"location":"Features/UI/#level-display","text":"An option to customize the position of targeted character level display was added. By default it's displayed in alternate status bar mode (while Shift is held). Showcase Accessible through Options -> Epip settings -> General -> Character Level Display . Hidden: After Name: Below Health Bar: When holding Shift:","title":"Level Display"},{"location":"Features/UI/#aggro-display","text":"An option to display aggro-related information was added. It shows current Taunt source, if exists, as well as whether a character is Preferred, Unpreferred or Ignored by enemies. You can adjust whether this info is shown in the default or alternative health bar display. Disabled by default. Showcase Accessible through Options -> Epip settings -> General -> Show Aggro Information . Preferred: Unpreferred: Ignored: Taunted: Aggro tags explanation AI chooses its targets based on a number of parameters, such as target's effective HP, how easy it is to get to the target and so on. Its behavior is also influenced by aggro tags. No tag: AI has no preference on whether to choose this character as the primary attack target or not. However, AI will actively try to hit this character with AOE attacks. Most characters will not have any aggro tag by default. Preferred: AI will actively try to make this character its primary attack target. This aggro tag is manually provided to some important NPCs and is not normally obtainable during gameplay. Unpreferred: AI will try not to make this character its primary target. However, AI will still actively try to AOE this character. This tag is usually acquired by using Subjugated status, and is also manually provided to some characters, mostly summons. Ignored: AI will try to act as if this character does not exist. Taunted: this AI will consider the source of Taunt a Preferred target. This information is only relevant for Epic Encounters 2!","title":"Aggro Display"},{"location":"Features/UI/#treasure-display","text":"An option has been added to display noteworthy item drops of enemies and containers on their health bar. For characters, this only shows while holding shift. Accessible through Options -> Epip settings -> General -> Character Level Display , disabled by default.","title":"Treasure Display"},{"location":"Features/UI/#player-status-bar","text":"The player health bar now shows its values at all times (you needn't hover over it anymore), and the Physical/Magic Armor text was removed to improve readability. Additionally, your AP display now features dividers every 4 AP, making it easier to see at a quick glance how much AP you've got left. Your maximum SP is also shown at all times. Further minor graphical tweaks were made, such as properly centering AP/SP displays and adding a dropshadow to AP bar to improve its readability.","title":"Player Status Bar"},{"location":"Features/UI/#player-portraits","text":"The status bar on your characters now wraps onto a second row once there are more than 6 statuses, preventing it from obscuring the middle of the screen during intense fights. Summon portraits no longer show statuses and are shrunk while the status bar is wrapping. In the settings you may also enable a Battered/Harried display on these portraits. You can right-click your portraits to open a context menu where you can hide the status bar and summons, as well as access the Debug Cheats if you're in developer mode. Other settings Options -> Epip settings -> Player portraits Display B/H on player portraits Display nice, big B/H indicators right over player portaits. Disabled by default. Status Opacity in Combat Make statuses less visible. Hovering over statuses will always show them at full opacity.","title":"Player Portraits"},{"location":"Features/UI/#character-sheet","text":"The character sheet now shows physical and piercing resistances. The tags tab is replaced with a brand new \"Keywords and misc.\" tab. It's full of useful information, such as: Remaining reaction charges. Currently equipped Artifacts, with descriptions. Active keyword activators and mutators, with descriptions. Your combat stats. It's not perfect, but it's a good reference. Other miscellaneous other info, e.g. your passive regeneration rates.","title":"Character Sheet"},{"location":"Features/UI/#rewards-ui","text":"An option has been added to allow viewing the character sheet while within the quest rewards screen, allowing you to compare rewards to your party's currently equipped items. Located in Options -> Epip settings -> Inventory -> Show Character Sheet in Reward UI . Disabled by default.","title":"Rewards UI"},{"location":"Features/VanillaFixes/","text":"Fixes to vanilla issues \u00b6 Epip contains fixes to certain vanilla issues, mostly client-related. When summons die or are newly-spawned in combat, control will be automatically switched back to the summoner - you don't have to manually switch back to the summoner. You can now walk into corpses in combat without looting them; you can hold shift if you need to pillage them mid-fight, or disable this in the settings menu. Fixed undead characters not displaying overhead text for armor restoration. Fixed overhead text blocking clicks to the world (supposedly a DefEd regression). Fixed being unable to use items when under the effects of increased AP costs, if you didn't have normal_use_cost + 2 * cost_penalty AP. Essentially, the game was applying this AP cost penalty twice on the client. Tooltip-related fixes are on the Tooltip Adjustments page .","title":"Vanilla Fixes"},{"location":"Features/VanillaFixes/#fixes-to-vanilla-issues","text":"Epip contains fixes to certain vanilla issues, mostly client-related. When summons die or are newly-spawned in combat, control will be automatically switched back to the summoner - you don't have to manually switch back to the summoner. You can now walk into corpses in combat without looting them; you can hold shift if you need to pillage them mid-fight, or disable this in the settings menu. Fixed undead characters not displaying overhead text for armor restoration. Fixed overhead text blocking clicks to the world (supposedly a DefEd regression). Fixed being unable to use items when under the effects of increased AP costs, if you didn't have normal_use_cost + 2 * cost_penalty AP. Essentially, the game was applying this AP cost penalty twice on the client. Tooltip-related fixes are on the Tooltip Adjustments page .","title":"Fixes to vanilla issues"},{"location":"Features/Vanity/","text":"Vanity \u00b6 Satisfy all of your cosplay needs with an easy to use, non-intrusive vanity system. Unlike some other implementations, this has absolutely no gameplay side effects . It even works with Gift Bag 5 armor sets! Access its menu by right-clicking any of your equipped items and choosing the \"Vanity...\" option. From here you will have access to a number of tabs packed with customization features. Transmog Tab \u00b6 Equipment tab lets you seamlessly transmogrify the appearance of your weapons and armors. The item you've used to access this tab is its focus, indicated by the dropdown list at the top. To select another item to tinker with you can use right-click -> Vanity... on it or said dropdown list. Basics \u00b6 Transmog options consist of vanilla armor variants and options added by cosmetic mods. Support is included for \"Majora's Project Fashion Sins\" , \"Rendal's NPC Armors\" and \"Visitors from Cyseal\" mods. Using transmog is as easy as clicking on your desired option, no extra items or materials required. This change is purely cosmetic and has no effect on gameplay! Your equipment will not lose its stats, modifiers nor set effects. Yes, it works with Gift Bag 5 armor sets. If you think we've missed some of vanilla variants or want to see support for more third-party mods - feel free to tell us. Autotransmog \u00b6 Found your perfect look? Want to keep it for the rest of the game? \"Lock Appearance\" option is here for you. When it's ticked newly equipped gear will be automatically transmogrified to match your previous look. This option is saved per-slot. Automatic transmogrification will only happen if you don't have Vanity menu open. Visibility \u00b6 Want to go for more outlandish look? Make your equipment invisible with a press of a button! We trust you to use this option responsibly and only hide your shields and/or weapons for the coolness factor instead of making your characters walk around butt-naked. Keep Icon \u00b6 For the sake of making inventory management easier you can make transmog - both manual and automatic - preserve equipment icon. This option is saved per-slot. Elemental Effects \u00b6 Weapons with elemental damage normally get glowing visual effect applied to them. Don't like it? You can turn it off. Outfits Tab \u00b6 Have you mastered the art of drip? Have you found your ultimate image? Never wanna wear anything else ever again? Save your entire get-up and use it across playthroughs with a few clicks. Saved outfits are grouped by intended race and gender, but can be applied to any character. Adding a new outfit to your wardrobe is as simple as clicking and entering a name. Dyes Tab \u00b6 Feeling blue today? Maybe red? Or are you cool and it's time for purple? Worry not! All your coloring needs can be satisfied in the Dyes tab! Basics \u00b6 Equipment is divided in up to 3 color zones. You can choose your favorite colors for each of them using means provided: Sliders - the more user-friendly option, drag a bunch of sliders around to adjust RGB values in [0; 255] range. You don't even have to understand how RGB works - a handy preview of a resulting color is always displayed for your convenience. Hex - if you think you're cool you can always straight-up enter your desired hex code. Whether you conjure them in your mind through otherwordly communion or just look them up in Google - not our problem. Once done - press to see the fruits of your labor. Important - not all equipment can be dyed and not all dyeable equipment will have all 3 color zones. We are not to be blamed for this, blame Larian instead. Sharing \u00b6 Found the coolest color combination ever? Wanna share it with your friend? There are several ways to go about this: Copy/paste - see these ? Up means \"copy\", down means \"paste\". Import/export - puts a single string representing all 3 color zones into your clipboard, kinda like this #FF0000-#00FF00-#0000FF . scans your clipboard and if it contains the string in correct format - inputs color codes into their zones. Lock Sliders \u00b6 By default color sliders will automatically adjust to match currently focused equipment piece whenever you change it. However by ticking you can prevent this. This can be useful for applying one dye to multiple equipment pieces. Saving Dyes and Built-ins \u00b6 You can save your favorite dyes to reuse them later by pressing and entering a name. Saved dyes will appear under \"Custom Dyes\" collapsing list. There also are a few built-in dyes for you to use or take inspiration from. Auras Tab \u00b6 All these drip options were not enough for you? Want to make your presence even more noticeable? Apply permanent visual effects to your character in Auras tab. As simple as it gets - choose your attachment point, choose auras to use with it. This feature is in rather experimental stage. It works as intended, but has seen little adoption by players (to our knowledge). Any useful feedback is welcome.","title":"Vanity"},{"location":"Features/Vanity/#vanity","text":"Satisfy all of your cosplay needs with an easy to use, non-intrusive vanity system. Unlike some other implementations, this has absolutely no gameplay side effects . It even works with Gift Bag 5 armor sets! Access its menu by right-clicking any of your equipped items and choosing the \"Vanity...\" option. From here you will have access to a number of tabs packed with customization features.","title":"Vanity"},{"location":"Features/Vanity/#transmog-tab","text":"Equipment tab lets you seamlessly transmogrify the appearance of your weapons and armors. The item you've used to access this tab is its focus, indicated by the dropdown list at the top. To select another item to tinker with you can use right-click -> Vanity... on it or said dropdown list.","title":"Transmog Tab"},{"location":"Features/Vanity/#basics","text":"Transmog options consist of vanilla armor variants and options added by cosmetic mods. Support is included for \"Majora's Project Fashion Sins\" , \"Rendal's NPC Armors\" and \"Visitors from Cyseal\" mods. Using transmog is as easy as clicking on your desired option, no extra items or materials required. This change is purely cosmetic and has no effect on gameplay! Your equipment will not lose its stats, modifiers nor set effects. Yes, it works with Gift Bag 5 armor sets. If you think we've missed some of vanilla variants or want to see support for more third-party mods - feel free to tell us.","title":"Basics"},{"location":"Features/Vanity/#autotransmog","text":"Found your perfect look? Want to keep it for the rest of the game? \"Lock Appearance\" option is here for you. When it's ticked newly equipped gear will be automatically transmogrified to match your previous look. This option is saved per-slot. Automatic transmogrification will only happen if you don't have Vanity menu open.","title":"Autotransmog"},{"location":"Features/Vanity/#visibility","text":"Want to go for more outlandish look? Make your equipment invisible with a press of a button! We trust you to use this option responsibly and only hide your shields and/or weapons for the coolness factor instead of making your characters walk around butt-naked.","title":"Visibility"},{"location":"Features/Vanity/#keep-icon","text":"For the sake of making inventory management easier you can make transmog - both manual and automatic - preserve equipment icon. This option is saved per-slot.","title":"Keep Icon"},{"location":"Features/Vanity/#elemental-effects","text":"Weapons with elemental damage normally get glowing visual effect applied to them. Don't like it? You can turn it off.","title":"Elemental Effects"},{"location":"Features/Vanity/#outfits-tab","text":"Have you mastered the art of drip? Have you found your ultimate image? Never wanna wear anything else ever again? Save your entire get-up and use it across playthroughs with a few clicks. Saved outfits are grouped by intended race and gender, but can be applied to any character. Adding a new outfit to your wardrobe is as simple as clicking and entering a name.","title":"Outfits Tab"},{"location":"Features/Vanity/#dyes-tab","text":"Feeling blue today? Maybe red? Or are you cool and it's time for purple? Worry not! All your coloring needs can be satisfied in the Dyes tab!","title":"Dyes Tab"},{"location":"Features/Vanity/#basics_1","text":"Equipment is divided in up to 3 color zones. You can choose your favorite colors for each of them using means provided: Sliders - the more user-friendly option, drag a bunch of sliders around to adjust RGB values in [0; 255] range. You don't even have to understand how RGB works - a handy preview of a resulting color is always displayed for your convenience. Hex - if you think you're cool you can always straight-up enter your desired hex code. Whether you conjure them in your mind through otherwordly communion or just look them up in Google - not our problem. Once done - press to see the fruits of your labor. Important - not all equipment can be dyed and not all dyeable equipment will have all 3 color zones. We are not to be blamed for this, blame Larian instead.","title":"Basics"},{"location":"Features/Vanity/#sharing","text":"Found the coolest color combination ever? Wanna share it with your friend? There are several ways to go about this: Copy/paste - see these ? Up means \"copy\", down means \"paste\". Import/export - puts a single string representing all 3 color zones into your clipboard, kinda like this #FF0000-#00FF00-#0000FF . scans your clipboard and if it contains the string in correct format - inputs color codes into their zones.","title":"Sharing"},{"location":"Features/Vanity/#lock-sliders","text":"By default color sliders will automatically adjust to match currently focused equipment piece whenever you change it. However by ticking you can prevent this. This can be useful for applying one dye to multiple equipment pieces.","title":"Lock Sliders"},{"location":"Features/Vanity/#saving-dyes-and-built-ins","text":"You can save your favorite dyes to reuse them later by pressing and entering a name. Saved dyes will appear under \"Custom Dyes\" collapsing list. There also are a few built-in dyes for you to use or take inspiration from.","title":"Saving Dyes and Built-ins"},{"location":"Features/Vanity/#auras-tab","text":"All these drip options were not enough for you? Want to make your presence even more noticeable? Apply permanent visual effects to your character in Auras tab. As simple as it gets - choose your attachment point, choose auras to use with it. This feature is in rather experimental stage. It works as intended, but has seen little adoption by players (to our knowledge). Any useful feedback is welcome.","title":"Auras Tab"},{"location":"Info/faq/","text":"FAQ \u00b6 Where do I discuss the mod? \u00b6 The Epic Encounters discord and their feedback/bugs channels are the right places. The #epipeline channel there can also be used for development-related discussion. There is no \"Pip discord\"; its existence is a myth fabricated by a certain Subnautica fan. What's this talk about a gameplay mod? \u00b6 Initially, Epip started out as a gameplay mod after development of EE went on hiatus, before becoming a UI & QoL mod. Gameplay changes from that era stayed in the mod for a long time due to their acceptance, but ultimately had to be split off into a separate mod for portability reasons. The gameplay mod is available here , and its changes are documented in this document . You may also get it through Mel's auto-updater. There are no plans to work on any further gameplay changes. Check out Derpy's mod for a different take on EE balancing. What mods does Epip work with? \u00b6 Due to the nature of UI modding and the scope of the project, any other mods that alter UI will likely see problems. The following Larian UIs currently have their .swf overwritten in Epip: Context Menu Enemy Health Bar Hotbar (planned to be removed) OptionsInput (planned to be removed) Overhead PlayerInfo (planned to be removed) Status Console Character Sheet (planned to be removed) Combat Log (planned to be removed) Panel Select And the following have overlay UIs made for them, meaning problems will likely only arise with graphical mods to them: Character Sheet (for Vanity) Save/Load Advancements in UI modding and our expertise have made it possible to remove a lot of .swf overrides throughout the years, but there remain older Epip UI changes that have not yet received the rewrites required to get rid of their overrides. There's only so much that can be done in regards to Larian UI moddability however, and thus conflicts between UI mods will likely remain a problem forever. Epip does have a solution for the problem of custom UI moddability, however. Don't ask other modders to add support for Epip. Can I donate? \u00b6 I (Pip) don't take donations because they create pressure to deliver updates on a somewhat regular basis, which I physically and mentally cannot do. You can instead buy this game I worked on . It's a pretty good one within its genre too. Just keep in mind that I also worked on the UIs for it, for better or for worse. If it makes you feel less inclined to want to donate, keep in mind any donations would've gone towards questionable investments such as fursuits or lolita fashion. Can I help? \u00b6 Of course; Epip is at this point a huge project and any form of help is appreciated. Here's a list of things one could do: Provide feedback on existing features, as well as UX and UI design (infamously and ironically not our forte, according to many) Report bugs Help with localizations at our translation spreadsheet All languages are welcome, including ones the game doesn't normally support. Improve documentation - the very website you're reading right now! This includes writing dedicated pages for features, or improving the documentation of the code - either by improving annotations in the source code or providing more details/usage examples on the website pages. Improve existing features, fix issues with the code (functional or stylistic), or work on entirely new ones. The repository for the mod is here . Setting up a local clone for DOS mods is not very intuitive; I recommend asking Pip or Cathe in #epipeline for a walkthrough Brand new features, as well as large additions should be first discussed in #epipeline to make sure they are appropriate for the mod - see the \"what not to add\" list down below . Visually redesign UIs and create dedicated art assets (there's only so many times we can call upon the help of Elric-sama) In any case, you may discuss plans in #epipeline. I only like X, can you make a separate mod for it? \u00b6 No, because it's a logistics nightmare. The time spent maintaining separate repositories, writing separate changelogs, and pushing separate builds would waste a ridiculous amount of time that could've been spent working on the mod itself, as well as making things more confusing for the existing (and new) users, which have never had much concern for the mod's scope. The vast majority of features in Epip are optional and opt-in; the few that aren't, are the way they are because nobody has ever complained about them existing. If you feel like something needs a toggle, feel free to let us know. Did you steal the Improved Hotbar mod? \u00b6 The Improved Hotbar mod comes from Epip; it existed to allow that particular feature to be used outside of EE before Epip dropped it as a hard dependency, which was a lengthy process. Since Epip is now usable without EE, the standalone hotbar mod is obsolete and will not receive any further updates, possibly being removed from the workshop sometime in the future. Will there be controller support? \u00b6 Controller support for UI mods largely requires all the work to be done twice; this is an immense time commitment for a single developer. As much as I (Pip) enjoy the controller support in DOS games, it is unreasonable to fully support it at the time - it's time that could be spent making the mod better. Since v1066, mouse control is enabled while playing with a controller. This allows you to use certain custom Epip UIs such as Quick Find or the Codex - though critical features such as the settings menu remain unavailable. Plans exist to add proper controller navigation to EE UIs and certain custom Epip UIs, however it is not a priority and is unlikely to happen in 2023. Will there be a workshop release? \u00b6 Plans exist for this, but are being held back by a lack of workshop art assets as well as Extender v60 still being in development; for a workshop release we would like to use v1066 at the very least. Can you add X? \u00b6 Though it's easy to think that Epip is an all-in-one mod where anything goes, there are moderately strict guidelines for features that are either inappropriate or out of scope, listed as follows. Features only relevant to vanilla : Epip primarily targets EE, as it is what the team enjoys playing (and Epip wouldn't exist without it). Note that this does not exclude features or integrations with other noteworthy overhauls such as Conflux. Features that encourage tedious or degenerate playstyles : an example being macroing spells to prebuff more efficiently; such features lead the users to habits that ultimately make the game less enjoyable - this makes no sense in a QoL mod. Cheats or developer features outside of developer mode : the simple reason being that making such cheats accessible encourages users to mess with game balance before they understand it. Keeping such features locked behind a simple json edit or the creation of a mod ensures users have to at least think twice before making any questionable changes. Fixes or workarounds for other mods : not our responsibility. Features such as the world tooltip improvements or vanity exist because we were able to improve upon the concepts of the original works, not because there was anything fundamentally broken about them. Server-side systems : Epip is primarily a client QoL mod. Any server-side systems exist out of pure necessity, and EE Core already offers a phenomenal gameplay-oriented library that I do not think I (Pip) could improve much on. Wrappers around EE systems are for this same reason minimal. In-game tutorials : Epip is meant to be as non-intrusive as possible; the user should be able to explore features at their own pace and use only the ones they want. In-game tutorials go against this idea and are disrespectful to the people that read what mods do before they install them. What does \"Epip\" mean? \u00b6 Unknown. Some community members have pointed out that \"Epip\" spelled backwards is \"Pipe\", however the lore implications of this have not been studied.","title":"FAQ"},{"location":"Info/faq/#faq","text":"","title":"FAQ"},{"location":"Info/faq/#where-do-i-discuss-the-mod","text":"The Epic Encounters discord and their feedback/bugs channels are the right places. The #epipeline channel there can also be used for development-related discussion. There is no \"Pip discord\"; its existence is a myth fabricated by a certain Subnautica fan.","title":"Where do I discuss the mod?"},{"location":"Info/faq/#whats-this-talk-about-a-gameplay-mod","text":"Initially, Epip started out as a gameplay mod after development of EE went on hiatus, before becoming a UI & QoL mod. Gameplay changes from that era stayed in the mod for a long time due to their acceptance, but ultimately had to be split off into a separate mod for portability reasons. The gameplay mod is available here , and its changes are documented in this document . You may also get it through Mel's auto-updater. There are no plans to work on any further gameplay changes. Check out Derpy's mod for a different take on EE balancing.","title":"What's this talk about a gameplay mod?"},{"location":"Info/faq/#what-mods-does-epip-work-with","text":"Due to the nature of UI modding and the scope of the project, any other mods that alter UI will likely see problems. The following Larian UIs currently have their .swf overwritten in Epip: Context Menu Enemy Health Bar Hotbar (planned to be removed) OptionsInput (planned to be removed) Overhead PlayerInfo (planned to be removed) Status Console Character Sheet (planned to be removed) Combat Log (planned to be removed) Panel Select And the following have overlay UIs made for them, meaning problems will likely only arise with graphical mods to them: Character Sheet (for Vanity) Save/Load Advancements in UI modding and our expertise have made it possible to remove a lot of .swf overrides throughout the years, but there remain older Epip UI changes that have not yet received the rewrites required to get rid of their overrides. There's only so much that can be done in regards to Larian UI moddability however, and thus conflicts between UI mods will likely remain a problem forever. Epip does have a solution for the problem of custom UI moddability, however. Don't ask other modders to add support for Epip.","title":"What mods does Epip work with?"},{"location":"Info/faq/#can-i-donate","text":"I (Pip) don't take donations because they create pressure to deliver updates on a somewhat regular basis, which I physically and mentally cannot do. You can instead buy this game I worked on . It's a pretty good one within its genre too. Just keep in mind that I also worked on the UIs for it, for better or for worse. If it makes you feel less inclined to want to donate, keep in mind any donations would've gone towards questionable investments such as fursuits or lolita fashion.","title":"Can I donate?"},{"location":"Info/faq/#can-i-help","text":"Of course; Epip is at this point a huge project and any form of help is appreciated. Here's a list of things one could do: Provide feedback on existing features, as well as UX and UI design (infamously and ironically not our forte, according to many) Report bugs Help with localizations at our translation spreadsheet All languages are welcome, including ones the game doesn't normally support. Improve documentation - the very website you're reading right now! This includes writing dedicated pages for features, or improving the documentation of the code - either by improving annotations in the source code or providing more details/usage examples on the website pages. Improve existing features, fix issues with the code (functional or stylistic), or work on entirely new ones. The repository for the mod is here . Setting up a local clone for DOS mods is not very intuitive; I recommend asking Pip or Cathe in #epipeline for a walkthrough Brand new features, as well as large additions should be first discussed in #epipeline to make sure they are appropriate for the mod - see the \"what not to add\" list down below . Visually redesign UIs and create dedicated art assets (there's only so many times we can call upon the help of Elric-sama) In any case, you may discuss plans in #epipeline.","title":"Can I help?"},{"location":"Info/faq/#i-only-like-x-can-you-make-a-separate-mod-for-it","text":"No, because it's a logistics nightmare. The time spent maintaining separate repositories, writing separate changelogs, and pushing separate builds would waste a ridiculous amount of time that could've been spent working on the mod itself, as well as making things more confusing for the existing (and new) users, which have never had much concern for the mod's scope. The vast majority of features in Epip are optional and opt-in; the few that aren't, are the way they are because nobody has ever complained about them existing. If you feel like something needs a toggle, feel free to let us know.","title":"I only like X, can you make a separate mod for it?"},{"location":"Info/faq/#did-you-steal-the-improved-hotbar-mod","text":"The Improved Hotbar mod comes from Epip; it existed to allow that particular feature to be used outside of EE before Epip dropped it as a hard dependency, which was a lengthy process. Since Epip is now usable without EE, the standalone hotbar mod is obsolete and will not receive any further updates, possibly being removed from the workshop sometime in the future.","title":"Did you steal the Improved Hotbar mod?"},{"location":"Info/faq/#will-there-be-controller-support","text":"Controller support for UI mods largely requires all the work to be done twice; this is an immense time commitment for a single developer. As much as I (Pip) enjoy the controller support in DOS games, it is unreasonable to fully support it at the time - it's time that could be spent making the mod better. Since v1066, mouse control is enabled while playing with a controller. This allows you to use certain custom Epip UIs such as Quick Find or the Codex - though critical features such as the settings menu remain unavailable. Plans exist to add proper controller navigation to EE UIs and certain custom Epip UIs, however it is not a priority and is unlikely to happen in 2023.","title":"Will there be controller support?"},{"location":"Info/faq/#will-there-be-a-workshop-release","text":"Plans exist for this, but are being held back by a lack of workshop art assets as well as Extender v60 still being in development; for a workshop release we would like to use v1066 at the very least.","title":"Will there be a workshop release?"},{"location":"Info/faq/#can-you-add-x","text":"Though it's easy to think that Epip is an all-in-one mod where anything goes, there are moderately strict guidelines for features that are either inappropriate or out of scope, listed as follows. Features only relevant to vanilla : Epip primarily targets EE, as it is what the team enjoys playing (and Epip wouldn't exist without it). Note that this does not exclude features or integrations with other noteworthy overhauls such as Conflux. Features that encourage tedious or degenerate playstyles : an example being macroing spells to prebuff more efficiently; such features lead the users to habits that ultimately make the game less enjoyable - this makes no sense in a QoL mod. Cheats or developer features outside of developer mode : the simple reason being that making such cheats accessible encourages users to mess with game balance before they understand it. Keeping such features locked behind a simple json edit or the creation of a mod ensures users have to at least think twice before making any questionable changes. Fixes or workarounds for other mods : not our responsibility. Features such as the world tooltip improvements or vanity exist because we were able to improve upon the concepts of the original works, not because there was anything fundamentally broken about them. Server-side systems : Epip is primarily a client QoL mod. Any server-side systems exist out of pure necessity, and EE Core already offers a phenomenal gameplay-oriented library that I do not think I (Pip) could improve much on. Wrappers around EE systems are for this same reason minimal. In-game tutorials : Epip is meant to be as non-intrusive as possible; the user should be able to explore features at their own pace and use only the ones they want. In-game tutorials go against this idea and are disrespectful to the people that read what mods do before they install them.","title":"Can you add X?"},{"location":"Info/faq/#what-does-epip-mean","text":"Unknown. Some community members have pointed out that \"Epip\" spelled backwards is \"Pipe\", however the lore implications of this have not been studied.","title":"What does \"Epip\" mean?"},{"location":"Maintenance/","text":"Maintenance \u00b6 The maintenance section contains information for managing the various aspects of deployment of the mod. The purpose of these notes is to facilitate running the project when/if Pip is gone. They are of no use if you only use Epip as a dependency.","title":"Index"},{"location":"Maintenance/#maintenance","text":"The maintenance section contains information for managing the various aspects of deployment of the mod. The purpose of these notes is to facilitate running the project when/if Pip is gone. They are of no use if you only use Epip as a dependency.","title":"Maintenance"},{"location":"Maintenance/IDESetup/","text":"IDE Setup \u00b6 The project is developed in VS Code using the SumnekoLua extension for annotating types. At the time of writing (2023) it's the best Lua extension by a long shot, so I'd say don't waste time trying others. Any PRs are expected to use it, annotating types & methods and avoiding diagnostic warnings (the backlog of those from old code is large enough as it is). SumnekoLua settings \u00b6 The following extension settings are used, mainly changing the severity of some diagnostics to better highlight code oversights and remove warnings from some needlessly strict type-checking. \"Lua.completion.autoRequire\": false, \"Lua.type.castNumberToInteger\": true, \"Lua.hint.setType\": true, \"Lua.diagnostics.severity\": { \"cast-local-type\": \"Hint\", \"trailing-space\": \"Hint\", \"redefined-local\": \"Warning\", \"need-check-nil\": \"Error\", \"deprecated\": \"Information\", \"duplicate-set-field\": \"Information\", \"assign-type-mismatch\": \"Information\", \"redundant-return-value\": \"Warning\", \"unbalanced-assignments\": \"Error!\", \"redundant-value\": \"Error!\", \"code-after-break\": \"Error!\", \"param-type-mismatch\": \"Information\" }, \"Lua.diagnostics.groupSeverity\": { \"unused\": \"Warning\", \"ambiguity\": \"Warning\" }, \"Lua.diagnostics.disable\": [ \"trailing-space\", \"need-check-nil\" ], \"Lua.type.weakNilCheck\": true, \"Lua.diagnostics.workspaceRate\": 30, \"Lua.workspace.maxPreload\": 50000, \"Lua.workspace.preloadFileSize\": 5000, \"Lua.diagnostics.globals\": [ \"LibStub\" ], \"Lua.workspace.ignoreDir\": [ \".vscode\", \"Story/RawFiles/Lua/Utilities/LibDeflate.lua\" ], \"Lua.doc.protectedName\": [ \"__[A-Z]*\", \"__[a-z]*\" ], \"Lua.hover.expandAlias\": false, \"Lua.type.weakUnionCheck\": true, \"Lua.doc.privateName\": [ \"_[a-z]*\", \"_[A-Z]*\" ] LibStub global is used to remove a warning from LibDeflate. The private & protected patterns are used to automatically set the visibility of fields based on Epip's naming conventions: _ prefix for private, __ prefix for protected. AHK Script \u00b6 An Autohotkey script is used to speed up switching windows and resetting Lua. It's hotkeys are the following: Ctrl+M5: focus game window Ctrl+M4: focus console window Ctrl+R: reset Lua and focus game. This also creates the aliases epip = Mods.EpipEncounters and ui = epip.Client.UI in the console chunk. Shift+M5: focus VS Code ConsoleWindowClass := \"ConsoleWindowClass\" GameWindowClass := \"SDL_app\" ConsoleWindow := \"D:OS2 Script Extender Debug Console\" ^r::LuaReset() +XButton2::FocusVSC() ^XButton1::FocusConsole() ^XButton2::FocusGame() LuaReset() { global ConsoleWindow SetKeyDelay, 10 WinGet, PID, PID, %GameWindow% ControlSend, , {enter}reset{enter}, %ConsoleWindow% FocusGame() ControlSend, , epip = Mods.EpipEncounters{enter}, %ConsoleWindow% ControlSend, , ui = epip.Client.UI{enter}exit{enter}, %ConsoleWindow% } FocusGame() { global GameWindowClass WinActivate, ahk_class %GameWindowClass% } FocusConsole() { global ConsoleWindowClass WinActivate, ahk_class %ConsoleWindowClass% } FocusVSC() { WinGet, PID, PID, ahk_exe Code.exe WinActivate, ahk_pid %PID% } Theme \u00b6 Pip's theme is Noctis Bordo (from the Noctis extension) using the following overrides for token styles: { \"editor.tokenColorCustomizations\": { \"textMateRules\": [ { \"scope\": \"storage.type.annotation.lua\", \"settings\": { \"foreground\": \"#df769b\", \"fontStyle\": \"bold\" } }, { \"scope\": \"variable.other.lua\", \"settings\": { \"foreground\": \"#cbbec2\", } }, { \"scope\": \"support.type.lua\", \"settings\": { \"foreground\": \"#8b747c\", } }, { \"scope\": \"support.constant.lua\", \"settings\": { \"foreground\": \"#87a3b4\", } }, { \"scope\": \"entity.other.property.lua\", \"settings\": { \"foreground\": \"#c4c4c4\", \"fontStyle\": \"\", } }, ] } } Obviously you needn't use the same one. This detail is for posterity only.","title":"IDE Setup"},{"location":"Maintenance/IDESetup/#ide-setup","text":"The project is developed in VS Code using the SumnekoLua extension for annotating types. At the time of writing (2023) it's the best Lua extension by a long shot, so I'd say don't waste time trying others. Any PRs are expected to use it, annotating types & methods and avoiding diagnostic warnings (the backlog of those from old code is large enough as it is).","title":"IDE Setup"},{"location":"Maintenance/IDESetup/#sumnekolua-settings","text":"The following extension settings are used, mainly changing the severity of some diagnostics to better highlight code oversights and remove warnings from some needlessly strict type-checking. \"Lua.completion.autoRequire\": false, \"Lua.type.castNumberToInteger\": true, \"Lua.hint.setType\": true, \"Lua.diagnostics.severity\": { \"cast-local-type\": \"Hint\", \"trailing-space\": \"Hint\", \"redefined-local\": \"Warning\", \"need-check-nil\": \"Error\", \"deprecated\": \"Information\", \"duplicate-set-field\": \"Information\", \"assign-type-mismatch\": \"Information\", \"redundant-return-value\": \"Warning\", \"unbalanced-assignments\": \"Error!\", \"redundant-value\": \"Error!\", \"code-after-break\": \"Error!\", \"param-type-mismatch\": \"Information\" }, \"Lua.diagnostics.groupSeverity\": { \"unused\": \"Warning\", \"ambiguity\": \"Warning\" }, \"Lua.diagnostics.disable\": [ \"trailing-space\", \"need-check-nil\" ], \"Lua.type.weakNilCheck\": true, \"Lua.diagnostics.workspaceRate\": 30, \"Lua.workspace.maxPreload\": 50000, \"Lua.workspace.preloadFileSize\": 5000, \"Lua.diagnostics.globals\": [ \"LibStub\" ], \"Lua.workspace.ignoreDir\": [ \".vscode\", \"Story/RawFiles/Lua/Utilities/LibDeflate.lua\" ], \"Lua.doc.protectedName\": [ \"__[A-Z]*\", \"__[a-z]*\" ], \"Lua.hover.expandAlias\": false, \"Lua.type.weakUnionCheck\": true, \"Lua.doc.privateName\": [ \"_[a-z]*\", \"_[A-Z]*\" ] LibStub global is used to remove a warning from LibDeflate. The private & protected patterns are used to automatically set the visibility of fields based on Epip's naming conventions: _ prefix for private, __ prefix for protected.","title":"SumnekoLua settings"},{"location":"Maintenance/IDESetup/#ahk-script","text":"An Autohotkey script is used to speed up switching windows and resetting Lua. It's hotkeys are the following: Ctrl+M5: focus game window Ctrl+M4: focus console window Ctrl+R: reset Lua and focus game. This also creates the aliases epip = Mods.EpipEncounters and ui = epip.Client.UI in the console chunk. Shift+M5: focus VS Code ConsoleWindowClass := \"ConsoleWindowClass\" GameWindowClass := \"SDL_app\" ConsoleWindow := \"D:OS2 Script Extender Debug Console\" ^r::LuaReset() +XButton2::FocusVSC() ^XButton1::FocusConsole() ^XButton2::FocusGame() LuaReset() { global ConsoleWindow SetKeyDelay, 10 WinGet, PID, PID, %GameWindow% ControlSend, , {enter}reset{enter}, %ConsoleWindow% FocusGame() ControlSend, , epip = Mods.EpipEncounters{enter}, %ConsoleWindow% ControlSend, , ui = epip.Client.UI{enter}exit{enter}, %ConsoleWindow% } FocusGame() { global GameWindowClass WinActivate, ahk_class %GameWindowClass% } FocusConsole() { global ConsoleWindowClass WinActivate, ahk_class %ConsoleWindowClass% } FocusVSC() { WinGet, PID, PID, ahk_exe Code.exe WinActivate, ahk_pid %PID% }","title":"AHK Script"},{"location":"Maintenance/IDESetup/#theme","text":"Pip's theme is Noctis Bordo (from the Noctis extension) using the following overrides for token styles: { \"editor.tokenColorCustomizations\": { \"textMateRules\": [ { \"scope\": \"storage.type.annotation.lua\", \"settings\": { \"foreground\": \"#df769b\", \"fontStyle\": \"bold\" } }, { \"scope\": \"variable.other.lua\", \"settings\": { \"foreground\": \"#cbbec2\", } }, { \"scope\": \"support.type.lua\", \"settings\": { \"foreground\": \"#8b747c\", } }, { \"scope\": \"support.constant.lua\", \"settings\": { \"foreground\": \"#87a3b4\", } }, { \"scope\": \"entity.other.property.lua\", \"settings\": { \"foreground\": \"#c4c4c4\", \"fontStyle\": \"\", } }, ] } } Obviously you needn't use the same one. This detail is for posterity only.","title":"Theme"},{"location":"Maintenance/documentation/","text":"Documentation \u00b6 The documentation of functions, classes and other symbols in this site is automatically generated from LuaDoc annotations within the mod, using the update_docs.py script. The script parses the lua files in the Bootstrap scripts and searches line-by-line for annotations. Once these are gathered, the markdown files of the documentation site are searched for special html tags and the output of the doc script is inserted between them accordingly. For example, this tag inserts the classes, methods and events of MyLib between the doc opening and closing tags. If there was already content inbetween these tags, it is replaced; you should thus not modify the output. <doc class=\"MyLib\"> nil </doc> The scripts gathers annotations using two structures: \"Symbols\" and \"Metadata\". A symbol represents an actual symbol within the code, for example a function or a class. Each symbol may be composed of various metadata. As an example, function symbols capture comments and parameter annotations ( ---@param ) as their metadata.","title":"Documentation"},{"location":"Maintenance/documentation/#documentation","text":"The documentation of functions, classes and other symbols in this site is automatically generated from LuaDoc annotations within the mod, using the update_docs.py script. The script parses the lua files in the Bootstrap scripts and searches line-by-line for annotations. Once these are gathered, the markdown files of the documentation site are searched for special html tags and the output of the doc script is inserted between them accordingly. For example, this tag inserts the classes, methods and events of MyLib between the doc opening and closing tags. If there was already content inbetween these tags, it is replaced; you should thus not modify the output. <doc class=\"MyLib\"> nil </doc> The scripts gathers annotations using two structures: \"Symbols\" and \"Metadata\". A symbol represents an actual symbol within the code, for example a function or a class. Each symbol may be composed of various metadata. As an example, function symbols capture comments and parameter annotations ( ---@param ) as their metadata.","title":"Documentation"},{"location":"Maintenance/keybinds/","text":"Default Keybinds \u00b6 Below is a reference of the default keybinds, useful to avoid conflicts when defining new ones. Epip \u00b6 Actions with no default bindings are omitted. Action Default Binding 1 EpipEncounters_Debug_CopyIdentifier LCtrl + C EpipEncounters_Debug_OpenDebugMenu LCtrl + B EpipEncounters_Debug_Generic LCtrl + E EpipEncounters_Debug_CopyPosition LShift + T EpipEncounters_DebugCheats_OpenUI G EpipEncounters_QuickFind LCtrl + F EpipEncounters_ScrollTooltip Middle Click EpipEncounters_QuickExamine V EpipEncounters_Housing_RaiseFurniture LCtrl + Mouse Wheel Y+ EpipEncounters_Housing_LowerFurniture LCtrl + Mouse Wheel Y- EpipEncounters_Fishing_OpenCollectionLog LShift + F (Feature_Codex) Open LCtrl + G Vanilla \u00b6 Vanilla default bindings are specified in \\PlayerProfiles\\Default within Engine.pak . This table only contains the ones bindable ingame, omitting the GM mode ones. Debug bindings (from keyboard_debug.json ) are also omitted as they are non-functional in the release build. Input Event ID Default Binding 1 Default Binding 2 Camera Left Left A Camera Right Right D Camera Forward Up W Camera Backward Down S Camera Center Home Camera Rotate Left Delete Camera Rotate Right End Camera Zoom In Page Up Mouse Wheel Y+ Camera Zoom Out Page Down Mouse Wheel Y- Toggle Camera Rotate Middle Click Toggle Tactical Camera O Cancel Action Escape Right Click Context Menu Right Click Cycle Characters Next ] Cycle Characters Previous [ Force-Attack LCtrl Tactical Highlights ` Interact Left Click Ping \\ Queue RShift Rotate Item Left Mouse Wheel Y- Rotate Item Right Mouse Wheel Y+ Show World Tooltips LAlt Skip Video Escape Sheathe/Unsheathe Tab Toggle Input Mode LCtrl + LShift + Q Select Character 1 F1 Select Character 2 F2 Select Character 3 F3 Select Character 4 F4 Hotbar Slot 0 0 Numpad 0 Hotbar Slot 1 1 Numpad 1 Hotbar Slot 11 Minus Hotbar Slot 12 Equals Quick Load F8 Quick Save F5 Chat Return Show Sneak Cones LShift Split Item Stack LShift RShift Hotbar Actions Bar X Toggle Inventory + Character Sheet I Toggle Crafting G Toggle Equipment E Toggle Pause Menu Escape Toggle Inventory B Toggle Journal L Toggle Map M Toggle Party Management Y Toggle Recipes H Toggle UI Visibility F10 Toggle Skillbook K Toggle Sneak C Toggle Stats* UI Cancel Escape UI End Turn Space Hotbar Next Row R Hotbar Previous Row F Take All Space * intended to be an examine keybind, however it is non-functional, though it is even mentioned in loading screen tips. Epip's examine keybind is implemented by spoofing inputs and UI calls necessary to open the examine UI from the context menu (the only known way).","title":"Keybinds Reference"},{"location":"Maintenance/keybinds/#default-keybinds","text":"Below is a reference of the default keybinds, useful to avoid conflicts when defining new ones.","title":"Default Keybinds"},{"location":"Maintenance/keybinds/#epip","text":"Actions with no default bindings are omitted. Action Default Binding 1 EpipEncounters_Debug_CopyIdentifier LCtrl + C EpipEncounters_Debug_OpenDebugMenu LCtrl + B EpipEncounters_Debug_Generic LCtrl + E EpipEncounters_Debug_CopyPosition LShift + T EpipEncounters_DebugCheats_OpenUI G EpipEncounters_QuickFind LCtrl + F EpipEncounters_ScrollTooltip Middle Click EpipEncounters_QuickExamine V EpipEncounters_Housing_RaiseFurniture LCtrl + Mouse Wheel Y+ EpipEncounters_Housing_LowerFurniture LCtrl + Mouse Wheel Y- EpipEncounters_Fishing_OpenCollectionLog LShift + F (Feature_Codex) Open LCtrl + G","title":"Epip"},{"location":"Maintenance/keybinds/#vanilla","text":"Vanilla default bindings are specified in \\PlayerProfiles\\Default within Engine.pak . This table only contains the ones bindable ingame, omitting the GM mode ones. Debug bindings (from keyboard_debug.json ) are also omitted as they are non-functional in the release build. Input Event ID Default Binding 1 Default Binding 2 Camera Left Left A Camera Right Right D Camera Forward Up W Camera Backward Down S Camera Center Home Camera Rotate Left Delete Camera Rotate Right End Camera Zoom In Page Up Mouse Wheel Y+ Camera Zoom Out Page Down Mouse Wheel Y- Toggle Camera Rotate Middle Click Toggle Tactical Camera O Cancel Action Escape Right Click Context Menu Right Click Cycle Characters Next ] Cycle Characters Previous [ Force-Attack LCtrl Tactical Highlights ` Interact Left Click Ping \\ Queue RShift Rotate Item Left Mouse Wheel Y- Rotate Item Right Mouse Wheel Y+ Show World Tooltips LAlt Skip Video Escape Sheathe/Unsheathe Tab Toggle Input Mode LCtrl + LShift + Q Select Character 1 F1 Select Character 2 F2 Select Character 3 F3 Select Character 4 F4 Hotbar Slot 0 0 Numpad 0 Hotbar Slot 1 1 Numpad 1 Hotbar Slot 11 Minus Hotbar Slot 12 Equals Quick Load F8 Quick Save F5 Chat Return Show Sneak Cones LShift Split Item Stack LShift RShift Hotbar Actions Bar X Toggle Inventory + Character Sheet I Toggle Crafting G Toggle Equipment E Toggle Pause Menu Escape Toggle Inventory B Toggle Journal L Toggle Map M Toggle Party Management Y Toggle Recipes H Toggle UI Visibility F10 Toggle Skillbook K Toggle Sneak C Toggle Stats* UI Cancel Escape UI End Turn Space Hotbar Next Row R Hotbar Previous Row F Take All Space * intended to be an examine keybind, however it is non-functional, though it is even mentioned in loading screen tips. Epip's examine keybind is implemented by spoofing inputs and UI calls necessary to open the examine UI from the context menu (the only known way).","title":"Vanilla"},{"location":"Maintenance/localization/","text":"Updating localization \u00b6 Localization is done through the system provided by the Text library. However, python scripts are used to convert to and from the json format to a spreadsheet. To update localization: Download the google sheet Run generate_epip_localization_json.py to update the current localization with data from the sheet Generate new json with new/modified strings via !generatelocalizationtemplates command Run generate_epip_localization_sheets.py to update the sheet Update the google sheet The repository only contains the core scripts to do this, the particular ones mentioned before (which run the core script for each language in Epip) can be obtained from unpacking (or asking Pip if they're still alive).","title":"Localization"},{"location":"Maintenance/localization/#updating-localization","text":"Localization is done through the system provided by the Text library. However, python scripts are used to convert to and from the json format to a spreadsheet. To update localization: Download the google sheet Run generate_epip_localization_json.py to update the current localization with data from the sheet Generate new json with new/modified strings via !generatelocalizationtemplates command Run generate_epip_localization_sheets.py to update the sheet Update the google sheet The repository only contains the core scripts to do this, the particular ones mentioned before (which run the core script for each language in Epip) can be obtained from unpacking (or asking Pip if they're still alive).","title":"Updating localization"},{"location":"Tutorials/testing/","text":"Testing and debugging mods in-game can be made a lot easier with the extender. Script Extender Console \u00b6 Enabled by setting CreateConsole to true in OsirisExtenderSettings.json , the extender console logs messages from the extender, as well as lua scripting and osiris DebugBreaks. The console can also be used to run lua code (and therefore osiris as well). Pressing enter in the console window will enter the lua console, in server context by default. Typing server / client switches between the lua contexts. Running Osiris \u00b6 Calls, events and queries from the base game can be called directly, executing right away: print(CharacterGetHostCharacter()) Note that for queries, no out parameters are specified; they are instead returned as variables. Lua supports multiple returns per call, and the print function will print them all in order. User queries return true for success and false for failure - you have to lookup the return DBs yourself. For custom symbols, you must add an Osi. prefix (the Osi table is used to resolve custom osiris symbols, whereas the Larian ones are in the global table/scope): Osi.PROC_AMER_GEN_OpenQueuedMessageBox(CharacterGetHostCharacter(), \"Test\") DBs can be interacted with in all the usual manners: Queried with Osi.DB_MyDB:Get(param1, param2, ...) . Use nil for placeholders/wildcards. Set by calling the symbol: Osi.DB_MyDB(myValue1, myValue2) Deleted with the delete function: Osi.DB_MyDB:Delete(param1, param2, ...) . Once again, nil can be used as a wildcard. Querying DBs returns a list of all the valid tuples. In the console, the Ext.Dump() function can be used to print values as json. A useful shorthand for the function is _D() : As of v56, all extender objects can be dumped as well, revealing their mapped properties and methods: The _C() function is a shorthand for returning the currently active character, available on both client and server. S >> print(_C()) esv::Character (00007FF4C7E13200) Note that this returns an extender character object ( esv::Character ), not the GUID. The GUID of most objects is mapped to the .MyGuid property, and it's what you have to use for osiris: The boolean type is automatically converted to 0 / 1 when used in a call, but queries will still return integers. On the client context, _E() returns the character currently being examined in the examine UI. Epip Helpers \u00b6 Epip has some easy-to-use features to make testing ingame easier, if DeveloperMode is set to true in OsirisExtenderSettings.json . The most important of these is the Force Story Patching setting in the mod's settings menu. It will cause story compilation and patching to occur on any session load, making it far more convenient to test script changes ingame. This and other debug settings are always at the top of the menu, only visible in developer mode. The other useful, non-UI-related tool is the cheat context menu, accessed by right-clicking a character in the world or a player portrait on the left: The \"Copy GUID to clipboard\" option is self-explanatory. \"Teleport to object\" teleports the character to another character, item, or trigger, by its GUID. You can combine these two options to quickly teleport party members to eachother. \"Pipmode\" grants immortality, instantly-refreshing cooldowns, as well as infinite AP and SP. The options following it allow you to grant EE scripted stats to the character, with +/- buttons. Holding the \"Show sneak cones\" key (shift by default) adds/removes 10 points at a time. The longer menus can be scrolled with the mouse wheel, though it doesn't look intuitive at the moment. You may also add SpecialLogic and spells through a popup box: Lastly, the \"Items...\" submenu allows you to spawn item templates, generate treasure loot onto yourself, as well as quickly spawning in all artifacts and runes (can take a while to have it all generate!). Macros \u00b6 I have a simple AutoHotkey script for modding, with the following macros: Ctrl+M4 : focuses the console. M4 is the mouse side button that performs the 'back' function. Ctrl+M5 : focuses the game. Shift+M5 : focuses VS Code. Ctrl+R : resets lua scripts (types reset in the console), sets some Epip tables to be available from the global context in the client console, then focuses the game. ConsoleWindowClass := \"ConsoleWindowClass\" GameWindowClass := \"SDL_app\" ConsoleWindow := \"D:OS2 Script Extender Debug Console\" ^r::LuaReset() +XButton2::FocusVSC() ^XButton1::FocusConsole() ^XButton2::FocusGame() LuaReset() { global ConsoleWindow SetKeyDelay, 10 WinGet, PID, PID, %GameWindow% ControlSend, , {enter}reset{enter}, %ConsoleWindow% ControlSend, , client{enter}, %ConsoleWindow% FocusGame() ControlSend, , epip = Mods.EpipEncounters{enter}, %ConsoleWindow% ControlSend, , ui = epip.Client.UI{enter}exit{enter}, %ConsoleWindow% } FocusGame() { global GameWindowClass WinActivate, ahk_class %GameWindowClass% } FocusConsole() { global ConsoleWindowClass WinActivate, ahk_class %ConsoleWindowClass% } FocusVSC() { WinGet, PID, PID, ahk_exe Code.exe WinActivate, ahk_pid %PID% }","title":"Testing"},{"location":"Tutorials/testing/#script-extender-console","text":"Enabled by setting CreateConsole to true in OsirisExtenderSettings.json , the extender console logs messages from the extender, as well as lua scripting and osiris DebugBreaks. The console can also be used to run lua code (and therefore osiris as well). Pressing enter in the console window will enter the lua console, in server context by default. Typing server / client switches between the lua contexts.","title":"Script Extender Console"},{"location":"Tutorials/testing/#running-osiris","text":"Calls, events and queries from the base game can be called directly, executing right away: print(CharacterGetHostCharacter()) Note that for queries, no out parameters are specified; they are instead returned as variables. Lua supports multiple returns per call, and the print function will print them all in order. User queries return true for success and false for failure - you have to lookup the return DBs yourself. For custom symbols, you must add an Osi. prefix (the Osi table is used to resolve custom osiris symbols, whereas the Larian ones are in the global table/scope): Osi.PROC_AMER_GEN_OpenQueuedMessageBox(CharacterGetHostCharacter(), \"Test\") DBs can be interacted with in all the usual manners: Queried with Osi.DB_MyDB:Get(param1, param2, ...) . Use nil for placeholders/wildcards. Set by calling the symbol: Osi.DB_MyDB(myValue1, myValue2) Deleted with the delete function: Osi.DB_MyDB:Delete(param1, param2, ...) . Once again, nil can be used as a wildcard. Querying DBs returns a list of all the valid tuples. In the console, the Ext.Dump() function can be used to print values as json. A useful shorthand for the function is _D() : As of v56, all extender objects can be dumped as well, revealing their mapped properties and methods: The _C() function is a shorthand for returning the currently active character, available on both client and server. S >> print(_C()) esv::Character (00007FF4C7E13200) Note that this returns an extender character object ( esv::Character ), not the GUID. The GUID of most objects is mapped to the .MyGuid property, and it's what you have to use for osiris: The boolean type is automatically converted to 0 / 1 when used in a call, but queries will still return integers. On the client context, _E() returns the character currently being examined in the examine UI.","title":"Running Osiris"},{"location":"Tutorials/testing/#epip-helpers","text":"Epip has some easy-to-use features to make testing ingame easier, if DeveloperMode is set to true in OsirisExtenderSettings.json . The most important of these is the Force Story Patching setting in the mod's settings menu. It will cause story compilation and patching to occur on any session load, making it far more convenient to test script changes ingame. This and other debug settings are always at the top of the menu, only visible in developer mode. The other useful, non-UI-related tool is the cheat context menu, accessed by right-clicking a character in the world or a player portrait on the left: The \"Copy GUID to clipboard\" option is self-explanatory. \"Teleport to object\" teleports the character to another character, item, or trigger, by its GUID. You can combine these two options to quickly teleport party members to eachother. \"Pipmode\" grants immortality, instantly-refreshing cooldowns, as well as infinite AP and SP. The options following it allow you to grant EE scripted stats to the character, with +/- buttons. Holding the \"Show sneak cones\" key (shift by default) adds/removes 10 points at a time. The longer menus can be scrolled with the mouse wheel, though it doesn't look intuitive at the moment. You may also add SpecialLogic and spells through a popup box: Lastly, the \"Items...\" submenu allows you to spawn item templates, generate treasure loot onto yourself, as well as quickly spawning in all artifacts and runes (can take a while to have it all generate!).","title":"Epip Helpers"},{"location":"Tutorials/testing/#macros","text":"I have a simple AutoHotkey script for modding, with the following macros: Ctrl+M4 : focuses the console. M4 is the mouse side button that performs the 'back' function. Ctrl+M5 : focuses the game. Shift+M5 : focuses VS Code. Ctrl+R : resets lua scripts (types reset in the console), sets some Epip tables to be available from the global context in the client console, then focuses the game. ConsoleWindowClass := \"ConsoleWindowClass\" GameWindowClass := \"SDL_app\" ConsoleWindow := \"D:OS2 Script Extender Debug Console\" ^r::LuaReset() +XButton2::FocusVSC() ^XButton1::FocusConsole() ^XButton2::FocusGame() LuaReset() { global ConsoleWindow SetKeyDelay, 10 WinGet, PID, PID, %GameWindow% ControlSend, , {enter}reset{enter}, %ConsoleWindow% ControlSend, , client{enter}, %ConsoleWindow% FocusGame() ControlSend, , epip = Mods.EpipEncounters{enter}, %ConsoleWindow% ControlSend, , ui = epip.Client.UI{enter}exit{enter}, %ConsoleWindow% } FocusGame() { global GameWindowClass WinActivate, ahk_class %GameWindowClass% } FocusConsole() { global ConsoleWindowClass WinActivate, ahk_class %ConsoleWindowClass% } FocusVSC() { WinGet, PID, PID, ahk_exe Code.exe WinActivate, ahk_pid %PID% }","title":"Macros"},{"location":"Tutorials/Lua/","text":"Lua Tutorial \u00b6 The following is an Extender-focused lua tutorial. It is intended to teach you how to use lua with the Script Extender assuming no prior knowledge of the language, just programming basics (variables, control structures, classes etc.) Introduction \u00b6 Lua is an interpreted, functional, dynamically-typed language with possibility for prototype-based object-oriented programming. It is intended to be embedded within other applications (in this case, within the extender/game), offering high-level scripting. In the context of the Script Extender, it offers new forms of interaction with the game by allowing read/write access to the internal game object classes, as well as additional events to listen for. Setup \u00b6 Lua scripts are stored within the Mods/MyMod-GUID/Story/RawFiles/Lua folder and are loaded if the mod is active. Prior to creating lua scripts, you must enable the functionality by configuring a OsiToolsConfig.json file within the Mods/MyMod-GUID folder. The basic configuration is the following: { \"RequiredExtensionVersion\": 56, \"ModTable\": \"MyMod\", \"FeatureFlags\": [ \"OsirisExtensions\", \"Lua\", \"Preprocessor\" ] } Fields: - RequiredExtensionVersion : determines the minimum Script Extender version that the mod requires. Set this to the current version as of the time of your mod's creation, and increment it as you start using features from later versions. An error message box will be shown to users if they try to use your mod with an outdated Script Extender. - ModTable : determines the lua table that your mod's variables will be put into. Set this to a unique identifier. We'll get to its use later. - FeatureFlags : determines which features of the extender your mod requires; OsirisExtensions and Preprocessor are optional, but helpful if intend to you complement your lua scripting with Story scripting. After you've setup the config file, you're ready to create your first lua script. When the game loads mods, the extender will automatically load the BootstrapClient.lua and BootstrapServer.lua scripts within the RawFiles/Lua/ folder, if they exist. These are the first scripts to be loaded, and the scripts from which you will import any additional ones. The reasoning behind there being 2 different bootstrap scripts is that internally, the game is split into 2 \"contexts\": - Server: the part of the game that runs nearly all the logic (ex. damage calculations, Story scripting) and lets players connect to it. - Client: the game application that connects to the server, displays the game state and allows user interaction. In human words, the game window. Each game instance is one client (players in splitscreen use the same client). As the 2 contexts server different purposes, they differ in the information that is accessible in each. For example, the user interface (character sheet, inventory, etc.) only exists for clients, while Story scripting only runs on the server. As such, lua scripting is also split between Client and Server scripting so you can cleanly separate your functionality based on context. Lua Basics \u00b6 Variables \u00b6 Lua is an interpreted, dynamically-typed language. This means there is no need to compile it, the raw .lua file is loaded by the extender and interpreted line-by-line. Being dynamically-typed means that variables do not need to be declared with a type, and instead can be assigned and reassigned freely to any value, as is the case in Python for example. Variables are declared and assigned as the following (semicolons at the end of lines are optional): local myVar = 1 The local keyword is optional, and restricts the variable to the current context (the function/file, more precisely a \"chunk\"). Non-local variables are global. The following types exist in lua: - nil (null) - number - integer (in latest versions) - string - function - table - userdata (garbage-collected values also accessible from C) - lightuserdata (C pointers) The concept of the first few should be familiar, while the latter are more lua-specific and we'll cover them later, for now focusing instead on functions and tables. Functions \u00b6 Functions can be defined in multiple ways, the simplest one being: function MyFunc(param1, param2) -- Code here! end Note that comments in lua start with 2 dashes ( -- ). Functions can be given the local modifier as well, and any number of arguments, with no type specification. It is important to note that as lua is not a class-based language, there is no overloading. Creating a new function MyFunc after the first one will override that function no matter if its signature is different. Additionally, since functions are types, assigning MyFunc = something will also override the function! Lua functions can also be called with any amount of parameters, regardless of definition - we'll go into more detail on that quirk later. Functions and tables are passed by reference. (TODO remark that this does not mean you can \"alter\" them outside their context) Tables \u00b6 Tables are lua's take on objects . If you've done JavaScript or other prototype-based languages, they will be easy to understand. A table-type variable is defined, in its simplest form, like this: local myTable = {} Tables are the basic, extendable object in lua. You may set and retrieve values on them by indexing them: myTable[\"key1\"] = 1 -- This also works (if no spaces or special characters) myTable.key2 = 2 print(myTable.key1) print(myTable[\"key2\"]) Working with the Extender \u00b6 Events \u00b6 So far the tutorial has introduced lua basics, but with no explanation on how we'll be interfacing with the game with it. Lua scripting in the extender is primarily event-driven, as is Story scripting. You register listener functions for built-in events to react to things occurring in the game. TODO","title":"Index"},{"location":"Tutorials/Lua/#lua-tutorial","text":"The following is an Extender-focused lua tutorial. It is intended to teach you how to use lua with the Script Extender assuming no prior knowledge of the language, just programming basics (variables, control structures, classes etc.)","title":"Lua Tutorial"},{"location":"Tutorials/Lua/#introduction","text":"Lua is an interpreted, functional, dynamically-typed language with possibility for prototype-based object-oriented programming. It is intended to be embedded within other applications (in this case, within the extender/game), offering high-level scripting. In the context of the Script Extender, it offers new forms of interaction with the game by allowing read/write access to the internal game object classes, as well as additional events to listen for.","title":"Introduction"},{"location":"Tutorials/Lua/#setup","text":"Lua scripts are stored within the Mods/MyMod-GUID/Story/RawFiles/Lua folder and are loaded if the mod is active. Prior to creating lua scripts, you must enable the functionality by configuring a OsiToolsConfig.json file within the Mods/MyMod-GUID folder. The basic configuration is the following: { \"RequiredExtensionVersion\": 56, \"ModTable\": \"MyMod\", \"FeatureFlags\": [ \"OsirisExtensions\", \"Lua\", \"Preprocessor\" ] } Fields: - RequiredExtensionVersion : determines the minimum Script Extender version that the mod requires. Set this to the current version as of the time of your mod's creation, and increment it as you start using features from later versions. An error message box will be shown to users if they try to use your mod with an outdated Script Extender. - ModTable : determines the lua table that your mod's variables will be put into. Set this to a unique identifier. We'll get to its use later. - FeatureFlags : determines which features of the extender your mod requires; OsirisExtensions and Preprocessor are optional, but helpful if intend to you complement your lua scripting with Story scripting. After you've setup the config file, you're ready to create your first lua script. When the game loads mods, the extender will automatically load the BootstrapClient.lua and BootstrapServer.lua scripts within the RawFiles/Lua/ folder, if they exist. These are the first scripts to be loaded, and the scripts from which you will import any additional ones. The reasoning behind there being 2 different bootstrap scripts is that internally, the game is split into 2 \"contexts\": - Server: the part of the game that runs nearly all the logic (ex. damage calculations, Story scripting) and lets players connect to it. - Client: the game application that connects to the server, displays the game state and allows user interaction. In human words, the game window. Each game instance is one client (players in splitscreen use the same client). As the 2 contexts server different purposes, they differ in the information that is accessible in each. For example, the user interface (character sheet, inventory, etc.) only exists for clients, while Story scripting only runs on the server. As such, lua scripting is also split between Client and Server scripting so you can cleanly separate your functionality based on context.","title":"Setup"},{"location":"Tutorials/Lua/#lua-basics","text":"","title":"Lua Basics"},{"location":"Tutorials/Lua/#variables","text":"Lua is an interpreted, dynamically-typed language. This means there is no need to compile it, the raw .lua file is loaded by the extender and interpreted line-by-line. Being dynamically-typed means that variables do not need to be declared with a type, and instead can be assigned and reassigned freely to any value, as is the case in Python for example. Variables are declared and assigned as the following (semicolons at the end of lines are optional): local myVar = 1 The local keyword is optional, and restricts the variable to the current context (the function/file, more precisely a \"chunk\"). Non-local variables are global. The following types exist in lua: - nil (null) - number - integer (in latest versions) - string - function - table - userdata (garbage-collected values also accessible from C) - lightuserdata (C pointers) The concept of the first few should be familiar, while the latter are more lua-specific and we'll cover them later, for now focusing instead on functions and tables.","title":"Variables"},{"location":"Tutorials/Lua/#functions","text":"Functions can be defined in multiple ways, the simplest one being: function MyFunc(param1, param2) -- Code here! end Note that comments in lua start with 2 dashes ( -- ). Functions can be given the local modifier as well, and any number of arguments, with no type specification. It is important to note that as lua is not a class-based language, there is no overloading. Creating a new function MyFunc after the first one will override that function no matter if its signature is different. Additionally, since functions are types, assigning MyFunc = something will also override the function! Lua functions can also be called with any amount of parameters, regardless of definition - we'll go into more detail on that quirk later. Functions and tables are passed by reference. (TODO remark that this does not mean you can \"alter\" them outside their context)","title":"Functions"},{"location":"Tutorials/Lua/#tables","text":"Tables are lua's take on objects . If you've done JavaScript or other prototype-based languages, they will be easy to understand. A table-type variable is defined, in its simplest form, like this: local myTable = {} Tables are the basic, extendable object in lua. You may set and retrieve values on them by indexing them: myTable[\"key1\"] = 1 -- This also works (if no spaces or special characters) myTable.key2 = 2 print(myTable.key1) print(myTable[\"key2\"])","title":"Tables"},{"location":"Tutorials/Lua/#working-with-the-extender","text":"","title":"Working with the Extender"},{"location":"Tutorials/Lua/#events","text":"So far the tutorial has introduced lua basics, but with no explanation on how we'll be interfacing with the game with it. Lua scripting in the extender is primarily event-driven, as is Story scripting. You register listener functions for built-in events to react to things occurring in the game. TODO","title":"Events"}]}